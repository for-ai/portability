{
    "created": 1684002992.0494728,
    "duration": 1012.6153078079224,
    "exitcode": 1,
    "root": "/home/frasermince/portability",
    "environment": {
        "Python": "3.8.10",
        "Platform": "Linux-5.15.0-1022-gcp-x86_64-with-glibc2.29",
        "Packages": {
            "pytest": "7.2.2",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "metadata": "2.0.4",
            "xdist": "3.2.1",
            "json-report": "1.5.0",
            "hypothesis": "6.70.2",
            "timeout": "2.1.0",
            "forked": "1.6.0"
        }
    },
    "summary": {
        "passed": 654,
        "skipped": 289,
        "failed": 246,
        "total": 1189,
        "collected": 1189
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/__init__.py",
                    "type": "Package"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
                    "type": "TestCaseFunction",
                    "lineno": 211
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
                    "type": "TestCaseFunction",
                    "lineno": 484
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
                    "type": "TestCaseFunction",
                    "lineno": 513
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
                    "type": "TestCaseFunction",
                    "lineno": 539
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
                    "type": "TestCaseFunction",
                    "lineno": 464
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 312
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 411
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 429
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 272
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
                    "type": "TestCaseFunction",
                    "lineno": 238
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 187
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
                    "type": "TestCaseFunction",
                    "lineno": 254
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 243
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
                    "type": "TestCaseFunction",
                    "lineno": 524
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
                    "type": "TestCaseFunction",
                    "lineno": 171
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
                    "type": "TestCaseFunction",
                    "lineno": 315
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
                    "type": "TestCaseFunction",
                    "lineno": 291
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
                    "type": "TestCaseFunction",
                    "lineno": 471
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
                    "type": "TestCaseFunction",
                    "lineno": 218
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 266
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
                    "type": "TestCaseFunction",
                    "lineno": 337
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
                    "type": "TestCaseFunction",
                    "lineno": 564
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
                    "type": "TestCaseFunction",
                    "lineno": 353
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
                    "type": "TestCaseFunction",
                    "lineno": 435
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 486
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
                    "type": "TestCaseFunction",
                    "lineno": 531
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
                    "type": "TestCaseFunction",
                    "lineno": 422
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 194
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
                    "type": "TestCaseFunction",
                    "lineno": 409
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 72
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 403
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 406
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
                    "type": "TestCaseFunction",
                    "lineno": 59
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
                    "type": "TestCaseFunction",
                    "lineno": 558
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
                    "type": "TestCaseFunction",
                    "lineno": 562
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
                    "type": "TestCaseFunction",
                    "lineno": 570
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
                    "type": "TestCaseFunction",
                    "lineno": 575
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
                    "type": "TestCaseFunction",
                    "lineno": 354
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
                    "type": "TestCaseFunction",
                    "lineno": 521
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
                    "type": "TestCaseFunction",
                    "lineno": 405
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
                    "type": "TestCaseFunction",
                    "lineno": 385
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
                    "type": "TestCaseFunction",
                    "lineno": 365
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
                    "type": "TestCaseFunction",
                    "lineno": 425
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
                    "type": "TestCaseFunction",
                    "lineno": 505
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 445
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
                    "type": "TestCaseFunction",
                    "lineno": 525
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
                    "type": "TestCaseFunction",
                    "lineno": 532
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
                    "type": "TestCaseFunction",
                    "lineno": 544
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
                    "type": "TestCaseFunction",
                    "lineno": 509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 88
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
                    "type": "TestCaseFunction",
                    "lineno": 51
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 110
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 184
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
                    "type": "TestCaseFunction",
                    "lineno": 144
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 197
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
                    "type": "TestCaseFunction",
                    "lineno": 161
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
                    "type": "TestCaseFunction",
                    "lineno": 172
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
                    "type": "TestCaseFunction",
                    "lineno": 77
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
                    "type": "TestCaseFunction",
                    "lineno": 317
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
                    "type": "TestCaseFunction",
                    "lineno": 303
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
                    "type": "TestCaseFunction",
                    "lineno": 22
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
                    "type": "TestCaseFunction",
                    "lineno": 105
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
                    "type": "TestCaseFunction",
                    "lineno": 268
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
                    "type": "TestCaseFunction",
                    "lineno": 296
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
                    "type": "TestCaseFunction",
                    "lineno": 332
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
                    "type": "TestCaseFunction",
                    "lineno": 359
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
                    "type": "TestCaseFunction",
                    "lineno": 343
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
                    "type": "TestCaseFunction",
                    "lineno": 311
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 226
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 252
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 444
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
                    "type": "TestCaseFunction",
                    "lineno": 401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
                    "type": "TestCaseFunction",
                    "lineno": 452
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 185
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
                    "type": "TestCaseFunction",
                    "lineno": 196
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
                    "type": "TestCaseFunction",
                    "lineno": 142
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
                    "type": "TestCaseFunction",
                    "lineno": 124
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
                    "type": "TestCaseFunction",
                    "lineno": 152
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 104
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 96
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
                    "type": "TestCaseFunction",
                    "lineno": 449
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
                    "type": "TestCaseFunction",
                    "lineno": 108
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
                    "type": "TestCaseFunction",
                    "lineno": 164
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
                    "type": "TestCaseFunction",
                    "lineno": 136
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
                    "type": "TestCaseFunction",
                    "lineno": 206
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
                    "type": "TestCaseFunction",
                    "lineno": 178
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
                    "type": "TestCaseFunction",
                    "lineno": 225
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
                    "type": "TestCaseFunction",
                    "lineno": 240
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
                    "type": "TestCaseFunction",
                    "lineno": 249
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
                    "type": "TestCaseFunction",
                    "lineno": 25
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 366
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
                    "type": "TestCaseFunction",
                    "lineno": 399
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
                    "type": "TestCaseFunction",
                    "lineno": 91
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
                    "type": "TestCaseFunction",
                    "lineno": 43
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
                    "type": "TestCaseFunction",
                    "lineno": 95
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
                    "type": "TestCaseFunction",
                    "lineno": 182
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
                    "type": "TestCaseFunction",
                    "lineno": 220
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 269
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
                    "type": "TestCaseFunction",
                    "lineno": 358
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
                    "type": "TestCaseFunction",
                    "lineno": 140
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
                    "type": "TestCaseFunction",
                    "lineno": 281
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
                    "type": "TestCaseFunction",
                    "lineno": 318
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 335
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
                    "type": "TestCaseFunction",
                    "lineno": 302
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
                    "type": "TestCaseFunction",
                    "lineno": 239
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
                    "type": "TestCaseFunction",
                    "lineno": 64
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
                    "type": "TestCaseFunction",
                    "lineno": 46
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 23
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
                    "type": "TestCaseFunction",
                    "lineno": 70
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
                    "type": "TestCaseFunction",
                    "lineno": 54
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
                    "type": "TestCaseFunction",
                    "lineno": 29
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 443
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 649
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 766
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 781
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 773
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 883
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 926
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 898
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 890
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1024
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1016
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1038
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1073
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1065
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1087
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
                    "type": "TestCaseFunction",
                    "lineno": 1167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
                    "type": "TestCaseFunction",
                    "lineno": 79
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 153
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 137
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
                    "type": "TestCaseFunction",
                    "lineno": 118
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
                    "type": "TestCaseFunction",
                    "lineno": 250
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
                    "type": "TestCaseFunction",
                    "lineno": 162
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
                    "type": "TestCaseFunction",
                    "lineno": 1812
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
                    "type": "TestCaseFunction",
                    "lineno": 1496
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
                    "type": "TestCaseFunction",
                    "lineno": 1175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1147
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
                    "type": "TestCaseFunction",
                    "lineno": 1509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
                    "type": "TestCaseFunction",
                    "lineno": 1788
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
                    "type": "TestCaseFunction",
                    "lineno": 1598
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 988
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1086
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
                    "type": "TestCaseFunction",
                    "lineno": 1611
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
                    "type": "TestCaseFunction",
                    "lineno": 1795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
                    "type": "TestCaseFunction",
                    "lineno": 823
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
                    "type": "TestCaseFunction",
                    "lineno": 867
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 757
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
                    "type": "TestCaseFunction",
                    "lineno": 1663
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
                    "type": "TestCaseFunction",
                    "lineno": 241
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 937
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1036
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 217
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 391
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
                    "type": "TestCaseFunction",
                    "lineno": 132
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
                    "type": "TestCaseFunction",
                    "lineno": 643
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
                    "type": "TestCaseFunction",
                    "lineno": 256
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
                    "type": "TestCaseFunction",
                    "lineno": 603
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
                    "type": "TestCaseFunction",
                    "lineno": 166
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 658
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
                    "type": "TestCaseFunction",
                    "lineno": 552
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
                    "type": "TestCaseFunction",
                    "lineno": 200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1760
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
                    "type": "TestCaseFunction",
                    "lineno": 1574
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
                    "type": "TestCaseFunction",
                    "lineno": 1338
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
                    "type": "TestCaseFunction",
                    "lineno": 1629
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
                    "type": "TestCaseFunction",
                    "lineno": 1372
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
                    "type": "TestCaseFunction",
                    "lineno": 1381
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 101
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 68
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
                    "type": "TestCaseFunction",
                    "lineno": 27
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
                    "type": "TestCaseFunction",
                    "lineno": 38
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
                    "type": "TestCaseFunction",
                    "lineno": 16
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
                    "type": "TestCaseFunction",
                    "lineno": 197
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
                    "type": "TestCaseFunction",
                    "lineno": 36
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
                    "type": "TestCaseFunction",
                    "lineno": 102
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 58
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
                    "type": "TestCaseFunction",
                    "lineno": 112
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
                    "type": "TestCaseFunction",
                    "lineno": 169
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
                    "type": "TestCaseFunction",
                    "lineno": 87
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
                    "type": "TestCaseFunction",
                    "lineno": 92
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 115
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 97
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
                    "type": "TestCaseFunction",
                    "lineno": 193
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 165
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
                    "type": "TestCaseFunction",
                    "lineno": 182
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/__init__.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
                    "type": "Module"
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
            "lineno": 211,
            "outcome": "passed",
            "setup": {
                "duration": 3.4067879940002967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5375201609999749,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684001984.672994,
                        "msecs": 672.9938983917236,
                        "relativeCreated": 10773.203372955322,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00042441799996595364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008603210003457207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5150391550000677,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684001985.6803598,
                        "msecs": 680.3598403930664,
                        "relativeCreated": 11780.569314956665,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0004040439998789225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007761840001876408,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.38163753799972255,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003092080000897113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006179430001793662,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01854856199997812,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002252780000162602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005230599999777041,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01723144500010676,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022113700015324866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047930599976098165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017420147999928304,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021272999993016128,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
            "lineno": 484,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004768589997183881,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3085071500004233,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003074319997722341,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
            "lineno": 513,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006191309998939687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3100523890002478,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029723199986619875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
            "lineno": 539,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006448589997489762,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2270896959998936,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033662199984973995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
            "lineno": 464,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006223469999895315,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23943037200024264,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030419899985645316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005998229999022442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2326680809997015,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030240700016292976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006078510000406823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2789403689998835,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029899699984525796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
            "lineno": 133,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006226470000001427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21420923000005132,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030082200009928783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
            "lineno": 312,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005987569998069375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26574158799985526,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003204220001862268,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
            "lineno": 411,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006000630000926321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21338609999975233,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002912740001193015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
            "lineno": 429,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005985979996694368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2605573440000626,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000302936000025511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006611559997509175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21244469400016897,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029562300005636644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006048989998816978,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018525270999816712,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/lib/python3.8/contextlib.py:83: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684001988.9664736,
                        "msecs": 966.4735794067383,
                        "relativeCreated": 15066.683053970337,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00023338799974226276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
            "lineno": 272,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005378949999794713,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5111726459999772,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0008139579999806301,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007309760003408883,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000878406000083487,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002679240001270955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006283329998950649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06508832600002279,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002474070001881046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.000547298999663326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005877520000012737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021257999969748198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004927640002279077,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006837045999873226,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021651099996233825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
            "lineno": 125,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004871700002695434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006464087000040308,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020955299987690523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004757339997922827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010522331000174745,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021312599983502878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004762620001201867,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008897438000076363,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002033060000030673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047582099978171755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005890689999432652,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021546100015257252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004979529999218357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007593522000206576,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020363299972814275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047521699980279664,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007669777000046452,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000436296999851038,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005736480002269673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006860879998384917,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001987600003303669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004687240002567705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012051588999838714,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021525299962377176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
            "lineno": 238,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004747559996758355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023050836000038544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020745299980262644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048335499968743534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026774050999847532,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021661500022673863,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047270400000343216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04126150299998699,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021131999983481364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004842379998990509,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04563876500014885,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020833700000366662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
            "lineno": 187,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004782389996762504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007660075999865512,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002148769999621436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
            "lineno": 254,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004818999996132334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007527804000346805,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020727799983433215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005023879998589109,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00026812099986273097,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004333290003160073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 243,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005935150002187584,
                "outcome": "passed"
            },
            "call": {
                "duration": 12.973235896000006,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3252,
                    "message": "AssertionError: \nArrays are not equal\n\nnot equal lhs = array(True)\nnot equal rhs = array(False)\nMismatched elements: 1 / 1 (100%)\n x: array(True)\n y: array(False)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 264,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 43,
                        "message": "in assertAllFinite"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3252,
                        "message": "AssertionError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:252: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684001989.8096235,
                        "msecs": 809.6234798431396,
                        "relativeCreated": 15909.832954406738,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684001989.8131783,
                        "msecs": 813.178300857544,
                        "relativeCreated": 15913.387775421143,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testFiniteGradientAtDifficultPoints>\n\n    def testFiniteGradientAtDifficultPoints(self):\n      for dtype in [np.float32, np.float64]:\n        g = ops.Graph()\n        with g.as_default():\n          mu = variables.Variable(dtype(0.0))\n          sigma = variables.Variable(dtype(1.0))\n          timer = tensorflow_op_timer()\n          with timer:\n            dist = normal_lib.Normal(loc=mu, scale=sigma)\n            timer.gen.send(dist)\n          x = np.array([-100., -20., -5., 0., 5., 20., 100.]).astype(dtype)\n          for func in [\n              dist.cdf, dist.log_cdf, dist.survival_function,\n              dist.log_survival_function, dist.log_prob, dist.prob\n          ]:\n            value = func(x)\n            grads = gradients_impl.gradients(value, [mu, sigma])\n            with self.session(graph=g):\n              self.evaluate(variables.global_variables_initializer())\n              self.assertAllFinite(value)\n>             self.assertAllFinite(grads[0])\n\nsrc/tensorflow_tests_reduced/Normal_test.py:264: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/Normal_test.py:43: in assertAllFinite\n    self.assertAllEqual(all_true, is_finite)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testFiniteGradientAtDifficultPoints>, a = array(True)\nb = array(False), msg = ''\n\n    @py_func_if_in_function\n    def assertAllEqual(self, a, b, msg=None):\n      \"\"\"Asserts that two numpy arrays or Tensors have the same values.\n    \n      Args:\n        a: the expected numpy ndarray or anything can be converted to one.\n        b: the actual numpy ndarray or anything can be converted to one.\n        msg: Optional message to report on failure.\n      \"\"\"\n      if (ragged_tensor.is_ragged(a) or ragged_tensor.is_ragged(b)):\n        return self._assertRaggedEqual(a, b, msg)\n      msg = msg if msg else \"\"\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # Arbitrary bounds so that we don't print giant tensors.\n      if (b.ndim <= 3 or b.size < 500):\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" Contents: %r. \\n%s.\" % (a.shape, b.shape, b, msg))\n      else:\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" %s\" % (a.shape, b.shape, msg))\n    \n      same = (a == b)\n    \n      if (a.dtype in [\n          np.float16, np.float32, np.float64, dtypes.bfloat16.as_numpy_dtype\n      ]):\n        same = np.logical_or(same, np.logical_and(np.isnan(a), np.isnan(b)))\n      msgs = [msg]\n      if not np.all(same):\n        # Adds more details to np.testing.assert_array_equal.\n        diff = np.logical_not(same)\n        if a.ndim:\n          x = a[np.where(diff)]\n          y = b[np.where(diff)]\n          msgs.append(\"not equal where = {}\".format(np.where(diff)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not equal lhs = %r\" % x)\n        msgs.append(\"not equal rhs = %r\" % y)\n    \n        if (a.dtype.kind != b.dtype.kind and\n            {a.dtype.kind, b.dtype.kind}.issubset({\"U\", \"S\", \"O\"})):\n          a_list = []\n          b_list = []\n          # OK to flatten `a` and `b` because they are guaranteed to have the\n          # same shape.\n          for out_list, flat_arr in [(a_list, a.flat), (b_list, b.flat)]:\n            for item in flat_arr:\n              if isinstance(item, str):\n                out_list.append(item.encode(\"utf-8\"))\n              else:\n                out_list.append(item)\n          a = np.array(a_list)\n          b = np.array(b_list)\n    \n>       np.testing.assert_array_equal(a, b, err_msg=\"\\n\".join(msgs))\nE       AssertionError: \nE       Arrays are not equal\nE       \nE       not equal lhs = array(True)\nE       not equal rhs = array(False)\nE       Mismatched elements: 1 / 1 (100%)\nE        x: array(True)\nE        y: array(False)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3252: AssertionError"
            },
            "teardown": {
                "duration": 0.00039723600002616877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
            "lineno": 524,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006767260001652176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10965245599982154,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003004000000146334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
            "lineno": 171,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006101869998929033,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.997143808000146,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00037089800025569275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
            "lineno": 315,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006991200002630649,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.59592951500008,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003389749999769265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
            "lineno": 291,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007144119999793475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11567897000031735,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close lhs = 2.9362611567309673\nnot close rhs = 2.936253547668457\nnot close dif = 7.609062510294251e-06\nnot close tol = 3.9362535476684564e-06\ndtype = float64, shape = ()\nMismatched elements: 1 / 1 (100%)\nMax absolute difference: 7.60906251e-06\nMax relative difference: 2.59141875e-06\n x: array(2.936261)\n y: array(2.936254, dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 314,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalEntropyWithScalarInputs>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalEntropyWithScalarInputs(self):\n      # Scipy.stats.norm cannot deal with the shapes in the other test.\n      mu_v = 2.34\n      sigma_v = 4.56\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu_v, scale=sigma_v)\n        timer.gen.send(normal)\n    \n      entropy = normal.entropy()\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), entropy.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(entropy).shape)\n      self.assertAllEqual(normal.batch_shape, entropy.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(entropy).shape)\n      # scipy.stats.norm cannot deal with these shapes.\n      if not stats:\n        return\n      expected_entropy = stats.norm(mu_v, sigma_v).entropy()\n>     self.assertAllClose(expected_entropy, self.evaluate(entropy))\n\nsrc/tensorflow_tests_reduced/Normal_test.py:314: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalEntropyWithScalarInputs>\na = array(2.93626116), b = array(2.9362535, dtype=float32), rtol = 1e-06, atol = 1e-06\nmsg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close lhs = 2.9362611567309673\nE       not close rhs = 2.936253547668457\nE       not close dif = 7.609062510294251e-06\nE       not close tol = 3.9362535476684564e-06\nE       dtype = float64, shape = ()\nE       Mismatched elements: 1 / 1 (100%)\nE       Max absolute difference: 7.60906251e-06\nE       Max relative difference: 2.59141875e-06\nE        x: array(2.936261)\nE        y: array(2.936254, dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003583739999157842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
            "lineno": 471,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006004639999446226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2868622949999917,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003226830003768555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
            "lineno": 218,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006567380000888079,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9805807220000133,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=0.001, atol=0\nMismatched value: a is different from b. \nnot close where = (array([], dtype=int64),)\nnot close lhs = []\nnot close rhs = []\nnot close dif = []\nnot close tol = []\ndtype = float64, shape = (50,)\nx and y -inf location mismatch:\n x: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\n       -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\n       -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\n y: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\n       -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\n       -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 242,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogCDF>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogCDF(self):\n      batch_size = 50\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      x = np.linspace(-100.0, 10.0, batch_size).astype(np.float64)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      cdf = normal.log_cdf(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), cdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(cdf).shape)\n      self.assertAllEqual(normal.batch_shape, cdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(cdf).shape)\n    \n      if not stats:\n        return\n      expected_cdf = stats.norm(mu, sigma).logcdf(x)\n>     self.assertAllClose(expected_cdf, self.evaluate(cdf), atol=0, rtol=1e-3)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogCDF>\na = array([-2.71846674e+03, -2.87226212e+03, -2.29013116e+03, -1.49419982e+03,\n       -1.16756658e+03, -1.79713902e+03, -1...0,\n       -2.26439591e+00, -2.49925140e-01, -3.31285237e-01, -1.11303615e-03,\n       -4.46576733e-10, -3.36052592e-12])\nb = array([-2.71846674e+03, -2.87226212e+03, -2.29013116e+03, -1.49419982e+03,\n       -1.16756658e+03, -1.79713902e+03, -1...0,\n       -2.26439591e+00, -2.49925140e-01, -3.31285237e-01, -1.11303615e-03,\n       -4.46576720e-10, -3.36052583e-12])\nrtol = 0.001, atol = 0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=0.001, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([], dtype=int64),)\nE       not close lhs = []\nE       not close rhs = []\nE       not close dif = []\nE       not close tol = []\nE       dtype = float64, shape = (50,)\nE       x and y -inf location mismatch:\nE        x: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\nE              -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\nE              -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\nE        y: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\nE              -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\nE              -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00037191599994912394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
            "lineno": 94,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006139929996606952,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23046374099976674,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]),)\nnot close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nnot close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nnot close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\n 3.25966991e-05 3.26067818e-05]\nnot close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\n 3.1201985e-06]\ndtype = float64, shape = (6,)\nMismatched elements: 6 / 6 (100%)\nMax absolute difference: 3.27042548e-05\nMax relative difference: 1.56104771e-05\n x: array([-3.582731, -2.082731, -2.120231, -2.520231, -2.870231, -2.120231])\n y: array([-3.582698, -2.082699, -2.120198, -2.520199, -2.870198, -2.120198],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 128,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDF>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogPDF(self):\n      batch_size = 6\n      mu = constant_op.constant([3.0] * batch_size)\n      sigma = constant_op.constant([math.sqrt(10.0)] * batch_size)\n      x = np.array([-2.5, 2.5, 4.0, 0.0, -1.0, 2.0], dtype=np.float32)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      log_pdf = normal.log_prob(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), log_pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(log_pdf).shape)\n      self.assertAllEqual(normal.batch_shape, log_pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(log_pdf).shape)\n    \n      pdf = normal.prob(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(pdf).shape)\n      self.assertAllEqual(normal.batch_shape, pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(pdf).shape)\n    \n      if not stats:\n        return\n      expected_log_pdf = stats.norm(self.evaluate(mu),\n                                    self.evaluate(sigma)).logpdf(x)\n>     self.assertAllClose(expected_log_pdf, self.evaluate(log_pdf))\n\nsrc/tensorflow_tests_reduced/Normal_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDF>\na = array([-3.58273105, -2.0827311 , -2.1202311 , -2.52023106, -2.87023108,\n       -2.1202311 ])\nb = array([-3.5826983, -2.0826986, -2.1201985, -2.5201986, -2.8701985,\n       -2.1201985], dtype=float32), rtol = 1e-06\natol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]),)\nE       not close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nE       not close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nE       not close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\nE        3.25966991e-05 3.26067818e-05]\nE       not close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\nE        3.1201985e-06]\nE       dtype = float64, shape = (6,)\nE       Mismatched elements: 6 / 6 (100%)\nE       Max absolute difference: 3.27042548e-05\nE       Max relative difference: 1.56104771e-05\nE        x: array([-3.582731, -2.082731, -2.120231, -2.520231, -2.870231, -2.120231])\nE        y: array([-3.582698, -2.082699, -2.120198, -2.520199, -2.870198, -2.120198],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00039394499981426634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
            "lineno": 130,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006647050004175981,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3335702009999295,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]), array([0, 0, 0, 0, 0, 0]))\nnot close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nnot close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nnot close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\n 3.25966991e-05 3.26067818e-05]\nnot close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\n 3.1201985e-06]\ndtype = float64, shape = (6, 2)\nMismatched elements: 6 / 12 (50%)\nMax absolute difference: 3.27042548e-05\nMax relative difference: 1.56104771e-05\n x: array([[-3.582731, -2.281297],\n       [-2.082731, -3.281297],\n       [-2.120231, -3.906297],...\n y: array([[-3.582698, -2.281298],\n       [-2.082699, -3.281298],\n       [-2.120198, -3.906298],..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 169,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDFMultidimensional>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogPDFMultidimensional(self):\n      batch_size = 6\n      with tf.device(\"cpu\"):\n        mu = constant_op.constant([[3.0, -3.0]] * batch_size)\n        sigma = constant_op.constant(\n            [[math.sqrt(10.0), math.sqrt(15.0)]] * batch_size)\n        x = np.array([[-2.5, 2.5, 4.0, 0.0, -1.0, 2.0]], dtype=np.float32).T\n        timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      log_pdf = normal.log_prob(x)\n      log_pdf_values = self.evaluate(log_pdf)\n      self.assertEqual(log_pdf.get_shape(), (6, 2))\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), log_pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(log_pdf).shape)\n      self.assertAllEqual(normal.batch_shape, log_pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(log_pdf).shape)\n    \n      pdf = normal.prob(x)\n      pdf_values = self.evaluate(pdf)\n      self.assertEqual(pdf.get_shape(), (6, 2))\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf_values.shape)\n      self.assertAllEqual(normal.batch_shape, pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, pdf_values.shape)\n    \n      if not stats:\n        return\n      expected_log_pdf = stats.norm(self.evaluate(mu),\n                                    self.evaluate(sigma)).logpdf(x)\n>     self.assertAllClose(expected_log_pdf, log_pdf_values)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDFMultidimensional>\na = array([[-3.58273105, -2.28129699],\n       [-2.0827311 , -3.28129699],\n       [-2.1202311 , -3.9062968 ],\n       [-2.52023106, -2.57296363],\n       [-2.87023108, -2.40629699],\n       [-2.1202311 , -3.10629694]])\nb = array([[-3.5826983, -2.281298 ],\n       [-2.0826986, -3.2812977],\n       [-2.1201985, -3.9062977],\n       [-2.5201986, -2.5729644],\n       [-2.8701985, -2.4062977],\n       [-2.1201985, -3.1062977]], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]), array([0, 0, 0, 0, 0, 0]))\nE       not close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nE       not close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nE       not close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\nE        3.25966991e-05 3.26067818e-05]\nE       not close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\nE        3.1201985e-06]\nE       dtype = float64, shape = (6, 2)\nE       Mismatched elements: 6 / 12 (50%)\nE       Max absolute difference: 3.27042548e-05\nE       Max relative difference: 1.56104771e-05\nE        x: array([[-3.582731, -2.281297],\nE              [-2.082731, -3.281297],\nE              [-2.120231, -3.906297],...\nE        y: array([[-3.582698, -2.281298],\nE              [-2.082699, -3.281298],\nE              [-2.120198, -3.906298],...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00037384200004453305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
            "lineno": 266,
            "outcome": "failed",
            "setup": {
                "duration": 0.000629900000149064,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.1106788510001024,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-05, atol=0\nMismatched value: a is different from b. \nnot close where = (array([], dtype=int64),)\nnot close lhs = []\nnot close rhs = []\nnot close dif = []\nnot close tol = []\ndtype = float64, shape = (50,)\nx and y -inf location mismatch:\n x: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\n       -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\n       -1.087042e+01, -2.467983e+01, -2.828881e+01, -9.673692e+01,...\n y: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\n       -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\n       -1.087042e+01, -2.467983e+01, -2.828881e+01,          -inf,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 290,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogSurvivalFunction>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogSurvivalFunction(self):\n      batch_size = 50\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      x = np.linspace(-10.0, 100.0, batch_size).astype(np.float64)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      sf = normal.log_survival_function(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), sf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(sf).shape)\n      self.assertAllEqual(normal.batch_shape, sf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(sf).shape)\n    \n      if not stats:\n        return\n      expected_sf = stats.norm(mu, sigma).logsf(x)\n>     self.assertAllClose(expected_sf, self.evaluate(sf), atol=0, rtol=1e-5)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:290: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogSurvivalFunction>\na = array([-1.58100526e-11, -9.63975185e-12, -2.17294721e-05, -1.59851442e-01,\n       -5.22361614e-01, -4.92193631e-01, -8...3,\n       -2.54495648e+03, -2.30082673e+03, -1.80839656e+03, -1.63287471e+03,\n       -3.83425748e+03, -3.74187317e+03])\nb = array([-1.58100529e-11, -9.63975167e-12, -2.17294721e-05, -1.59851442e-01,\n       -5.22361614e-01, -4.92193631e-01, -8...3,\n       -2.54495648e+03, -2.30082673e+03, -1.80839656e+03, -1.63287471e+03,\n       -3.83425748e+03, -3.74187317e+03])\nrtol = 1e-05, atol = 0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-05, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([], dtype=int64),)\nE       not close lhs = []\nE       not close rhs = []\nE       not close dif = []\nE       not close tol = []\nE       dtype = float64, shape = (50,)\nE       x and y -inf location mismatch:\nE        x: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\nE              -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\nE              -1.087042e+01, -2.467983e+01, -2.828881e+01, -9.673692e+01,...\nE        y: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\nE              -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\nE              -1.087042e+01, -2.467983e+01, -2.828881e+01,          -inf,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003777920001084567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
            "lineno": 337,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006255670000427926,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8388097170000037,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00046254499966380536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
            "lineno": 564,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009445079999750305,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.801063473999875,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:581: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002025.957516,
                        "msecs": 957.5159549713135,
                        "relativeCreated": 52057.72542953491,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003921060001630394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
            "lineno": 353,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006706939998366579,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.195747961000052,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=0\nMismatched value: a is different from b. \nnot close where = (array([ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n       24]),)\nnot close lhs = [-2.2167613  -0.5416338  -1.84319094 -2.1376815  -1.03631029  0.6666193\n -1.62494523 -1.06409917 -1.38996994  1.4744596   1.50845214  0.6596996\n -0.06850544  0.37577051  1.28210496 -1.08370343  1.04559716 -1.28761554]\nnot close rhs = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nnot close dif = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nnot close tol = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\ndtype = float64, shape = (52,)\nx and y nan location mismatch:\n x: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\n        -0.362716,  -4.316168,  -2.216761,  -0.541634,  -1.843191,\n        -2.137682,  -1.03631 ,   0.666619,  -1.624945,  -1.064099,...\n y: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\n        -0.362716,  -4.316168,        nan,        nan,        nan,\n              nan,        nan,        nan,        nan,        nan,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 380,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalQuantile>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalQuantile(self):\n      batch_size = 52\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      p = np.linspace(0., 1.0, batch_size - 2).astype(np.float64)\n      # Quantile performs piecewise rational approximation so adding some\n      # special input values to make sure we hit all the pieces.\n      p = np.hstack((p, np.exp(-33), 1. - np.exp(-33)))\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n      x = normal.quantile(p)\n    \n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), x.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(x).shape)\n      self.assertAllEqual(normal.batch_shape, x.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(x).shape)\n    \n      if not stats:\n        return\n      expected_x = stats.norm(mu, sigma).ppf(p)\n>     self.assertAllClose(expected_x, self.evaluate(x), atol=0.)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalQuantile>\na = array([        -inf,  -2.44157199,  -2.98273687,  -3.83925603,\n        -2.90591281,  -0.36271623,  -4.31616788,  -2.21...  2.26027454,   2.3117328 ,   4.1005244 ,   2.38212891,\n         3.68270323,          inf, -15.60125165,  10.99604508])\nb = array([        -inf,  -2.44157199,  -2.98273687,  -3.83925603,\n        -2.90591281,  -0.36271623,  -4.31616788,       ...  2.26027454,   2.3117328 ,   4.1005244 ,   2.38212891,\n         3.68270323,          inf, -15.60125165,  10.99604508])\nrtol = 1e-06, atol = 0.0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\nE              24]),)\nE       not close lhs = [-2.2167613  -0.5416338  -1.84319094 -2.1376815  -1.03631029  0.6666193\nE        -1.62494523 -1.06409917 -1.38996994  1.4744596   1.50845214  0.6596996\nE        -0.06850544  0.37577051  1.28210496 -1.08370343  1.04559716 -1.28761554]\nE       not close rhs = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       not close dif = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       not close tol = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       dtype = float64, shape = (52,)\nE       x and y nan location mismatch:\nE        x: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\nE               -0.362716,  -4.316168,  -2.216761,  -0.541634,  -1.843191,\nE               -2.137682,  -1.03631 ,   0.666619,  -1.624945,  -1.064099,...\nE        y: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\nE               -0.362716,  -4.316168,        nan,        nan,        nan,\nE                     nan,        nan,        nan,        nan,        nan,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00039702300000499235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
            "lineno": 435,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006554149999828951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8648643899996387,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003015420002157043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
            "lineno": 486,
            "outcome": "passed",
            "setup": {
                "duration": 0.000603024000156438,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.041790537999987,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005007770000702294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
            "lineno": 531,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010683359996619401,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2178146530000049,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028462299997045193,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006298919997789199,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14220817300019917,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002867230000447307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
            "lineno": 422,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006356919998324884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09071772300012526,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030591299992011045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 194,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006435450000026322,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9738417499997922,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003407649996916007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
            "lineno": 409,
            "outcome": "passed",
            "setup": {
                "duration": 0.000664009000047372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13696877999973367,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029825800038452144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
            "lineno": 85,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006720699998368218,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.088239294000232,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:90: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002048.7112648,
                        "msecs": 711.2648487091064,
                        "relativeCreated": 74811.4743232727,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003272859999015054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
            "lineno": 72,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006725339999320568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3312044929998592,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00036421599997993326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.000686476999817387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008370067999749153,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002557340003477293,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
            "lineno": 403,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005706860001737368,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4802603939997425,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003453869999248127,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
            "lineno": 406,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006400040001608431,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.339209380000284,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3252,
                    "message": "AssertionError: \nArrays are not equal\n\nnot equal where = (array([1, 2, 4]),)\nnot equal lhs = array([ True,  True,  True])\nnot equal rhs = array([False, False, False])\nMismatched elements: 3 / 6 (50%)\n x: array([ True,  True,  True,  True,  True,  True])\n y: array([ True, False, False,  True, False,  True])"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 408,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 402,
                        "message": "in _baseQuantileFiniteGradientAtDifficultPoints"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 43,
                        "message": "in assertAllFinite"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3252,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testQuantileFiniteGradientAtDifficultPointsFloat64>\n\n    def testQuantileFiniteGradientAtDifficultPointsFloat64(self):\n>     self._baseQuantileFiniteGradientAtDifficultPoints(np.float64)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:408: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/Normal_test.py:402: in _baseQuantileFiniteGradientAtDifficultPoints\n    self.assertAllFinite(grads[1])\nsrc/tensorflow_tests_reduced/Normal_test.py:43: in assertAllFinite\n    self.assertAllEqual(all_true, is_finite)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testQuantileFiniteGradientAtDifficultPointsFloat64>\na = array([ True,  True,  True,  True,  True,  True]), b = array([ True, False, False,  True, False,  True]), msg = ''\n\n    @py_func_if_in_function\n    def assertAllEqual(self, a, b, msg=None):\n      \"\"\"Asserts that two numpy arrays or Tensors have the same values.\n    \n      Args:\n        a: the expected numpy ndarray or anything can be converted to one.\n        b: the actual numpy ndarray or anything can be converted to one.\n        msg: Optional message to report on failure.\n      \"\"\"\n      if (ragged_tensor.is_ragged(a) or ragged_tensor.is_ragged(b)):\n        return self._assertRaggedEqual(a, b, msg)\n      msg = msg if msg else \"\"\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # Arbitrary bounds so that we don't print giant tensors.\n      if (b.ndim <= 3 or b.size < 500):\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" Contents: %r. \\n%s.\" % (a.shape, b.shape, b, msg))\n      else:\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" %s\" % (a.shape, b.shape, msg))\n    \n      same = (a == b)\n    \n      if (a.dtype in [\n          np.float16, np.float32, np.float64, dtypes.bfloat16.as_numpy_dtype\n      ]):\n        same = np.logical_or(same, np.logical_and(np.isnan(a), np.isnan(b)))\n      msgs = [msg]\n      if not np.all(same):\n        # Adds more details to np.testing.assert_array_equal.\n        diff = np.logical_not(same)\n        if a.ndim:\n          x = a[np.where(diff)]\n          y = b[np.where(diff)]\n          msgs.append(\"not equal where = {}\".format(np.where(diff)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not equal lhs = %r\" % x)\n        msgs.append(\"not equal rhs = %r\" % y)\n    \n        if (a.dtype.kind != b.dtype.kind and\n            {a.dtype.kind, b.dtype.kind}.issubset({\"U\", \"S\", \"O\"})):\n          a_list = []\n          b_list = []\n          # OK to flatten `a` and `b` because they are guaranteed to have the\n          # same shape.\n          for out_list, flat_arr in [(a_list, a.flat), (b_list, b.flat)]:\n            for item in flat_arr:\n              if isinstance(item, str):\n                out_list.append(item.encode(\"utf-8\"))\n              else:\n                out_list.append(item)\n          a = np.array(a_list)\n          b = np.array(b_list)\n    \n>       np.testing.assert_array_equal(a, b, err_msg=\"\\n\".join(msgs))\nE       AssertionError: \nE       Arrays are not equal\nE       \nE       not equal where = (array([1, 2, 4]),)\nE       not equal lhs = array([ True,  True,  True])\nE       not equal rhs = array([False, False, False])\nE       Mismatched elements: 3 / 6 (50%)\nE        x: array([ True,  True,  True,  True,  True,  True])\nE        y: array([ True, False, False,  True, False,  True])\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3252: AssertionError"
            },
            "teardown": {
                "duration": 0.0003650660000857897,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006040719999873545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.943428201000188,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00036110400014877087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006584200000361307,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010405930001979868,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0009633999998186482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006683309998152254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007477636000203347,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028832099997089244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006303710001702711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25089055699982055,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027707800018106354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
            "lineno": 1727,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005777420001322753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08432564200029447,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024891400016713305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005476139999700536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000779034000061074,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003118049999102368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005854000000908854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17173983099974066,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000294977000066865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006224570001904794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5172090819996811,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003156200000375975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006209900002431823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1942784779998874,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032808900004965835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006228089996511699,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1935097330001554,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030304099982458865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006289900002229842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025182267999753094,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022980099993219483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005602769997494761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20989209400022446,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030237100008889684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006352629998218617,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26273860700030127,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003134059998046723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006351590000122087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002355490999889298,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021799900014229934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005350820001694956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015920433000246703,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002424650001557893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000671643999794469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025264286000037828,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020575500002451008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048683200020605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023085159999936877,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020515899996098597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004823870003747288,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00027208300025449716,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005044950003139093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005704360000891029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6351541589997396,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030769299974053865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006693360001008841,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4373861029998807,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000290443999801937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006318529999589373,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5233425000001262,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003100740000263613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
            "lineno": 163,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006606219999412133,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.668566466000357,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005144489996382617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009718299997985014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018353919999753998,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00041743800011317944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006569839997609961,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1592034440000134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032754299991211155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006956249999348074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011030119999304588,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00035282799990454805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007435079996866989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15986054299992247,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031846799993218156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007239699998535798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11979208000002473,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002068.7964354,
                        "msecs": 796.4353561401367,
                        "relativeCreated": 94896.64483070374,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00031592699997418094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006534369999826595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008014850000108709,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003556599999683385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006619509999836737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025712990000101854,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022632500031249947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
            "lineno": 42,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005294909997246577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007697109999753593,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021262700010993285,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005295119999573217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00178061999986312,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022176499987835996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
            "lineno": 59,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005236430001787085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004536385999927006,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022712400004820665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
            "lineno": 558,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005171930001779401,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005236479996710841,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021269499984555296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
            "lineno": 562,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005340190000424627,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046883999993951875,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021133900008862838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005187020001358178,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000664466999751312,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002159600003324158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005124659996909031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005376780000005965,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022222000006877352,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005078939998384158,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005358349999369239,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021650500002579065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005096770000818651,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005370010003389325,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021916300011071144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005084349995740922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005553159999180934,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022274499997365638,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005092050000712334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005345129998204357,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021399499973995262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005061890001343272,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005292119999467104,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022319300023809774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005163089999768999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005248150000625174,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021474999994097743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005292020000524644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005409899999904155,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021147200004634215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005126989999553189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005307119999997667,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021405300003607408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005053510003563133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005360779996408382,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022010700013197493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005040730002292548,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008033829999476438,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022350499966705684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005204839999350952,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005401550001806754,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021545600020544953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005097870002828131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005512369998541544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002148829998986912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005052340002293931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005291409997880692,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022463200002675876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005343829998309957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005208170000514656,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002145009998457681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005115280000609346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005268049999358482,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021153499983483925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005342579997886787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005327779999788618,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000223850999645947,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000507113999901776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005382449999160599,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021417500011011725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005038919998696656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005213139997977123,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022054999999454594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005100180001136323,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000521448000199598,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022002200012138928,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
            "lineno": 570,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005190679999032,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043064999999842257,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020862099972873693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
            "lineno": 575,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005308079998940229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004774059998453595,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021265900022626738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
            "lineno": 354,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005270250003377441,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006700760000057926,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021284500007823226,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
            "lineno": 521,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005052970000178902,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046552399999200134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021924899965597433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004988079999748152,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007128160000320349,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021958499974061851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
            "lineno": 405,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005326020000211429,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005644140001095366,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020779399983439362,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
            "lineno": 385,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005102750001242384,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005484319999595755,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021242399998300243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
            "lineno": 365,
            "outcome": "passed",
            "setup": {
                "duration": 0.000502656000207935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00054679999993823,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021325299985619495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
            "lineno": 425,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007043710002108128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005376419999265636,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022112399983598152,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
            "lineno": 505,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007024770002317382,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004569319999063737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021422300005724537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
            "lineno": 445,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004988820001017302,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005436784000266925,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002266490000693011,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005040470000494679,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001145838999946136,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021674299978258205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
            "lineno": 525,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005122590000610217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048224199963442516,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002193559998886485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
            "lineno": 532,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005005259999961709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000505987999986246,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021298199999364442,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005127379999976256,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004917070000374224,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021406099995147088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
            "lineno": 544,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005079490001662634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025091699999393313,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022467899998446228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
            "lineno": 509,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005346970001482987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004812550000679039,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/as_dtype_test.py', 510, 'Skipped: b/142725777')"
            },
            "teardown": {
                "duration": 0.0002256640000268817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005106359999444976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012780870001734002,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021981100007906207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005102590002934448,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000435928000115382,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013626530003421067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006367050000335439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026229758999761543,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024368000003960333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047901400012051454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005542439998862392,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002698899997994886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005834369999320188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027375919999030884,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019853699996019714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004614749996108003,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00474716200005787,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002154779999727907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004687989999183628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0020817579998038127,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002013120001720381,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045518799970523105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0021687290000045323,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020782999990842654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004723770002783567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019908180001948494,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002241140000478481,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046058999987508287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004053689999636845,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00037258299971654196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
            "lineno": 88,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005678530001205218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14737852700000076,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000291316000129882,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
            "lineno": 51,
            "outcome": "passed",
            "setup": {
                "duration": 0.000587633000122878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12573944399991888,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028019399996992433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.000609788000019762,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10731117000023005,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.317919,
                        "msecs": 317.9190158843994,
                        "relativeCreated": 95418.128490448,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002740099998845835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000588504000006651,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011298597999939375,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023979400020834873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005714519998036849,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012593806000040786,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.4441578,
                        "msecs": 444.15783882141113,
                        "relativeCreated": 95544.36731338501,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002661490002537903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005374900001697824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016007646000161913,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020599100025719963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004885990001639584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007975827999871399,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019980600018243422,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004923659998894436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005884500001229753,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000210548000268318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047184600043692626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006819914000061544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004354920001787832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
            "lineno": 184,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005615540003418573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12856353000006493,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029390400004558614,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006192620003275806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10263093599996864,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002863629997591488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
            "lineno": 144,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006130399997346103,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09035851899989211,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.7302437,
                        "msecs": 730.2436828613281,
                        "relativeCreated": 95830.45315742493,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.7314918,
                        "msecs": 731.4918041229248,
                        "relativeCreated": 95831.70127868652,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.7319648,
                        "msecs": 731.9648265838623,
                        "relativeCreated": 95832.17430114746,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00027373400007491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005992219998915971,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10984440999982326,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002751719998741464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006093399997553206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013544574999741599,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.9314854,
                        "msecs": 931.4854145050049,
                        "relativeCreated": 96031.6948890686,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1684002069.9320557,
                        "msecs": 932.0557117462158,
                        "relativeCreated": 96032.26518630981,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00026077499978782726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005673240002579405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01626872099996035,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023699999974269303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005712359998142347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006360460001815227,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00023218199976327014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
            "lineno": 197,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005314199997883406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007200689999990573,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00047185300036289846,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006817139997110644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17590108900003543,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002070.0959046,
                        "msecs": 95.90458869934082,
                        "relativeCreated": 96196.11406326294,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002884229998016963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006571249996341066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06470822099981888,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002852459997484402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
            "lineno": 161,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006139039996924112,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.052394788000128756,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002403210000920808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
            "lineno": 172,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005712289998882625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12162943400016957,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 189,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 342,
                        "message": "in compute_gradient"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 285,
                        "message": "in _compute_gradient_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 110,
                        "message": "in decorated_eager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 184,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1003,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2001,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testGradients>\n\n    def testGradients(self):\n      t = [dtypes.float32, dtypes.float64, dtypes.complex64, dtypes.complex128]\n      for src_t in t:\n        for dst_t in t:\n          with self.cached_session():\n            x = constant_op.constant(1.0, src_t)\n    \n            def cast(x, dst_t=dst_t):\n              x = array_ops.identity(x)\n              timer = tensorflow_op_timer()\n              with timer:\n                x = math_ops.cast(x, dst_t)\n                timer.gen.send(x)\n              return x\n    \n            err = gradient_checker_v2.max_error(\n>               *gradient_checker_v2.compute_gradient(cast, [x]))\n\nsrc/tensorflow_tests_reduced/cast_test.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:342: in compute_gradient\n    return _compute_gradient_list(f, x, delta)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:285: in _compute_gradient_list\n    y = f_temp(*xs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:110: in decorated_eager\n    return f(*map(ops.convert_to_tensor, xs_data))\nsrc/tensorflow_tests_reduced/cast_test.py:184: in cast\n    x = math_ops.cast(x, dst_t)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1003: in cast\n    x = gen_math_ops.cast(x, base_type, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2001: in cast\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036049800019100076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006617050003114855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015050292000069021,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024757500023042667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005858469999111549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007292058000075485,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023237899995365296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
            "lineno": 158,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005513050000445219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024807939999845985,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3490,
                    "message": "AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 160,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 157,
                        "message": "in _OpError"
                    },
                    {
                        "path": "/usr/lib/python3.8/contextlib.py",
                        "lineno": 131,
                        "message": "in __exit__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3490,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n>       yield\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nx = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), dtype = tf.string, err = 'Cast.*int.*string.*'\n\n    def _OpError(self, x, dtype, err):\n      with self.assertRaisesOpError(err):\n        timer = tensorflow_op_timer()\n        with timer:\n>         test = math_ops.cast(x, dtype)\n\nsrc/tensorflow_tests_reduced/cast_test.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string), kwargs = {}\n\n    def error_handler(*args, **kwargs):\n      try:\n        if not is_traceback_filtering_enabled():\n>         return fn(*args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string), kwargs = {}, result = NotImplemented\n\n    @traceback_utils.filter_traceback\n    def op_dispatch_handler(*args, **kwargs):\n      \"\"\"Call `dispatch_target`, peforming dispatch when appropriate.\"\"\"\n    \n      # Type-based dispatch system (dispatch v2):\n      if api_dispatcher is not None:\n        if iterable_params is not None:\n          args, kwargs = replace_iterable_params(args, kwargs, iterable_params)\n        result = api_dispatcher.Dispatch(args, kwargs)\n        if result is not NotImplemented:\n          return result\n    \n      # Fallback dispatch system (dispatch v1):\n      try:\n>       return dispatch_target(*args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>, dtype = tf.string, name = None\n\n    @tf_export(\"cast\", \"dtypes.cast\")\n    @dispatch.register_unary_elementwise_api\n    @dispatch.add_dispatch_support\n    def cast(x, dtype, name=None):\n      \"\"\"Casts a tensor to a new type.\n    \n      The operation casts `x` (in case of `Tensor`) or `x.values`\n      (in case of `SparseTensor` or `IndexedSlices`) to `dtype`.\n    \n      For example:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      Notice `tf.cast` has an alias `tf.dtypes.cast`:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.dtypes.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      The operation supports data types (for `x` and `dtype`) of\n      `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`, `int64`,\n      `float16`, `float32`, `float64`, `complex64`, `complex128`, `bfloat16`.\n      In case of casting from complex types (`complex64`, `complex128`) to real\n      types, only the real part of `x` is returned. In case of casting from real\n      types to complex types (`complex64`, `complex128`), the imaginary part of the\n      returned value is set to `0`. The handling of complex types here matches the\n      behavior of numpy.\n    \n      Note casting nan and inf values to integral types has undefined behavior.\n    \n      Args:\n        x: A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type. It could\n          be `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`,\n          `int64`, `float16`, `float32`, `float64`, `complex64`, `complex128`,\n          `bfloat16`.\n        dtype: The destination type. The list of supported dtypes is the same as\n          `x`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` or `SparseTensor` or `IndexedSlices` with same shape as `x` and\n          same type as `dtype`.\n    \n      Raises:\n        TypeError: If `x` cannot be cast to the `dtype`.\n      \"\"\"\n      base_type = dtypes.as_dtype(dtype).base_dtype\n      if isinstance(x,\n                    (ops.Tensor, _resource_variable_type)) and base_type == x.dtype:\n        return x\n      with ops.name_scope(name, \"Cast\", [x]) as name:\n        if isinstance(x, sparse_tensor.SparseTensor):\n          values_cast = cast(x.values, base_type, name=name)\n          x = sparse_tensor.SparseTensor(x.indices, values_cast, x.dense_shape)\n        elif isinstance(x, indexed_slices.IndexedSlices):\n          values_cast = cast(x.values, base_type, name=name)\n          x = indexed_slices.IndexedSlices(values_cast, x.indices, x.dense_shape)\n        else:\n          # TODO(josh11b): If x is not already a Tensor, we could return\n          # ops.convert_to_tensor(x, dtype=dtype, ...)  here, but that\n          # allows some conversions that cast() can't do, e.g. casting numbers to\n          # strings.\n          x = ops.convert_to_tensor(x, name=\"x\")\n          if x.dtype != base_type:\n>           x = gen_math_ops.cast(x, base_type, name=name)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1003: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>, DstT = tf.string, Truncate = False\nname = None\n\n    def cast(x, DstT, Truncate=False, name=None):\n      r\"\"\"Cast x of type SrcT to y of DstT.\n    \n      Args:\n        x: A `Tensor`.\n        DstT: A `tf.DType`.\n        Truncate: An optional `bool`. Defaults to `False`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` of type `DstT`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      tld = _ctx._thread_local_data\n      if tld.is_eager:\n        try:\n          _result = pywrap_tfe.TFE_Py_FastPathExecute(\n            _ctx, \"Cast\", name, x, \"DstT\", DstT, \"Truncate\", Truncate)\n          return _result\n        except _core._NotOkStatusException as e:\n>         _ops.raise_from_not_ok_status(e, name)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2001: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\n\n    def testNotImplemented(self):\n>     self._OpError(np.arange(0, 10), dtypes.string, \"Cast.*int.*string.*\")\n\nsrc/tensorflow_tests_reduced/cast_test.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/cast_test.py:157: in _OpError\n    self.evaluate(math_ops.cast(x, dtype))\n/usr/lib/python3.8/contextlib.py:131: in __exit__\n    self.gen.throw(type, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n        yield\n        self.fail(exception_type.__name__ + \" not raised\")\n      except Exception as e:  # pylint: disable=broad-except\n        if not isinstance(e, exception_type) or not predicate(e):\n>         raise AssertionError(\"Exception of type %s: %s\" %\n                               (str(type(e)), str(e)))\nE         AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3490: AssertionError"
            },
            "teardown": {
                "duration": 0.00037944999985484174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006482580001829774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6650417190003282,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002934200001618592,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006525529997816193,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006482526000127109,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021481299972947454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.000583070000175212,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13025344199968458,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002599990002636332,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005858629997419484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001935730999775842,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004855259999203554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005624740001621831,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08653447899996536,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003124029999526101,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007178050000220537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007142529998418468,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00035093599990432267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.000691880999966088,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.249900663000062,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029661999997188104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006473729999925126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002298121999956493,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000301507000131096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006204499995874357,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.751834262000102,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002075.8638835,
                        "msecs": 863.8834953308105,
                        "relativeCreated": 101964.09296989441,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002075.864136,
                        "msecs": 864.1359806060791,
                        "relativeCreated": 101964.34545516968,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0005630340001516743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
            "lineno": 77,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010544540000410052,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.364189903999886,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005857239998476871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.001052484999945591,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012370060003377148,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003663029997369449,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
            "lineno": 1727,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006549830000039947,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00489891200004422,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ConcatV2]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1732,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/concat_test.py",
                        "lineno": 44,
                        "message": "in test_concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 1232,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 875,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 1821,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 1262,
                        "message": "in concat_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.concat_test.TensorArrayOpsTest testMethod=test_concat>, args = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if not tf2.enabled():\n        self.skipTest(\"Test is only compatible with v2\")\n    \n>     return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/concat_test.py:44: in test_concat\n    result = values.concat()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py:1232: in concat\n    return self._implementation.concat(name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py:875: in concat\n    return array_ops.concat(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:1821: in concat\n    return gen_array_ops.concat_v2(values=values, axis=axis, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:1262: in concat_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ConcatV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004004190000159724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000754245000280207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015298899998015258,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00032472199973199167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006558469999617955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006457700001192279,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020832000018344843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005131880002409162,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005089129999760189,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002334030000383791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004915810000056808,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004813199998352502,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021274999971865327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004903079998257454,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004720530000668077,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002100729998346651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005543369998122216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046075000000200816,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020617799964384176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004951890000484127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006549499998982355,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021671500007869327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005106210001031286,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005002729999432631,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002057320002677443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004968350003764499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047631400002501323,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000205048999760038,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048511599970879615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004698149996329448,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002074169997285935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005105839995849237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004712850000032631,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021188699975027703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006519520002257195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004703489998973964,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021062700034235604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005274820000522595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046597699974881834,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022745600017515244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005003309997846372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004611700001078134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021521200005736318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005035350000071048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046075399995970656,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020697500031019445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005004159997952229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004674150000028021,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020821099997192505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007305880003514176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004704170000877639,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021250700001473888,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004944180000165943,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047424000013052137,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021086500009914744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004902609998680418,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004720319998341438,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020537199998216238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048415799983558827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048200399987763376,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020902000005662558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.000495508999847516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004656260002775525,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021304900019458728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048470299998371047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048244999970847857,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021639799979311647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005162809998182638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17779470799996488,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031039799978316296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006218360003913403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19314518600003794,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031907099992167787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006932960000085586,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10225653999987117,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034118100029445486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007022830000096292,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007071859999996377,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0010274219998791523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
            "lineno": 317,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007426449997183227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04775023699994563,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002467850003995409,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
            "lineno": 66,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005617329998131027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24611713699960092,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 83,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeSame>\n\n    def testConv2DTransposeSame(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 2, 2, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 12, 8, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"SAME\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([ 2, 12,  8,  2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dty...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 2, 2, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003924450002159574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
            "lineno": 303,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006400050001502677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4064485359999708,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031289499975173385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
            "lineno": 22,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006330750002234709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1036641879995841,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 39,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeSingleStride>\n\n    def testConv2DTransposeSingleStride(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 1, 1, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 6, 4, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"SAME\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([2, 6, 4, 2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dtype=i...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 1, 1, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004250599999977567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
            "lineno": 105,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006485799999609299,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1839493800002856,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 122,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeValid>\n\n    def testConv2DTransposeValid(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 2, 2, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 13, 9, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"VALID\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([ 2, 13,  9,  2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dty...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 2, 2, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00041615500003899797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.000696419000178139,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.77923774699957,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "lineno": 180,
                    "message": "AssertionError: 0.99609375 not less than 0.0006"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 180,
                        "message": "in testGradient"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testGradient>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:180: in testGradient\n    self.assertLess(err, err_tolerance)\nE   AssertionError: 0.99609375 not less than 0.0006"
            },
            "teardown": {
                "duration": 0.00044720300002154545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007264020000548044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005648619999192306,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004004989996246877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
            "lineno": 268,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006001380002089718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6122304669997902,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17]),)\nnot close lhs = [0.18518519 0.22222222 0.25925926 0.40740741 0.5        0.59259259\n 0.62962963 0.77777778 0.92592593 0.85185185 1.05555556 1.25925926\n 1.07407407 1.33333333 1.59259259 1.2962963  1.61111111 1.92592593]\nnot close rhs = [0.18558311 0.22287369 0.25994682 0.4079132  0.50086975 0.59360504\n 0.6302452  0.778862   0.92726517 0.85235596 1.056427   1.2602692\n 1.0733871  1.3331146  1.5926285  1.2974548  1.6132812  1.928894  ]\nnot close dif = [3.97924624e-04 6.51467744e-04 6.87563120e-04 5.05798008e-04\n 8.69750977e-04 1.01245150e-03 6.15578740e-04 1.08421951e-03\n 1.33923724e-03 5.04107031e-04 8.71441953e-04 1.00990504e-03\n 6.86924004e-04 2.18705977e-04 3.58890039e-05 1.15853398e-03\n 2.17014000e-03 2.96811297e-03]\nnot close tol = [1.1855831e-06 1.2228737e-06 1.2599469e-06 1.4079133e-06 1.5008698e-06\n 1.5936050e-06 1.6302452e-06 1.7788620e-06 1.9272652e-06 1.8523560e-06\n 2.0564271e-06 2.2602692e-06 2.0733871e-06 2.3331145e-06 2.5926283e-06\n 2.2974548e-06 2.6132811e-06 2.9288940e-06]\ndtype = float64, shape = (18,)\nMismatched elements: 18 / 18 (100%)\nMax absolute difference: 0.00296811\nMax relative difference: 0.00292304\n x: array([0.185185, 0.222222, 0.259259, 0.407407, 0.5     , 0.592593,\n       0.62963 , 0.777778, 0.925926, 0.851852, 1.055556, 1.259259,\n       1.074074, 1.333333, 1.592593, 1.296296, 1.611111, 1.925926])\n y: array([0.185583, 0.222874, 0.259947, 0.407913, 0.50087 , 0.593605,\n       0.630245, 0.778862, 0.927265, 0.852356, 1.056427, 1.260269,\n       1.073387, 1.333115, 1.592628, 1.297455, 1.613281, 1.928894],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 277,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D1x1x1Filter>\n\n    def testConv3D1x1x1Filter(self):\n      expected_output = [\n          0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n          0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n          1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n      ]\n    \n      # These are equivalent to the Conv2D1x1 case.\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 2, 3, 1, 3],\n          filter_in_sizes=[1, 1, 1, 3, 3],\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D1x1x1Filter>\na = array([0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5       ,\n       0.59259259, 0.62962963, 0.77777778, 0.925925...5185185,\n       1.05555556, 1.25925926, 1.07407407, 1.33333333, 1.59259259,\n       1.2962963 , 1.61111111, 1.92592593])\nb = array([0.18558311, 0.22287369, 0.25994682, 0.4079132 , 0.50086975,\n       0.59360504, 0.6302452 , 0.778862  , 0.927265... 1.056427  , 1.2602692 , 1.0733871 , 1.3331146 , 1.5926285 ,\n       1.2974548 , 1.6132812 , 1.928894  ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17]),)\nE       not close lhs = [0.18518519 0.22222222 0.25925926 0.40740741 0.5        0.59259259\nE        0.62962963 0.77777778 0.92592593 0.85185185 1.05555556 1.25925926\nE        1.07407407 1.33333333 1.59259259 1.2962963  1.61111111 1.92592593]\nE       not close rhs = [0.18558311 0.22287369 0.25994682 0.4079132  0.50086975 0.59360504\nE        0.6302452  0.778862   0.92726517 0.85235596 1.056427   1.2602692\nE        1.0733871  1.3331146  1.5926285  1.2974548  1.6132812  1.928894  ]\nE       not close dif = [3.97924624e-04 6.51467744e-04 6.87563120e-04 5.05798008e-04\nE        8.69750977e-04 1.01245150e-03 6.15578740e-04 1.08421951e-03\nE        1.33923724e-03 5.04107031e-04 8.71441953e-04 1.00990504e-03\nE        6.86924004e-04 2.18705977e-04 3.58890039e-05 1.15853398e-03\nE        2.17014000e-03 2.96811297e-03]\nE       not close tol = [1.1855831e-06 1.2228737e-06 1.2599469e-06 1.4079133e-06 1.5008698e-06\nE        1.5936050e-06 1.6302452e-06 1.7788620e-06 1.9272652e-06 1.8523560e-06\nE        2.0564271e-06 2.2602692e-06 2.0733871e-06 2.3331145e-06 2.5926283e-06\nE        2.2974548e-06 2.6132811e-06 2.9288940e-06]\nE       dtype = float64, shape = (18,)\nE       Mismatched elements: 18 / 18 (100%)\nE       Max absolute difference: 0.00296811\nE       Max relative difference: 0.00292304\nE        x: array([0.185185, 0.222222, 0.259259, 0.407407, 0.5     , 0.592593,\nE              0.62963 , 0.777778, 0.925926, 0.851852, 1.055556, 1.259259,\nE              1.074074, 1.333333, 1.592593, 1.296296, 1.611111, 1.925926])\nE        y: array([0.185583, 0.222874, 0.259947, 0.407913, 0.50087 , 0.593605,\nE              0.630245, 0.778862, 0.927265, 0.852356, 1.056427, 1.260269,\nE              1.073387, 1.333115, 1.592628, 1.297455, 1.613281, 1.928894],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00037257499980114517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
            "lineno": 296,
            "outcome": "failed",
            "setup": {
                "duration": 0.000631105000138632,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8456243130003713,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  4.2650463   4.35763889  4.45023148\n  6.73032407  6.89236111  7.05439815  7.22337963  7.39930556  7.57523148\n  9.68865741  9.93402778 10.17939815 10.18171296 10.44097222 10.70023148]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  4.269069   4.3580117  4.452488\n  6.734431   6.89104    7.055836   7.22305    7.393152   7.5719604\n  9.693895   9.931797  10.181059  10.180401  10.431629  10.694742 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00402289 0.00037283 0.00225647\n 0.00410672 0.00132126 0.00143805 0.00032951 0.00615332 0.00327103\n 0.00523793 0.00223075 0.00166073 0.00131211 0.00934304 0.00548928]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 5.2690689e-06 5.3580115e-06\n 5.4524880e-06 7.7344312e-06 7.8910398e-06 8.0558366e-06 8.2230499e-06\n 8.3931527e-06 8.5719603e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05\n 1.1180401e-05 1.1431630e-05 1.1694742e-05]\ndtype = float64, shape = (18,)\nMismatched elements: 18 / 18 (100%)\nMax absolute difference: 0.00934304\nMax relative difference: 0.00094234\n x: array([ 3.771991,  3.850694,  3.929398,  4.265046,  4.357639,  4.450231,\n        6.730324,  6.892361,  7.054398,  7.22338 ,  7.399306,  7.575231,\n        9.688657,  9.934028, 10.179398, 10.181713, 10.440972, 10.700231])\n y: array([ 3.772795,  3.848132,  3.928471,  4.269069,  4.358012,  4.452488,\n        6.734431,  6.89104 ,  7.055836,  7.22305 ,  7.393152,  7.57196 ,\n        9.693895,  9.931797, 10.181059, 10.180401, 10.431629, 10.694742],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 305,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2Filter>\n\n    def testConv3D2x2x2Filter(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 4.2650463, 4.35763889, 4.45023148,\n          6.73032407, 6.89236111, 7.05439815, 7.22337963, 7.39930556, 7.57523148,\n          9.68865741, 9.93402778, 10.17939815, 10.18171296, 10.44097222,\n          10.70023148\n      ]\n      # expected_shape = [1, 3, 1, 2, 5]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],  # b, z, y, x, fin\n          filter_in_sizes=[2, 2, 2, 3, 3],  # z, y, x, fin, fout\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:305: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2Filter>\na = array([ 3.77199074,  3.85069444,  3.92939815,  4.2650463 ,  4.35763889,\n        4.45023148,  6.73032407,  6.89236111, ...\n        7.39930556,  7.57523148,  9.68865741,  9.93402778, 10.17939815,\n       10.18171296, 10.44097222, 10.70023148])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  4.269069 ,  4.3580117,\n        4.452488 ,  6.734431 ,  6.89104  ,  7.05583...  7.393152 ,  7.5719604,  9.693895 ,  9.931797 , 10.181059 ,\n       10.180401 , 10.431629 , 10.694742 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  4.2650463   4.35763889  4.45023148\nE         6.73032407  6.89236111  7.05439815  7.22337963  7.39930556  7.57523148\nE         9.68865741  9.93402778 10.17939815 10.18171296 10.44097222 10.70023148]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  4.269069   4.3580117  4.452488\nE         6.734431   6.89104    7.055836   7.22305    7.393152   7.5719604\nE         9.693895   9.931797  10.181059  10.180401  10.431629  10.694742 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00402289 0.00037283 0.00225647\nE        0.00410672 0.00132126 0.00143805 0.00032951 0.00615332 0.00327103\nE        0.00523793 0.00223075 0.00166073 0.00131211 0.00934304 0.00548928]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 5.2690689e-06 5.3580115e-06\nE        5.4524880e-06 7.7344312e-06 7.8910398e-06 8.0558366e-06 8.2230499e-06\nE        8.3931527e-06 8.5719603e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05\nE        1.1180401e-05 1.1431630e-05 1.1694742e-05]\nE       dtype = float64, shape = (18,)\nE       Mismatched elements: 18 / 18 (100%)\nE       Max absolute difference: 0.00934304\nE       Max relative difference: 0.00094234\nE        x: array([ 3.771991,  3.850694,  3.929398,  4.265046,  4.357639,  4.450231,\nE               6.730324,  6.892361,  7.054398,  7.22338 ,  7.399306,  7.575231,\nE               9.688657,  9.934028, 10.179398, 10.181713, 10.440972, 10.700231])\nE        y: array([ 3.772795,  3.848132,  3.928471,  4.269069,  4.358012,  4.452488,\nE               6.734431,  6.89104 ,  7.055836,  7.22305 ,  7.393152,  7.57196 ,\nE               9.693895,  9.931797, 10.181059, 10.180401, 10.431629, 10.694742],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.000388795000162645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
            "lineno": 332,
            "outcome": "failed",
            "setup": {
                "duration": 0.000670962000185682,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8220430510000369,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  9.68865741  9.93402778 10.17939815]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  9.693895   9.931797  10.181059 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00523793 0.00223075 0.00166073]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 1.0693896e-05 1.0931797e-05\n 1.1181060e-05]\ndtype = float64, shape = (6,)\nMismatched elements: 6 / 6 (100%)\nMax absolute difference: 0.00523793\nMax relative difference: 0.00066586\n x: array([ 3.771991,  3.850694,  3.929398,  9.688657,  9.934028, 10.179398])\n y: array([ 3.772795,  3.848132,  3.928471,  9.693895,  9.931797, 10.181059],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 337,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2>\n\n    def testConv3D2x2x2FilterStride2(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 9.68865741, 9.93402778, 10.17939815\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2>\na = array([ 3.77199074,  3.85069444,  3.92939815,  9.68865741,  9.93402778,\n       10.17939815])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  9.693895 ,  9.931797 ,\n       10.181059 ], dtype=float32), rtol = 1e-06\natol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  9.68865741  9.93402778 10.17939815]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  9.693895   9.931797  10.181059 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00523793 0.00223075 0.00166073]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 1.0693896e-05 1.0931797e-05\nE        1.1181060e-05]\nE       dtype = float64, shape = (6,)\nE       Mismatched elements: 6 / 6 (100%)\nE       Max absolute difference: 0.00523793\nE       Max relative difference: 0.00066586\nE        x: array([ 3.771991,  3.850694,  3.929398,  9.688657,  9.934028, 10.179398])\nE        y: array([ 3.772795,  3.848132,  3.928471,  9.693895,  9.931797, 10.181059],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0005276980000417097,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
            "lineno": 359,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007499220000681817,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8479100049999033,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  2.0162037   2.06597222  2.11574074\n  9.68865741  9.93402778 10.17939815  4.59953704  4.73263889  4.86574074]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  2.018177   2.0660875  2.1168408\n  9.693895   9.931797  10.181059   4.5991755  4.7283955  4.863406 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00197333 0.00011526 0.0011001\n 0.00523793 0.00223075 0.00166073 0.00036159 0.00424343 0.00233456]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 3.0181768e-06 3.0660876e-06\n 3.1168406e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05 5.5991754e-06\n 5.7283955e-06 5.8634059e-06]\ndtype = float64, shape = (12,)\nMismatched elements: 12 / 12 (100%)\nMax absolute difference: 0.00523793\nMax relative difference: 0.00097778\n x: array([ 3.771991,  3.850694,  3.929398,  2.016204,  2.065972,  2.115741,\n        9.688657,  9.934028, 10.179398,  4.599537,  4.732639,  4.865741])\n y: array([ 3.772795,  3.848132,  3.928471,  2.018177,  2.066087,  2.116841,\n        9.693895,  9.931797, 10.181059,  4.599175,  4.728395,  4.863406],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 365,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2Same>\n\n    def testConv3D2x2x2FilterStride2Same(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 2.0162037, 2.06597222, 2.11574074,\n          9.68865741, 9.93402778, 10.17939815, 4.59953704, 4.73263889, 4.86574074\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2Same>\na = array([ 3.77199074,  3.85069444,  3.92939815,  2.0162037 ,  2.06597222,\n        2.11574074,  9.68865741,  9.93402778, 10.17939815,  4.59953704,\n        4.73263889,  4.86574074])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  2.018177 ,  2.0660875,\n        2.1168408,  9.693895 ,  9.931797 , 10.181059 ,  4.5991755,\n        4.7283955,  4.863406 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  2.0162037   2.06597222  2.11574074\nE         9.68865741  9.93402778 10.17939815  4.59953704  4.73263889  4.86574074]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  2.018177   2.0660875  2.1168408\nE         9.693895   9.931797  10.181059   4.5991755  4.7283955  4.863406 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00197333 0.00011526 0.0011001\nE        0.00523793 0.00223075 0.00166073 0.00036159 0.00424343 0.00233456]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 3.0181768e-06 3.0660876e-06\nE        3.1168406e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05 5.5991754e-06\nE        5.7283955e-06 5.8634059e-06]\nE       dtype = float64, shape = (12,)\nE       Mismatched elements: 12 / 12 (100%)\nE       Max absolute difference: 0.00523793\nE       Max relative difference: 0.00097778\nE        x: array([ 3.771991,  3.850694,  3.929398,  2.016204,  2.065972,  2.115741,\nE               9.688657,  9.934028, 10.179398,  4.599537,  4.732639,  4.865741])\nE        y: array([ 3.772795,  3.848132,  3.928471,  2.018177,  2.066087,  2.116841,\nE               9.693895,  9.931797, 10.181059,  4.599175,  4.728395,  4.863406],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003743219999705616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006191279999256949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3192647869996108,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032134699995367555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
            "lineno": 343,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007059829999889189,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.099440383000001,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35]),)\nnot close lhs = [1.51140873 1.57167659 1.63194444 1.56349206 1.62673611 1.68998016\n 1.6155754  1.68179563 1.74801587 1.9280754  2.01215278 2.09623016\n 1.98015873 2.0672123  2.15426587 2.03224206 2.12227183 2.21230159\n 4.4280754  4.65500992 4.88194444 4.48015873 4.71006944 4.93998016\n 4.53224206 4.76512897 4.99801587 4.84474206 5.09548611 5.34623016\n 4.8968254  5.15054563 5.40426587 4.94890873 5.20560516 5.46230159]\nnot close rhs = [1.51026   1.5717468 1.631105  1.5631132 1.62763   1.6899709 1.6161865\n 1.6837463 1.7490752 1.9281542 2.0137792 2.0968578 1.9800482 2.0686655\n 2.1546855 2.0317478 2.1234112 2.2124262 4.4270706 4.657242  4.882351\n 4.475237  4.70837   4.936392  4.5309963 4.767193  4.998232  4.8397083\n 5.0939293 5.3426723 4.8954678 5.152752  5.4045124 4.948618  5.2089806\n 5.46377  ]\nnot close dif = [1.14874408e-03 7.02361719e-05 8.39493864e-04 3.78847415e-04\n 8.93885346e-04 9.30905548e-06 6.11099596e-04 1.95070789e-03\n 1.05930433e-03 7.88301178e-05 1.62638336e-03 6.27626179e-04\n 1.10550374e-04 1.45320446e-03 4.19627284e-04 4.94242007e-04\n 1.13934859e-03 1.24595608e-04 1.00478232e-03 2.23190129e-03\n 4.06481631e-04 4.92183730e-03 1.69923126e-03 3.58832956e-03\n 1.24573737e-03 2.06387058e-03 2.16017817e-04 5.03373175e-03\n 1.55681923e-03 3.55781198e-03 1.35764182e-03 2.20629261e-03\n 2.46535396e-04 2.90794819e-04 3.37540030e-03 1.46832272e-03]\nnot close tol = [2.5102599e-06 2.5717468e-06 2.6311050e-06 2.5631132e-06 2.6276300e-06\n 2.6899709e-06 2.6161865e-06 2.6837463e-06 2.7490751e-06 2.9281541e-06\n 3.0137790e-06 3.0968577e-06 2.9800481e-06 3.0686656e-06 3.1546856e-06\n 3.0317478e-06 3.1234113e-06 3.2124262e-06 5.4270704e-06 5.6572417e-06\n 5.8823507e-06 5.4752368e-06 5.7083703e-06 5.9363915e-06 5.5309961e-06\n 5.7671928e-06 5.9982317e-06 5.8397081e-06 6.0939292e-06 6.3426724e-06\n 5.8954674e-06 6.1527517e-06 6.4045121e-06 5.9486179e-06 6.2089803e-06\n 6.4637698e-06]\ndtype = float64, shape = (36,)\nMismatched elements: 36 / 36 (100%)\nMax absolute difference: 0.00503373\nMax relative difference: 0.00115855\n x: array([1.511409, 1.571677, 1.631944, 1.563492, 1.626736, 1.68998 ,\n       1.615575, 1.681796, 1.748016, 1.928075, 2.012153, 2.09623 ,\n       1.980159, 2.067212, 2.154266, 2.032242, 2.122272, 2.212302,...\n y: array([1.51026 , 1.571747, 1.631105, 1.563113, 1.62763 , 1.689971,\n       1.616186, 1.683746, 1.749075, 1.928154, 2.013779, 2.096858,\n       1.980048, 2.068666, 2.154685, 2.031748, 2.123411, 2.212426,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 353,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStride3>\n\n    def testConv3DStride3(self):\n      expected_output = [\n          1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611, 1.68998016,\n          1.6155754, 1.68179563, 1.74801587, 1.9280754, 2.01215278, 2.09623016,\n          1.98015873, 2.0672123, 2.15426587, 2.03224206, 2.12227183, 2.21230159,\n          4.4280754, 4.65500992, 4.88194444, 4.48015873, 4.71006944, 4.93998016,\n          4.53224206, 4.76512897, 4.99801587, 4.84474206, 5.09548611, 5.34623016,\n          4.8968254, 5.15054563, 5.40426587, 4.94890873, 5.20560516, 5.46230159\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 6, 7, 8, 2],\n          filter_in_sizes=[3, 2, 1, 2, 3],\n          stride=3,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:353: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStride3>\na = array([1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611,\n       1.68998016, 1.6155754 , 1.68179563, 1.748015...4474206, 5.09548611, 5.34623016,\n       4.8968254 , 5.15054563, 5.40426587, 4.94890873, 5.20560516,\n       5.46230159])\nb = array([1.51026  , 1.5717468, 1.631105 , 1.5631132, 1.62763  , 1.6899709,\n       1.6161865, 1.6837463, 1.7490752, 1.928...3, 5.0939293, 5.3426723,\n       4.8954678, 5.152752 , 5.4045124, 4.948618 , 5.2089806, 5.46377  ],\n      dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\nE              34, 35]),)\nE       not close lhs = [1.51140873 1.57167659 1.63194444 1.56349206 1.62673611 1.68998016\nE        1.6155754  1.68179563 1.74801587 1.9280754  2.01215278 2.09623016\nE        1.98015873 2.0672123  2.15426587 2.03224206 2.12227183 2.21230159\nE        4.4280754  4.65500992 4.88194444 4.48015873 4.71006944 4.93998016\nE        4.53224206 4.76512897 4.99801587 4.84474206 5.09548611 5.34623016\nE        4.8968254  5.15054563 5.40426587 4.94890873 5.20560516 5.46230159]\nE       not close rhs = [1.51026   1.5717468 1.631105  1.5631132 1.62763   1.6899709 1.6161865\nE        1.6837463 1.7490752 1.9281542 2.0137792 2.0968578 1.9800482 2.0686655\nE        2.1546855 2.0317478 2.1234112 2.2124262 4.4270706 4.657242  4.882351\nE        4.475237  4.70837   4.936392  4.5309963 4.767193  4.998232  4.8397083\nE        5.0939293 5.3426723 4.8954678 5.152752  5.4045124 4.948618  5.2089806\nE        5.46377  ]\nE       not close dif = [1.14874408e-03 7.02361719e-05 8.39493864e-04 3.78847415e-04\nE        8.93885346e-04 9.30905548e-06 6.11099596e-04 1.95070789e-03\nE        1.05930433e-03 7.88301178e-05 1.62638336e-03 6.27626179e-04\nE        1.10550374e-04 1.45320446e-03 4.19627284e-04 4.94242007e-04\nE        1.13934859e-03 1.24595608e-04 1.00478232e-03 2.23190129e-03\nE        4.06481631e-04 4.92183730e-03 1.69923126e-03 3.58832956e-03\nE        1.24573737e-03 2.06387058e-03 2.16017817e-04 5.03373175e-03\nE        1.55681923e-03 3.55781198e-03 1.35764182e-03 2.20629261e-03\nE        2.46535396e-04 2.90794819e-04 3.37540030e-03 1.46832272e-03]\nE       not close tol = [2.5102599e-06 2.5717468e-06 2.6311050e-06 2.5631132e-06 2.6276300e-06\nE        2.6899709e-06 2.6161865e-06 2.6837463e-06 2.7490751e-06 2.9281541e-06\nE        3.0137790e-06 3.0968577e-06 2.9800481e-06 3.0686656e-06 3.1546856e-06\nE        3.0317478e-06 3.1234113e-06 3.2124262e-06 5.4270704e-06 5.6572417e-06\nE        5.8823507e-06 5.4752368e-06 5.7083703e-06 5.9363915e-06 5.5309961e-06\nE        5.7671928e-06 5.9982317e-06 5.8397081e-06 6.0939292e-06 6.3426724e-06\nE        5.8954674e-06 6.1527517e-06 6.4045121e-06 5.9486179e-06 6.2089803e-06\nE        6.4637698e-06]\nE       dtype = float64, shape = (36,)\nE       Mismatched elements: 36 / 36 (100%)\nE       Max absolute difference: 0.00503373\nE       Max relative difference: 0.00115855\nE        x: array([1.511409, 1.571677, 1.631944, 1.563492, 1.626736, 1.68998 ,\nE              1.615575, 1.681796, 1.748016, 1.928075, 2.012153, 2.09623 ,\nE              1.980159, 2.067212, 2.154266, 2.032242, 2.122272, 2.212302,...\nE        y: array([1.51026 , 1.571747, 1.631105, 1.563113, 1.62763 , 1.689971,\nE              1.616186, 1.683746, 1.749075, 1.928154, 2.013779, 2.096858,\nE              1.980048, 2.068666, 2.154685, 2.031748, 2.123411, 2.212426,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00039718500011076685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
            "lineno": 311,
            "outcome": "failed",
            "setup": {
                "duration": 0.000616323000031116,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2962393630000406,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]),)\nnot close lhs = [0.06071429 0.08988095 0.10238095 0.11488095 0.12738095 0.13988095\n 0.08452381 0.26071429 0.35238095 0.36488095 0.37738095 0.38988095\n 0.40238095 0.23452381 0.46071429 0.61488095 0.62738095 0.63988095\n 0.65238095 0.66488095 0.38452381 1.12738095 1.48988095 1.50238095\n 1.51488095 1.52738095 1.53988095 0.88452381 1.32738095 1.75238095\n 1.76488095 1.77738095 1.78988095 1.80238095 1.03452381 1.52738095\n 2.01488095 2.02738095 2.03988095 2.05238095 2.06488095 1.18452381\n 2.19404762 2.88988095 2.90238095 2.91488095 2.92738095 2.93988095\n 1.68452381 2.39404762 3.15238095 3.16488095 3.17738095 3.18988095\n 3.20238095 1.83452381 2.59404762 3.41488095 3.42738095 3.43988095\n 3.45238095 3.46488095 1.98452381]\nnot close rhs = [0.06075615 0.08989057 0.10241169 0.11495757 0.12747324 0.14000964\n 0.08457255 0.26033306 0.35245085 0.36498642 0.37736034 0.38981485\n 0.4024315  0.23471117 0.46113014 0.6155443  0.6279192  0.63963985\n 0.65233994 0.66487503 0.38476753 1.1256828  1.4886723  1.5020218\n 1.5156975  1.5293732  1.5410957  0.8851776  1.3281059  1.755022\n 1.7686977  1.7813969  1.790514   1.8006134  1.032383   1.5276031\n 2.0168152  2.0285378  2.0409088  2.0539322  2.0676079  1.1867523\n 2.194107   2.8920593  2.903782   2.916153   2.9291763  2.942852\n 1.6869965  2.3919754  3.1518974  3.1655731  3.1792488  3.1909714\n 3.2033424  1.8355064  2.5930939  3.4143448  3.4254112  3.439087\n 3.4527626  3.4664383  1.9859734 ]\nnot close dif = [4.18569078e-05 9.61944847e-06 3.07373741e-05 7.66210297e-05\n 9.22851303e-05 1.28691647e-04 4.87436346e-05 3.81228782e-04\n 6.98976257e-05 1.05469678e-04 2.06060669e-05 6.60963318e-05\n 5.05380371e-05 1.87360197e-04 4.15852212e-04 6.63369153e-04\n 5.38247083e-04 2.41095569e-04 4.10146973e-05 5.91948242e-06\n 2.43722349e-04 1.69811919e-03 1.20869353e-03 3.59160449e-04\n 8.16529248e-04 1.99221895e-03 1.21478364e-03 6.53802305e-04\n 7.24976514e-04 2.64109895e-03 3.81678865e-03 4.01591584e-03\n 6.33042310e-04 1.76754668e-03 2.14084491e-03 2.22199414e-04\n 1.93423555e-03 1.15680024e-03 1.02786348e-03 1.55123994e-03\n 2.72692964e-03 2.22850934e-03 5.94356641e-05 2.17837617e-03\n 1.40094087e-03 1.27200410e-03 1.79538057e-03 2.97107026e-03\n 2.47264996e-03 2.07221717e-03 4.83519580e-04 6.92170117e-04\n 1.86785981e-03 1.09042451e-03 9.61487744e-04 9.82629209e-04\n 9.53747930e-04 5.36162402e-04 1.96972563e-03 7.94035938e-04\n 3.81653760e-04 1.55734346e-03 1.44954815e-03]\nnot close tol = [1.0607562e-06 1.0898906e-06 1.1024117e-06 1.1149575e-06 1.1274732e-06\n 1.1400097e-06 1.0845725e-06 1.2603331e-06 1.3524509e-06 1.3649865e-06\n 1.3773604e-06 1.3898149e-06 1.4024315e-06 1.2347111e-06 1.4611301e-06\n 1.6155443e-06 1.6279191e-06 1.6396398e-06 1.6523400e-06 1.6648751e-06\n 1.3847675e-06 2.1256828e-06 2.4886722e-06 2.5020217e-06 2.5156974e-06\n 2.5293732e-06 2.5410957e-06 1.8851777e-06 2.3281059e-06 2.7550220e-06\n 2.7686979e-06 2.7813969e-06 2.7905139e-06 2.8006134e-06 2.0323830e-06\n 2.5276031e-06 3.0168153e-06 3.0285378e-06 3.0409087e-06 3.0539322e-06\n 3.0676078e-06 2.1867522e-06 3.1941072e-06 3.8920593e-06 3.9037818e-06\n 3.9161528e-06 3.9291763e-06 3.9428519e-06 2.6869966e-06 3.3919755e-06\n 4.1518974e-06 4.1655730e-06 4.1792487e-06 4.1909711e-06 4.2033425e-06\n 2.8355064e-06 3.5930939e-06 4.4143449e-06 4.4254111e-06 4.4390868e-06\n 4.4527624e-06 4.4664384e-06 2.9859734e-06]\ndtype = float64, shape = (63,)\nMismatched elements: 63 / 63 (100%)\nMax absolute difference: 0.00401592\nMax relative difference: 0.00225436\n x: array([0.060714, 0.089881, 0.102381, 0.114881, 0.127381, 0.139881,\n       0.084524, 0.260714, 0.352381, 0.364881, 0.377381, 0.389881,\n       0.402381, 0.234524, 0.460714, 0.614881, 0.627381, 0.639881,...\n y: array([0.060756, 0.089891, 0.102412, 0.114958, 0.127473, 0.14001 ,\n       0.084573, 0.260333, 0.352451, 0.364986, 0.37736 , 0.389815,\n       0.402431, 0.234711, 0.46113 , 0.615544, 0.627919, 0.63964 ,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 326,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStrides>\n\n    def testConv3DStrides(self):\n      expected_output = [\n          0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095, 0.13988095,\n          0.08452381, 0.26071429, 0.35238095, 0.36488095, 0.37738095, 0.38988095,\n          0.40238095, 0.23452381, 0.46071429, 0.61488095, 0.62738095, 0.63988095,\n          0.65238095, 0.66488095, 0.38452381, 1.12738095, 1.48988095, 1.50238095,\n          1.51488095, 1.52738095, 1.53988095, 0.88452381, 1.32738095, 1.75238095,\n          1.76488095, 1.77738095, 1.78988095, 1.80238095, 1.03452381, 1.52738095,\n          2.01488095, 2.02738095, 2.03988095, 2.05238095, 2.06488095, 1.18452381,\n          2.19404762, 2.88988095, 2.90238095, 2.91488095, 2.92738095, 2.93988095,\n          1.68452381, 2.39404762, 3.15238095, 3.16488095, 3.17738095, 3.18988095,\n          3.20238095, 1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n          3.45238095, 3.46488095, 1.98452381\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 5, 8, 7, 1],\n          filter_in_sizes=[1, 2, 3, 1, 1],\n          stride=[2, 3, 1],  # different stride for each spatial dimension\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:326: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStrides>\na = array([0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095,\n       0.13988095, 0.08452381, 0.26071429, 0.352380...0238095,\n       1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n       3.45238095, 3.46488095, 1.98452381])\nb = array([0.06075615, 0.08989057, 0.10241169, 0.11495757, 0.12747324,\n       0.14000964, 0.08457255, 0.26033306, 0.352450... 1.8355064 , 2.5930939 , 3.4143448 , 3.4254112 , 3.439087  ,\n       3.4527626 , 3.4664383 , 1.9859734 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\nE              34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\nE              51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]),)\nE       not close lhs = [0.06071429 0.08988095 0.10238095 0.11488095 0.12738095 0.13988095\nE        0.08452381 0.26071429 0.35238095 0.36488095 0.37738095 0.38988095\nE        0.40238095 0.23452381 0.46071429 0.61488095 0.62738095 0.63988095\nE        0.65238095 0.66488095 0.38452381 1.12738095 1.48988095 1.50238095\nE        1.51488095 1.52738095 1.53988095 0.88452381 1.32738095 1.75238095\nE        1.76488095 1.77738095 1.78988095 1.80238095 1.03452381 1.52738095\nE        2.01488095 2.02738095 2.03988095 2.05238095 2.06488095 1.18452381\nE        2.19404762 2.88988095 2.90238095 2.91488095 2.92738095 2.93988095\nE        1.68452381 2.39404762 3.15238095 3.16488095 3.17738095 3.18988095\nE        3.20238095 1.83452381 2.59404762 3.41488095 3.42738095 3.43988095\nE        3.45238095 3.46488095 1.98452381]\nE       not close rhs = [0.06075615 0.08989057 0.10241169 0.11495757 0.12747324 0.14000964\nE        0.08457255 0.26033306 0.35245085 0.36498642 0.37736034 0.38981485\nE        0.4024315  0.23471117 0.46113014 0.6155443  0.6279192  0.63963985\nE        0.65233994 0.66487503 0.38476753 1.1256828  1.4886723  1.5020218\nE        1.5156975  1.5293732  1.5410957  0.8851776  1.3281059  1.755022\nE        1.7686977  1.7813969  1.790514   1.8006134  1.032383   1.5276031\nE        2.0168152  2.0285378  2.0409088  2.0539322  2.0676079  1.1867523\nE        2.194107   2.8920593  2.903782   2.916153   2.9291763  2.942852\nE        1.6869965  2.3919754  3.1518974  3.1655731  3.1792488  3.1909714\nE        3.2033424  1.8355064  2.5930939  3.4143448  3.4254112  3.439087\nE        3.4527626  3.4664383  1.9859734 ]\nE       not close dif = [4.18569078e-05 9.61944847e-06 3.07373741e-05 7.66210297e-05\nE        9.22851303e-05 1.28691647e-04 4.87436346e-05 3.81228782e-04\nE        6.98976257e-05 1.05469678e-04 2.06060669e-05 6.60963318e-05\nE        5.05380371e-05 1.87360197e-04 4.15852212e-04 6.63369153e-04\nE        5.38247083e-04 2.41095569e-04 4.10146973e-05 5.91948242e-06\nE        2.43722349e-04 1.69811919e-03 1.20869353e-03 3.59160449e-04\nE        8.16529248e-04 1.99221895e-03 1.21478364e-03 6.53802305e-04\nE        7.24976514e-04 2.64109895e-03 3.81678865e-03 4.01591584e-03\nE        6.33042310e-04 1.76754668e-03 2.14084491e-03 2.22199414e-04\nE        1.93423555e-03 1.15680024e-03 1.02786348e-03 1.55123994e-03\nE        2.72692964e-03 2.22850934e-03 5.94356641e-05 2.17837617e-03\nE        1.40094087e-03 1.27200410e-03 1.79538057e-03 2.97107026e-03\nE        2.47264996e-03 2.07221717e-03 4.83519580e-04 6.92170117e-04\nE        1.86785981e-03 1.09042451e-03 9.61487744e-04 9.82629209e-04\nE        9.53747930e-04 5.36162402e-04 1.96972563e-03 7.94035938e-04\nE        3.81653760e-04 1.55734346e-03 1.44954815e-03]\nE       not close tol = [1.0607562e-06 1.0898906e-06 1.1024117e-06 1.1149575e-06 1.1274732e-06\nE        1.1400097e-06 1.0845725e-06 1.2603331e-06 1.3524509e-06 1.3649865e-06\nE        1.3773604e-06 1.3898149e-06 1.4024315e-06 1.2347111e-06 1.4611301e-06\nE        1.6155443e-06 1.6279191e-06 1.6396398e-06 1.6523400e-06 1.6648751e-06\nE        1.3847675e-06 2.1256828e-06 2.4886722e-06 2.5020217e-06 2.5156974e-06\nE        2.5293732e-06 2.5410957e-06 1.8851777e-06 2.3281059e-06 2.7550220e-06\nE        2.7686979e-06 2.7813969e-06 2.7905139e-06 2.8006134e-06 2.0323830e-06\nE        2.5276031e-06 3.0168153e-06 3.0285378e-06 3.0409087e-06 3.0539322e-06\nE        3.0676078e-06 2.1867522e-06 3.1941072e-06 3.8920593e-06 3.9037818e-06\nE        3.9161528e-06 3.9291763e-06 3.9428519e-06 2.6869966e-06 3.3919755e-06\nE        4.1518974e-06 4.1655730e-06 4.1792487e-06 4.1909711e-06 4.2033425e-06\nE        2.8355064e-06 3.5930939e-06 4.4143449e-06 4.4254111e-06 4.4390868e-06\nE        4.4527624e-06 4.4664384e-06 2.9859734e-06]\nE       dtype = float64, shape = (63,)\nE       Mismatched elements: 63 / 63 (100%)\nE       Max absolute difference: 0.00401592\nE       Max relative difference: 0.00225436\nE        x: array([0.060714, 0.089881, 0.102381, 0.114881, 0.127381, 0.139881,\nE              0.084524, 0.260714, 0.352381, 0.364881, 0.377381, 0.389881,\nE              0.402381, 0.234524, 0.460714, 0.614881, 0.627381, 0.639881,...\nE        y: array([0.060756, 0.089891, 0.102412, 0.114958, 0.127473, 0.14001 ,\nE              0.084573, 0.260333, 0.352451, 0.364986, 0.37736 , 0.389815,\nE              0.402431, 0.234711, 0.46113 , 0.615544, 0.627919, 0.63964 ,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003713349997269688,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
            "lineno": 226,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006283590000748518,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14545357399993009,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032848299997567665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
            "lineno": 252,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006641210002271691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13761403800026528,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003283999999439402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006777020003028156,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.6110597629999575,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 727,
                        "message": "in testFilterGradientKernelSizeMatchesInputSize"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientKernelSizeMatchesInputSize>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:727: in testFilterGradientKernelSizeMatchesInputSize\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003424910000831005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006075629999031662,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.915083725999921,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 655,
                        "message": "in testFilterGradientSamePaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideOne>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:655: in testFilterGradientSamePaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.000543139000001247,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008925209999688377,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.596081970999876,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 703,
                        "message": "in testFilterGradientSamePaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideThree>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:703: in testFilterGradientSamePaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003704910000124073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006580730000678159,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.979384011000093,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 679,
                        "message": "in testFilterGradientSamePaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideTwo>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:679: in testFilterGradientSamePaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003477279997241567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.000597578999986581,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.573438182000245,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 1.0 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 583,
                        "message": "in testFilterGradientValidPaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideOne>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:583: in testFilterGradientValidPaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 1.0 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0005509590000656317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008827229999042174,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.125729952999791,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 1.0 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 776,
                        "message": "in testFilterGradientValidPaddingStrideOneFastPath"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideOneFastPath>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:776: in testFilterGradientValidPaddingStrideOneFastPath\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 1.0 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00033280599973295466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006035680003151356,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.734284224000021,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 631,
                        "message": "in testFilterGradientValidPaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideThree>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:631: in testFilterGradientValidPaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00040200200010076514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006499249998341838,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.05483103700044,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.92578125 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 607,
                        "message": "in testFilterGradientValidPaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideTwo>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:607: in testFilterGradientValidPaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.92578125 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00036184900000080233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006187589997352916,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.8236264110000775,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.98828125 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 739,
                        "message": "in testInputGradientKernelSizeMatchesInputSize"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientKernelSizeMatchesInputSize>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:739: in testInputGradientKernelSizeMatchesInputSize\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.98828125 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003870150003422168,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006844970002930495,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.7504247990000295,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.97265625 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 715,
                        "message": "in testInputGradientSamePaddingDifferentStrides"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingDifferentStrides>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:715: in testInputGradientSamePaddingDifferentStrides\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.97265625 not less than 0.005"
            },
            "teardown": {
                "duration": 0.000496225000006234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008233220000875008,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6533223550000002,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.91796875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 643,
                        "message": "in testInputGradientSamePaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideOne>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:643: in testInputGradientSamePaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.91796875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00038477400039482745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006294889999480802,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.000169294000443,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 691,
                        "message": "in testInputGradientSamePaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideThree>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:691: in testInputGradientSamePaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003583739999157842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006319170001916063,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.50090471600015,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 667,
                        "message": "in testInputGradientSamePaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideTwo>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:667: in testInputGradientSamePaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003513480000947311,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006160769999041804,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.183651514999838,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 571,
                        "message": "in testInputGradientValidPaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideOne>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:571: in testInputGradientValidPaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00038234000021475367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006612990000576247,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.69371431899981,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 764,
                        "message": "in testInputGradientValidPaddingStrideOneFastPath"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideOneFastPath>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:764: in testInputGradientValidPaddingStrideOneFastPath\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003525739998622157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005901559998164885,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.780373202999726,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 619,
                        "message": "in testInputGradientValidPaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideThree>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:619: in testInputGradientValidPaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00035067199996774434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006236499998522049,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.607030571999985,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 562,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 595,
                        "message": "in testInputGradientValidPaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 566,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 562,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideTwo>, args = ()\nkwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:595: in testInputGradientValidPaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:566: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:562: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00038816799997221096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
            "lineno": 444,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006484759996965295,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6228497970000717,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003043870001420146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
            "lineno": 401,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006268749998525891,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6982127510000282,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5, 6]),)\nnot close lhs = [0.03703704 0.11111111 0.25925926 0.33333333 0.7037037  0.77777778\n 0.92592593]\nnot close rhs = [0.03710938 0.11132812 0.25976562 0.33398438 0.703125   0.77734375\n 0.92578125]\nnot close dif = [7.23350e-05 2.17015e-04 5.06365e-04 6.51045e-04 5.78700e-04 4.34030e-04\n 1.44680e-04]\nnot close tol = [1.0371093e-06 1.1113282e-06 1.2597657e-06 1.3339843e-06 1.7031250e-06\n 1.7773438e-06 1.9257814e-06]\ndtype = float64, shape = (8,)\nMismatched elements: 7 / 8 (87.5%)\nMax absolute difference: 0.00065105\nMax relative difference: 0.00194933\n x: array([0.037037, 0.111111, 0.259259, 0.333333, 0.703704, 0.777778,\n       0.925926, 1.      ])\n y: array([0.037109, 0.111328, 0.259766, 0.333984, 0.703125, 0.777344,\n       0.925781, 1.      ], dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 407,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 126,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSmallerThanStride>\n\n    def testKernelSmallerThanStride(self):\n      expected_output = [\n          0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037, 0.77777778,\n          0.92592593, 1.\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 3, 3, 3, 1],\n          filter_in_sizes=[1, 1, 1, 1, 1],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:407: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/conv3d_test.py:126: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSmallerThanStride>\na = array([0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037 ,\n       0.77777778, 0.92592593, 1.        ])\nb = array([0.03710938, 0.11132812, 0.25976562, 0.33398438, 0.703125  ,\n       0.77734375, 0.92578125, 1.        ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5, 6]),)\nE       not close lhs = [0.03703704 0.11111111 0.25925926 0.33333333 0.7037037  0.77777778\nE        0.92592593]\nE       not close rhs = [0.03710938 0.11132812 0.25976562 0.33398438 0.703125   0.77734375\nE        0.92578125]\nE       not close dif = [7.23350e-05 2.17015e-04 5.06365e-04 6.51045e-04 5.78700e-04 4.34030e-04\nE        1.44680e-04]\nE       not close tol = [1.0371093e-06 1.1113282e-06 1.2597657e-06 1.3339843e-06 1.7031250e-06\nE        1.7773438e-06 1.9257814e-06]\nE       dtype = float64, shape = (8,)\nE       Mismatched elements: 7 / 8 (87.5%)\nE       Max absolute difference: 0.00065105\nE       Max relative difference: 0.00194933\nE        x: array([0.037037, 0.111111, 0.259259, 0.333333, 0.703704, 0.777778,\nE              0.925926, 1.      ])\nE        y: array([0.037109, 0.111328, 0.259766, 0.333984, 0.703125, 0.777344,\nE              0.925781, 1.      ], dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00037153499988562544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
            "lineno": 452,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006597100000362843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.048621719000038865,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024329500001840643,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005424910000328964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006666650001534435,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0009236480000254232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.000586553000175627,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1577462430000196,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028826100015066913,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006134760001259565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000944485999752942,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000316116000249167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006321780001599109,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0036334420001367107,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024384899961660267,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
            "lineno": 185,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005273799997667084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009083207999992737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024240599987024325,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005236679999143234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029141569998500927,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022443999978349893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
            "lineno": 196,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005091530001664069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0068824660002064775,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022669899999527843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005194360001041787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02739438499975222,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023521799994341563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
            "lineno": 142,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005307360002007044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11504370500006189,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002987990001201979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
            "lineno": 124,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006300540003394417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09237740500020664,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002730819996941136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006149139999251929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012340199999925971,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024445700000796933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
            "lineno": 152,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005750179998358362,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02681936199996926,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002094390001730062,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
            "lineno": 202,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048525300007895567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009137958999872353,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022932399997444008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005228479999459523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016748289999668486,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022158299998409348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005328100000951963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045690999968428514,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000548781999896164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006101069998294406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004236530003254302,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024234600005001994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005179480003789649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004407759997775429,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000301706000300328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006064030003471998,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007929437999791844,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023129400005927891,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000543608000043605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09897467000018878,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.3509624,
                        "msecs": 350.96240043640137,
                        "relativeCreated": 231451.171875,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002934829999503563,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000586760999794933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22522955900012676,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.566658,
                        "msecs": 566.6580200195312,
                        "relativeCreated": 231666.86749458313,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.5773952,
                        "msecs": 577.3952007293701,
                        "relativeCreated": 231677.60467529297,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.000531314999989263,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005932609997216787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012792099999842321,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023851000014474266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005776810003226274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18585656799996286,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.6541028,
                        "msecs": 654.1028022766113,
                        "relativeCreated": 231754.3122768402,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.6631916,
                        "msecs": 663.191556930542,
                        "relativeCreated": 231763.40103149414,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.6720872,
                        "msecs": 672.0871925354004,
                        "relativeCreated": 231772.296667099,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.7612555,
                        "msecs": 761.2555027008057,
                        "relativeCreated": 231861.4649772644,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.771119,
                        "msecs": 771.1191177368164,
                        "relativeCreated": 231871.32859230042,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002205.7812538,
                        "msecs": 781.2538146972656,
                        "relativeCreated": 231881.46328926086,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00043856499996763887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006266949999371718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012689070000305946,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002286990002176026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005454590000226744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004690279997703328,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004240930002197274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000612541999998939,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005388200002016674,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022142299985716818,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005313860001479043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047260199971788097,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021814700039612944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004935500001010951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004785360001733352,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002214629998888995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005054359999121516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047478200031036977,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022679700032313121,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0009106530001190549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005081260001134069,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002186549995712994,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004989620001651929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004678680002143665,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022677100014334428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005262710001261439,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047651300019424525,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021568100009972113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00051108799971189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004833759999200993,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021949399979348527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005021580000175163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004775850002260995,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022863100002723513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005001730000913085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046633200008727727,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022052800022720476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005017389999011357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047380000023622415,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021702699996239971,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004904820002593624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005038139997850521,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0023973350002961524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000532768999619293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004885410003225843,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022090800030127866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005004200002076686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004765309995491407,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022286700004769955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004992399999537156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004781490001732891,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022725899998476962,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004945959999531624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004801489999408659,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022169900012158905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004993239999748766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004655370003092685,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021822300004714634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004973549998794624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004980650001016329,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002177510000365146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004935410001962737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046672999997099396,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022698099974149955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005295000000842265,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008149479999701725,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021949499978290987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004926729998260271,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047408299997186987,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00025006800024129916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005013549998693634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048386500020569656,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021667200007868814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005019739996896533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004976029999852472,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021725300030084327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004946929998368432,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047376899965456687,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002264390000163985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000539822000064305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004725759999928414,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021624500004691072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004986969997844426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047264400018320885,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021589500011032214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004985949999536388,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048073400012071943,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021669299985660473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004894279995824036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008307729999614821,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022633700018559466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005228569998507737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000493485999868426,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022966799997448106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008791099999143626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000534134999725211,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002716849999160331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005237959999249142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005147800002305303,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022726299994246801,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005008160001125361,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004914689998258837,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002185799999097071,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005076940001345065,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006139980000625656,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000228383999910875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005369360001168388,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004938919996675395,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023375399996439228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005086400001346192,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004708169999503298,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002181340000788623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005032970002503134,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000861512000028597,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002293120001013449,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005136549998496776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004739390001304855,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002185309999731544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005261830001472845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004841529998884653,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023584900009154808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004969400001755275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004841730001317046,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021947400000499329,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005019549998905859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048388799996246235,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002213330003542069,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000504254999668774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046860400016157655,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022003300000505988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005919969999013119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000554357000055461,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022887700015417067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005121910003254015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004893519999313867,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002239370001007046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000514086999828578,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008561200002077385,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022500700015370967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005092759997751273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004858940001213341,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022747699995306903,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005177889997867169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005165649999980815,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022749500021745916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005273749998195854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005028089999541407,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023737399988021934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005478069997479906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004929679998895153,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022515299997394322,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006427099997381447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004923399997096567,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022003300000505988,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004978450001544843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004679450003095553,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022493099959319807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005007720001231064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046590600004492444,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022091900018494925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000836168999740039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000481327999750647,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022537900031238678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005263649995868036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004798750001100416,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021766600002592895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004975850001756044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047347500003525056,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021671000013157027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005043010000918002,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17338385599987305,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6b8c2430>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68686a30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68686a30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000399001000005228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007337120000556752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28751967100015463,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a7af0d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d9e634760>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d9e634760>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037352799972723005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006840440000814851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20883778400002484,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a7ae8b0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6bb84520>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6bb84520>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003732259997377696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000697210999987874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.303541523000149,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6893de50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d686921f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d686921f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037578299998131115,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007055430000946217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.30699465999987297,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aa703a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6b9b4f10>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6b9b4f10>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036982699975851574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006741679999322514,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26153599700000996,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a9e4ee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6bd8d490>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6bd8d490>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003826150000350026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006913309998708428,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0774553679998462,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aa2c940>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6b8e4d60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6b8e4d60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003843080003207433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006997330001468072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.056513905999963754,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a7ae5e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68bd1dc0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68bd1dc0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003781800000979274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006883129999550874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06058914499999446,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a7ae820>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6c5629d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6c5629d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036962600006518187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006804520003242942,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11453709399984291,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a7ae5e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68968cd0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68968cd0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003658499999801279,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007139449999158387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08972966099963742,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d689dcca0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67a35d90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67a35d90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036951500032955664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006691749999845342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09007426599964674,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a9e4ee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6abb9490>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6abb9490>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003697160000228905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007168649999584886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07455311200010328,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aafcd30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67dbe9d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67dbe9d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000374992999695678,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006832369999756338,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07219459499992809,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aafc1f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67031d90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67031d90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003974700002800091,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007158799999160692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050216169000123045,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aafcd30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d9e624be0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d9e624be0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036878500031889416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006926259998181195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02162530399982643,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aafc1f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67fdec40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67fdec40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003691510000862763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000675847999900725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10544747299991286,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ab343d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ab343d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037576200020339456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007102929998836771,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10605923200000689,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6b8cbee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d684719a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d684719a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036673699969469453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006963099999666156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02205075099982423,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6c509c70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6c509c70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003691399997478584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006939559998500044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028283247999752348,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85af70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67d39be0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67d39be0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003849730001093121,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006931940001777548,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03141517099993507,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d9f695100>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d9f695100>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000362691000191262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000665735999973549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11954933500010156,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85af70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68471fd0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68471fd0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037112500012881355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006957619998502196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07722541100019953,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68008ca0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68008ca0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036787599992749165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006819329996687884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08006449599997723,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85af70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67e05670>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67e05670>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003691709998747683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007185370000115654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07456028600017817,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ab34c70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ab34c70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037170099994909833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006902610002725851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13005150800017873,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85af70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68cc6cd0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68cc6cd0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000375744999928429,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006854370003566146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07266508200018507,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6b91caf0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6b91caf0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003828349999821512,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007077179998304928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13701994099983494,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85af70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68c9cca0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68c9cca0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003754060003302584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007043260002319585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1617972069998359,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a85a040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68bd1b20>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68bd1b20>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003992140000264044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007455989998561563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18022812500021246,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7f1fef81b550>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68962af0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d66d9cee0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d66d9cee0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037999899996066233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007043149998935405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21597072500026115,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6893f1f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d684a8c70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d684a8c70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003656489998320467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006634809997194679,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.46916498399968987,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6873adc0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ac4ab50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ac4ab50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003956049999942479,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000652576999982557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2621650959999897,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7f1fef81b670>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d686781f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6a7bd7c0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6a7bd7c0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039298299998336006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007202589999906195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.045220356000299944,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68678dc0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67bc1d60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67bc1d60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003681210000650026,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006941449996702431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05445482599998286,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a648160>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d9ddde820>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d9ddde820>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003740260003723961,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006808120001551288,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06062936499984062,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7f1fef81a820>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6893d700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67223700>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67223700>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035281999998915126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006578339998668525,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0827193109998916,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a62f790>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d9ddde1f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d9ddde1f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038675199994031573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006239740000637539,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09139315600032205,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a62f550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6c2ca490>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6c2ca490>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037026399968453916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000683941999795934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09062184100002924,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7f1fef81b430>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6893fe50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ba1cb50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ba1cb50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037369399979070295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007137570000850246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.041711816000315594,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aa0c430>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d65934100>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d65934100>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035507500024323235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006729830001859227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05080944399969667,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d689629d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67b76e50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67b76e50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003642560000116646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006008059999658144,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05120999300015683,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7f1fef81b4c0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6874c1f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d5fd113d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d5fd113d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003664390001176798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000671390000206884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021825120999892533,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6ba0fa60>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6b97f9d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6b97f9d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003682710002976819,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006736500004080881,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04684564700028204,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a666ca0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67ca7d90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67ca7d90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036974700014980044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006737519997841446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04904427300016323,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7f1fef81b5e0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66c04ee0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d65941730>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d65941730>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003974460000790714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006740029998582031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0218973350001761,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6aa0c430>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ab229a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ab229a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036190599985275185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006880629998704535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029249573000015516,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68d59160>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d67e565e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d67e565e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003763239997169876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006239879999156983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029035527000360162,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7f1fef80cd30>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68962670>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6ad076d0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6ad076d0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003696779999700084,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007192240000222228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06409621500006324,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6a666700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68672310>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68672310>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003665630001705722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007049519999782206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07849008999983198,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6873a0d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1ddd546790>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1ddd546790>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003667840001071454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007063570001264452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07992097999976977,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7f1fef81b700>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68b0ee50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68785be0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68785be0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003648510000857641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007048030001897132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04279492699970433,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 0}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6873a0d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6a2ceca0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6a2ceca0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003791579997596273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007262550002451462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05277727700013202,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 20}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68b0ee50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68d91dc0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68d91dc0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039426500006811693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006122320000940817,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08655853499976729,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 125,
                        "message": "in testBasic"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7f1fef80cee0>, 'nrows': 23}\nreasons_to_skip = [], combination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6872a1f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d6bcbd160>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d6bcbd160>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:125: in testBasic\n    batched_dataset = dataset.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037167500022405875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007047479998618655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011832519999188662,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022805800017522415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004951619998792012,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004996809998374374,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002027020000241464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004616639998857863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004403470002216636,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023057799990056083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004593870003191114,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045015599971520714,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020371900018290034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004527149999375979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004494240001804428,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020576700035235262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004534770000645949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044565000007423805,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020544699964375468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00072870799976954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004770769996866875,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002006029999392922,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004616149999492336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044471199998952216,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020205400005579577,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045538799986388767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004485079998630681,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020034499993926147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045816300007572863,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004392579999148438,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020267299987608567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004842339999413525,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004549929999484448,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020165900014035287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004509260002123483,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004469380000955425,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020149000010860618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004829650001738628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004440739999154175,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020561900009852252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000458621000234416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044798099997933605,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000557236000076955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004629679997378844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004427109997777734,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019964500006608432,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045456999987436575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004447380001693091,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020638399973904598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004577019999487675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045499999987441697,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020336099987616763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004636779999600549,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004537460004030436,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020457299979170784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045337800020206487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004461819999050931,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020026900028824457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045400999988487456,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046667400010846904,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020843599986619665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044894099983139313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044091499967180425,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020686400011982187,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007889519997661409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004478850000850798,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020335699991846923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045725200016022427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044433199991544825,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019900200004485669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004732910001621349,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044758100011677016,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002006239997172088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045107899995855405,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046074100009718677,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020250299985491438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047773799997230526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004601740001817234,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021002399989811238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004522070003076806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004422799997882976,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022229800015338697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004622830001608236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044628899968301994,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000204475999908027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004620460003934568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004470480002964905,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002223420001428167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008140879999700701,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005296660001476994,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020055999993928708,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045960799980093725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047461800022574607,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021162400025787065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004488220001803711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043929899993599975,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002124519996868912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004685479998443043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004716759999610076,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020109800016143708,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004596550002133881,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004372200000943849,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002007749999393127,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004610080000020389,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004426850000527338,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002044919997388206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004658500001823995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044709599978887127,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020149000010860618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004770410000674019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000455956000223523,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020042799997099792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007982179999999062,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044356699982017744,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020814200024688034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004648760000236507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044403900028555654,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0001992319998862513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046015599991733325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044720799996866845,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022844800014354405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045995199980097823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043892199983019964,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020126800018260838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004584729999805859,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004452099997251935,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020129899985477095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045218900004329043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004449600000953069,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002008289998229884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004536579999694368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004455869998309936,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019936799981223885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048059200025818427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044882199972562375,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020246599979145685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000808808999863686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004507100002228981,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020102300004509743,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004604689997904643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044628399973589694,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019968800006608944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048043500009953277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044575800029633683,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002003959998546634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004493580004236719,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000454436999916652,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020011600008729147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004814869998881477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044676500010609743,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0001991259996430017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004495430002862122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044470300008470076,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0001984559999073099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000460035000287462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043764399970314116,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021091600001454935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004583609998007887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044583399994735373,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020829099958064035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008101409998744202,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006108090001362143,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023832499982745503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004925560001538543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28308082799958356,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029736800024693366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006138200001259975,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4241190070001721,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032411499978479696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000634188000276481,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3983823289995598,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003456649997133354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006832560002294485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.45153960199968424,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003407730000617448,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006120339999142743,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7150104209999881,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006295739999586658,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011148419998789905,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.61412606399972,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00040011300006881356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007449539998560795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09674619799989159,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002594110001155059,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006153129997983342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2239596839999649,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000307270000121207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000618150000263995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22804313600045134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030253100021582213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006536549999509589,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1771180729997468,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002977320000354666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006093810002312239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7792935540001054,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003141160000268428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006240449997676478,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.479452910999953,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034191800023108954,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006333490000542952,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08535359500001505,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025245500000892207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005604380003205733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15774237699997684,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003135359997941123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007636109999111795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1628050469998925,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029374599989751005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006100410000726697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059182005999900866,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024285499966936186,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005598709999503626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11927407000030144,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002936119999503717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010363279998273356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13244602799977656,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002729839998210082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006053199999769276,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059056138999949326,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000273987999662495,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005493520002346486,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08937687000025107,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002991099995597324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006306930004029709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08880227000008745,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002577000000201224,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005648639998980798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13184732199988503,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003185030000167899,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000609518000146636,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3606363769999916,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003162110001539986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006542959999933373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3105459109997355,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030281299996204325,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006282519998421776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09380254899997453,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030282899979283684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006303989998741599,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22413269200023933,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003009450001627556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005995689998599119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21511524900006407,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003019869996023772,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006432380000660487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2796495419997882,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002979279997816775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006118530000094324,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2516849069997988,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033197799984918674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006294879999586556,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5098037369998565,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031806600009076647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006346889999804262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4472541539998929,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034669499973460915,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006503120002889773,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4419749749999937,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035919699985242914,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006376639998961764,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6242532060000485,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003343759999552276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006711330001962779,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31688346199962325,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030012599972906173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006028520001564175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22949772899983145,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003634889999375446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006110700001045188,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22813298300025053,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031015200011097477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006300629997895157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17782767800008514,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030766500003664987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006306810000751284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.46573533300033887,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003083289998357941,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006407200003195612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4741830180000761,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003377569996700913,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006353649996526656,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09446115499986263,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002874739998333098,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005891330001759343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16215493500021694,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030260499988798983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000608895999903325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16101886800015563,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029296299999259645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006038520000402059,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05918730599978517,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024277900001834496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005624220002573566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11977033400034998,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026212399961877964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005651609999404172,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12428097500014701,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002698470002542308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005701750001207984,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05817962599985549,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002845799999704468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006041599999662139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08800175900023532,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002596740000626596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005975879998914024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08893911199993454,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002763299999060109,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005769170002167812,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14176995600018927,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002931079998234054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005900259998270485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3043229849999989,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003042879998247372,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006237990000954596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.30797046399993633,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029400600033113733,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006095300000197312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09057360199994946,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002534210002522741,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000565736999760702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22037231600006635,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000313889000153722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006095129997447657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21607449599969186,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003131200001007528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006523289998767723,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006267819999266067,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021280600003592554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004822440000680217,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1925188039999739,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 165,
                        "message": "in testWithStructuredElements"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 91,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py",
                        "lineno": 450,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2294,
                        "message": "in map"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5505,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 3467,
                        "message": "in map_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testWithStructuredElements_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6bcee3a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7f1d68968340>]\nmanager = <contextlib._GeneratorContextManager object at 0x7f1d68968340>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:165: in testWithStructuredElements\n    dataset = dataset.apply(batching.dense_to_ragged_batch(batch_size))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:91: in _apply_fn\n    ragged_dataset = _DenseToRaggedDataset(dataset, row_splits_dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/batching.py:450: in __init__\n    self._mapped_dataset = input_dataset.map(map_fn)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2294: in map\n    return MapDataset(self, map_func, preserve_cardinality=True, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5505: in __init__\n    variant_tensor = gen_dataset_ops.map_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:3467: in map_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:MapDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036569100029737456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006275620003179938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009350280001854117,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022087699971962138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047856100036369753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.501699498999642,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003007489999617974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000626696999916021,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008073839999269694,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.005262089999632735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006180250002216781,
                "outcome": "passed"
            },
            "call": {
                "duration": 11.137996786999793,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007633229997736635,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0012690739999925427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010530428000038228,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0011178130002917896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
            "lineno": 114,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007217279999167658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13148714299995845,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 118,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxGRY>\n\n    def testDrawBoundingBoxGRY(self):\n        \"\"\"Test if drawing bounding box on a GRY image works.\"\"\"\n        image = np.zeros([4, 4, 1], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003816720000031637,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
            "lineno": 133,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006317249999483465,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11625906600011149,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 139,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxHalf>\n\n    def testDrawBoundingBoxHalf(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(\n            image, dtype=dtypes.half, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038801899972895626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
            "lineno": 109,
            "outcome": "failed",
            "setup": {
                "duration": 0.00060554299989235,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0369856469997103,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 113,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCycling>\n\n    def testDrawBoundingBoxRGBAColorCycling(self):\n        \"\"\"Test if RGBA color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00041857700034597656,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
            "lineno": 126,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006294789995990868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016471895999984554,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBAColorCyclingWithColors(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003562150000107067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
            "lineno": 104,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006132560001788079,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06032451900000524,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 108,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCycling>\n\n    def testDrawBoundingBoxRGBColorCycling(self):\n        \"\"\"Test if RGB color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034554099966044305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005851789996995649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.034705453000242414,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 125,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBColorCyclingWithColors(self):\n        \"\"\"Test if RGB color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n        colors = np.asarray([[1, 1, 0, 1], [0, 0, 1, 1], [0.5, 0, 0.5, 1],\n                             [0.5, 0.5, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035355699992578593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006078740002521954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010604119997879025,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00041146700004901504,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.000607560999924317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013128041999607376,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002317990001756698,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
            "lineno": 96,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005276479996609851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008710495000286755,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002376899997216242,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005247790004432318,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007795968000209541,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022990199977357406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005148260001988092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005473659998642688,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003641099997366837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006386300001395284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05953452500034473,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024218599992309464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005292729997563583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08646610000005239,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022291599998425227,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047025900039443513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06392593399959878,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021188499977142783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004814789999727509,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08440619800012428,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022064899985707598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048637899999448564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06547540500014293,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002147029999832739,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047359700010929373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15732021700023324,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029388400025709416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006130149999989953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18558036700005687,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002766729999166273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000586192999890045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23400563899986082,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031381100006910856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005850149996149412,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19540874099993744,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002956519997496798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005921220003983763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16059337100023185,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027268099984212313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005872679998901731,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19131597400019018,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003067919997192803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006152740002107748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2318476670002383,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027441100019132136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006009449998600758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20520493699996223,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004029399997307337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007475450001948047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18111391499996898,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002765900003396382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005809520002912905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1963217950001308,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003253239997320634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006306169998424593,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24784693199990215,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002795079999486916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005857709998053906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2027666839999256,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027745900024456205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000580918999730784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16901770300000862,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003021879997504584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006019550000928575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20032897600003707,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033864000033645425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006097659997976734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2528543789999276,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000317874000302254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006760260002920404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21136957300041104,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002914710003096843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005895379999856232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1274489860002177,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027001299986295635,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005771099999947182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06828170000017053,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002886110000872577,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006052180001461238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.040216342999883636,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025689799986139406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006019200000082492,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02102518499987127,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024043499979597982,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005615989998659643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07111878600017008,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002732720004132716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
            "lineno": 449,
            "outcome": "passed",
            "setup": {
                "duration": 0.000603113000124722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02960512200024823,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028100500003347406,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006016029997226724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012904889999845182,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0009907570001814747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006529279999085702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05227861399998801,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023368700021819677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005126709997966827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008232159998442512,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00034097200023097685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
            "lineno": 67,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005987829999867245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02455201400016449,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 78,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testDictInputs>\n\n    def testDictInputs(self):\n      elements = [{\n          \"foo\": [1, 2, 3],\n          \"bar\": [[4.0], [5.0], [6.0]]\n      }, {\n          \"foo\": [4, 5, 6],\n          \"bar\": [[7.0], [8.0], [9.0]]\n      }]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036599999975805986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006016860002091562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009879310000542318,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_emptyinput>\nkwargs = {'elements': empty_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67f1ae50>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.0002442659997541341,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005058049996478076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006065139996280777,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_nonlistinput>\nkwargs = {'elements': non-list_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68b06940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.00023190299998532282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
            "lineno": 37,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047982600017348886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.36286476500026765,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028298099960011314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
            "lineno": 55,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005843330000061542,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026107478000085393,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 60,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testNonRectangularInputs>\n\n    def testNonRectangularInputs(self):\n      elements = [[[1]], [[2, 3]], [[4, 5, 6]]]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038005199985491345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
            "lineno": 43,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005994180000925553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00456772200004707,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 48,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testTupleInputs>\n\n    def testTupleInputs(self):\n      elements = [(1, 2), (3, 4)]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0008913450001273304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
            "lineno": 89,
            "outcome": "failed",
            "setup": {
                "duration": 0.000969703999999183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08917299499989895,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testUintInputs>\n\n    def testUintInputs(self):\n      elements = [(np.tile(np.array([[0], [1]], dtype=np.uint8), 2),\n                   np.tile(np.array([[2], [256]], dtype=np.uint16), 2),\n                   np.tile(np.array([[4], [65536]], dtype=np.uint32), 2),\n                   np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2))]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036705200000142213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000591063999763719,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000916488999791909,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004322760000832204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
            "lineno": 149,
            "outcome": "failed",
            "setup": {
                "duration": 0.000589536000006774,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015333199999076896,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 153,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testDictionary>\n\n    def testDictionary(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([{\"a\": 1, \"b\": 3}, {\"a\": 2, \"b\": 4}])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003619500002969289,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
            "lineno": 108,
            "outcome": "failed",
            "setup": {
                "duration": 0.000598401999923226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015884240001469152,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 112,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testInvalidIndex>\n\n    def testInvalidIndex(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([1, 2, 3])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033811699995567324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005886399999326386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005671766999967076,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 142,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testMultipleElements>\n\n    def testMultipleElements(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([[1, 2], [3, 4], [5, 6]])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003645359997790365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005969829999230569,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004147595000176807,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 184,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testName>\n\n    def testName(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([42], name=\"from_list\")\n\nsrc/tensorflow_tests_reduced/from_list_test.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037966999980199034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
            "lineno": 164,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005955629999334633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006515623000268533,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 174,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testNumpy>\n\n    def testNumpy(self):\n      elements = [\n          np.tile(np.array([[0], [1]], dtype=np.uint64), 2),\n          np.tile(np.array([[2], [256]], dtype=np.uint64), 2),\n          np.tile(np.array([[4], [65536]], dtype=np.uint64), 2),\n          np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2),\n      ]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000358925000000454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006177440000101342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001649570000154199,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 124,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testOneDimensionalArray>\n\n    def testOneDimensionalArray(self):\n      tensor = [1, 2, 3]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(tensor)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0005143260000295413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007354790000135836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01585056000021723,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002553129997977521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005472970001392241,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008326750003107009,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004892660003861238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006374740000865131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009176753999781795,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d68256310>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000378534999981639,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006024629997227748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00270654599989939,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6802cd30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036887299984300626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006287030000748928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002933471000233112,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66837040>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037289900001269416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000615291000030993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012696250000772125,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.00023283900009118952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005173099998501129,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002214674000242667,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66fd1040>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003675080001812603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006034460002410924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005664190002789837,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002125619998878392,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004744009997921239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04910376300040298,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66fd14c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035130299966112943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006010019997120253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006299962999946729,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66837790>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003623170000537357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005974610003249836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0069249260000106005,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66fd14c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003661770001599507,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000600474000293616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014525080000566959,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.0002212509998571477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004896810000900587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0058941840002262325,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6821eb80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0006706489998578036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006836210000074061,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5532636460002323,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000302940999972634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
            "lineno": 136,
            "outcome": "passed",
            "setup": {
                "duration": 0.000639398000203073,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2509086740001294,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031742200008011423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006643159999839554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10686456900020858,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002853659998436342,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005942190000496339,
                "outcome": "passed"
            },
            "call": {
                "duration": 35.0543689670003,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005866950000381621,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009682860004431859,
                "outcome": "passed"
            },
            "call": {
                "duration": 53.530863429999954,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007266180000442546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0012088329999642156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3724424709998857,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030663799998364993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
            "lineno": 127,
            "outcome": "failed",
            "setup": {
                "duration": 0.000645953000002919,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28462717200000043,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/gamma_test.py",
                    "lineno": 126,
                    "message": "AssertionError: Lists differ: [] != [tf.float64]\n\nSecond list contains 1 additional elements.\nFirst extra element 0:\ntf.float64\n\n- []\n+ [tf.float64]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 129,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 126,
                        "message": "in _testZeroDensity"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNonZeroSmallShape>\n\n    def testNonZeroSmallShape(self):\n>     self._testZeroDensity(0.01)\n\nsrc/tensorflow_tests_reduced/gamma_test.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/gamma_test.py:126: in _testZeroDensity\n    self.assertEqual([], failures)\nE   AssertionError: Lists differ: [] != [tf.float64]\nE   \nE   Second list contains 1 additional elements.\nE   First extra element 0:\nE   tf.float64\nE   \nE   - []\nE   + [tf.float64]"
            },
            "teardown": {
                "duration": 0.00032786900010250974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005838740003127896,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06448738000017329,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002415320000181964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
            "lineno": 53,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005537059996640892,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11881473899984485,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027410099983171676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006092309999985446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4663198250000278,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/gamma_test.py",
                    "lineno": 219,
                    "message": "AssertionError: 0 != 9128"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 219,
                        "message": "in testPositive"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testPositive>, args = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/gamma_test.py:219: in testPositive\n    self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(\nE   AssertionError: 0 != 9128"
            },
            "teardown": {
                "duration": 0.0003486850000626873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005951810003352875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06921720599984837,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003146349999951781,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006066530004318338,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07096240999999281,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026052700013678987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
            "lineno": 221,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005762599998888618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08592456499991385,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027410499978941516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006083920002311061,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009198500001730281,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000711435000084748,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007049079999887908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001641084000311821,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024101799999698414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
            "lineno": 206,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005236409997451119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006961999997656676,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022292199992079986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
            "lineno": 178,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005081929998596024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006752869999218092,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002196969999204157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
            "lineno": 225,
            "outcome": "passed",
            "setup": {
                "duration": 0.000507767000271997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006412850002561754,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021414799994090572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
            "lineno": 240,
            "outcome": "passed",
            "setup": {
                "duration": 0.000544503999662993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006078720002733462,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022364500000549015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005074010000498674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000634960000297724,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002151219996449072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005030759998589929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005970449997221294,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021668899989890633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
            "lineno": 249,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004981900001439499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007776799998282513,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022401700016416726,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005066730000180542,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006009310000081314,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002204560000791389,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005033200000070792,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005114370001138013,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005115610001666937,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
            "lineno": 67,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006297970003288356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013462530999731825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002252780000162602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.000512855999659223,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005397466999966127,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023073900001691072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005063710000285937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00602384500007247,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022184600038599456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.000513184999817895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0064311010000892566,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022671299984722282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005208349998611084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005247143999895343,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002093780003633583,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004538110001703899,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004228639995744743,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003725210003722168,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005660389997501625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005018469996684871,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018915900000138208,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
            "lineno": 25,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048548599988862406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004057840001223667,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001903030001813022,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004544080002233386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039530300000478746,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019561899989639642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004492650000429421,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003926819999833242,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003158320000693493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005517829999917012,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.048107235000315995,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002145049998034665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005245209999884537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005274170999655325,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020749199984493316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004660140002670232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008736370000406168,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000201158999971085,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000446905999979208,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004874233999998978,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021094699968671193,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044742799991581705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004418205999627389,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021356900015234714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004513779999797407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039890900006867014,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003729430000021239,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005978089998279756,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.052828716000021814,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002519659997233248,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000546676000340085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09058952900022632,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002743330001067079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000627040999916062,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005920720000176516,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00024129399980665767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000527565000083996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004805569997188286,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022369899988916586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005367750000004889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004806599999938044,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022746400009054923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005189400003473565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025348301000121864,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002406.6314452,
                        "msecs": 631.4451694488525,
                        "relativeCreated": 432731.65464401245,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00024534199974368676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005242420002105064,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006084110000301735,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00023422700041919597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005356850001589919,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.768362851999882,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004708390001724183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009175790000881534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08815257499963991,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029119900000296184,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006319930002973706,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02029956599972138,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025029700009326916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006683950000478944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06288269100014077,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002891819999604195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006109900000410562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06832308499997453,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002667889998519968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005993900003886665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006348130000333185,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0006197909997354145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
            "lineno": 366,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006452700004047074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09967462600025101,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025601000015740283,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005839249997734441,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005718319998777588,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002854420004041458,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
            "lineno": 414,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005802610003229347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00031273499962480855,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 415, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022042299997337977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
            "lineno": 399,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000467590999960521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030396600004678476,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 400, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00019776199997068034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045677200023419573,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028243600036148564,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00032037299979492673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005801520001114113,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0254287610000574,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00037268599999151775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007615340000484139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08883857299997544,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 161,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 255,
                        "message": "in idct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random1>, dct_type = 1, norm = None, shape = [2]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:161: in _compare\n    tf_idct = dct_ops.idct(signals, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:255: in idct\n    return _dct_internal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003500329999042151,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000594481000007363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001281960000142135,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002195150000261492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048641100011082017,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044551899964062613,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019779300009759027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000443259999883594,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003788109997913125,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018539000029704766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004433940002854797,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004163840003457153,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018877799993788358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045777300010740873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000387833999866416,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018535100025474094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004508319998421939,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038258499989751726,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019289600004412932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004524349997154786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003770439998334041,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001871209997261758,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000447658000211959,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037464799970621243,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019639799984361161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004513849999057129,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038115999996080063,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019212500001231092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044068299985156045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003859769999507989,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001877940003396361,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046686600035172887,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0436895769998955,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031155999977272586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006404159998965042,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.279196994999893,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003119869998045033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006322069998532243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1704324759998599,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random21>, dct_type = 2, norm = None, shape = [2]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003525590000208467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006137260002105904,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.1904055919999337,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003022290002263617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006632050003645418,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18071857500035549,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random23>, dct_type = 2, norm = None, shape = [3]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003598610001063207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000588504000006651,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.35026905299992,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006437950000872661,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0011758890000237443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19708630400009497,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random25>, dct_type = 2, norm = None, shape = [10]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003603389995987527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006135520002317207,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2033227500000976,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004019080001853581,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007514779999837629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19298344099979658,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random27>, dct_type = 2, norm = None\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003628750000643777,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006057609998606495,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.24961899300024,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002956449998237076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006448629997066746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19279811699971106,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random29>, dct_type = 2, norm = None\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000371093000012479,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005875470001228678,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0809504899998501,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 161,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 255,
                        "message": "in idct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random3>, dct_type = 1, norm = None, shape = [3]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:161: in _compare\n    tf_idct = dct_ops.idct(signals, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:255: in idct\n    return _dct_internal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034733400025288574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005883219996576372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21015183999998044,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003140610001537425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006401390000974061,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024745575999986613,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random31>, dct_type = 2, norm = 'ortho'\nshape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003610150001804868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005916100003560132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16283595400000195,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003056499999729567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006320849997791811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022915660999842657,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random33>, dct_type = 2, norm = 'ortho'\nshape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003786790002777707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005836599998474412,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16265477400020245,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002978140000777785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006223959999260842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024190365000322345,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random35>, dct_type = 2, norm = 'ortho'\nshape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003565109996088722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005953149998276785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16441507300032754,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002967199998238357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.00063488999967376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024680471000010584,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random37>, dct_type = 2, norm = 'ortho'\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003536770000209799,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000586224000016955,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1648608420000528,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028782599974874756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006272129999160825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02309174499987421,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random39>, dct_type = 2, norm = 'ortho'\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037384400002338225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000594380999700661,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0048253920003845,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030973299999459414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006795250001232489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09774652200030687,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002780019999590877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006211400000211142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021718535000218253,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random41>, dct_type = 3, norm = None, shape = [2]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003757579997909488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005948859998170519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0987333199996101,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027774699992733076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006075600003896398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02201354699991498,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random43>, dct_type = 3, norm = None, shape = [3]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003638950001914054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005893789998481225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09776116000011825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027270999999018386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005968710001980071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022085114999754296,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random45>, dct_type = 3, norm = None, shape = [10]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003584950000004028,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005814050000481075,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10274782199985566,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029336299985516234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006173819997457031,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06777182700034245,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random47>, dct_type = 3, norm = None\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035669299995788606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005949159999545373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1059803599996485,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002800970000862435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006307120002020383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07053131800012125,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random49>, dct_type = 3, norm = None\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037152400000195485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000636519000181579,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08578641800022524,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 161,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 255,
                        "message": "in idct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random5>, dct_type = 1, norm = None, shape = [10]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:161: in _compare\n    tf_idct = dct_ops.idct(signals, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:255: in idct\n    return _dct_internal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033903500025189715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006041329997970024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12085637200016208,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002629989999149984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006005709997225495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2006367990002218,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random51>, dct_type = 3, norm = 'ortho'\nshape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036119099968345836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006113770000411023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12056558699987363,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000273638999715331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006088380000619509,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09340590800002246,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random53>, dct_type = 3, norm = 'ortho'\nshape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003534069996931066,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005762069999946107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12110571999983222,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027613400015980005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006301429998529784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0919293629999629,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random55>, dct_type = 3, norm = 'ortho'\nshape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038910800003577606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005869349997738027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12205626300010408,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003140889998576313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000618405000295752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09837388500000088,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random57>, dct_type = 3, norm = 'ortho'\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039524400017398875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005935499998486193,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12597025900004155,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002992140002788801,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006515990003208572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11055903499982378,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 187,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random59>, dct_type = 3, norm = 'ortho'\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:187: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003844980001304066,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006026959999871906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.962274542999694,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029524699993999093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006651319999946281,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2773201549998703,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002984020002259058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006498899997495755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19750432600039858,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random61>, dct_type = 4, norm = None, shape = [2]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036183200018058415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005886159997317009,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.273377234000236,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030355400031112367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006566170000041893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2005924669997512,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random63>, dct_type = 4, norm = None, shape = [3]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034758999981931993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006027350000294973,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1658190240000295,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005664339996656054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0010874690001401177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0495156599999973,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random65>, dct_type = 4, norm = None, shape = [10]\ndtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003718090001711971,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006317200000012235,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1915327330002583,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000300410999898304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006313560002126906,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19579929300016374,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random67>, dct_type = 4, norm = None\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034624199997779215,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00057578799987823,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2373632789999647,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00039154100022642524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007615409999743861,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13680272700003115,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random69>, dct_type = 4, norm = None\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035647499998958665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005952459996478865,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08199710200005939,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 161,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 255,
                        "message": "in idct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random7>, dct_type = 1, norm = None\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:161: in _compare\n    tf_idct = dct_ops.idct(signals, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:255: in idct\n    return _dct_internal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034681399984037853,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006099150000409281,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11745685000005324,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002943909998975869,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006231829997886962,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028637679999974353,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random71>, dct_type = 4, norm = 'ortho'\nshape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035901299997931346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005882939999537484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1192817629998899,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002771109998320753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000661841000237473,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02871220099996208,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random73>, dct_type = 4, norm = 'ortho'\nshape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036520699995890027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005728779997298261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12056026999971436,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030044100003578933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000617095000052359,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029005180999774893,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random75>, dct_type = 4, norm = 'ortho'\nshape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003537770003276819,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005871339999430347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12206678600023224,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028040000006512855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006298779999269755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.029672021999886056,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random77>, dct_type = 4, norm = 'ortho'\nshape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003641909997895709,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006163149996609718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12346316100001786,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027094699998997385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005947790000391251,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02981286900012492,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                    "lineno": 102,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 154,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1441,
                        "message": "in r_binary_op_wrapper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1374,
                        "message": "in maybe_promote_tensors"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py",
                        "lineno": 183,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 1636,
                        "message": "in convert_to_tensor"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py",
                        "lineno": 48,
                        "message": "in _default_conversion_function"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 267,
                        "message": "in constant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 279,
                        "message": "in _constant_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 304,
                        "message": "in _constant_eager_impl"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py",
                        "lineno": 102,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random79>, dct_type = 4, norm = 'ortho'\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:154: in _dct_internal\n    scale = 2.0 * _math_ops.exp(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1441: in r_binary_op_wrapper\n    y, x = maybe_promote_tensors(y, x, force_same_dtype=True)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1374: in maybe_promote_tensors\n    ops.convert_to_tensor(tensor, dtype, name=\"x\"))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/profiler/trace.py:183: in wrapped\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:1636: in convert_to_tensor\n    ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/tensor_conversion_registry.py:48: in _default_conversion_function\n    return constant_op.constant(value, dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:267: in constant\n    return _constant_impl(value, dtype, shape, name, verify_shape=False,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:279: in _constant_impl\n    return _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:304: in _constant_eager_impl\n    t = convert_to_eager_tensor(value, ctx, dtype)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nvalue = 2.0, ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, dtype = 18\n\n    def convert_to_eager_tensor(value, ctx, dtype=None):\n      \"\"\"Converts the given `value` to an `EagerTensor`.\n    \n      Note that this function could return cached copies of created constants for\n      performance reasons.\n    \n      Args:\n        value: value to convert to EagerTensor.\n        ctx: value of context.context().\n        dtype: optional desired dtype of the converted EagerTensor.\n    \n      Returns:\n        EagerTensor created from value.\n    \n      Raises:\n        TypeError: if `dtype` is not compatible with the type of t.\n      \"\"\"\n      if isinstance(value, ops.EagerTensor):\n        if dtype is not None and value.dtype != dtype:\n          raise TypeError(f\"Expected tensor {value} with dtype {dtype!r}, but got \"\n                          f\"dtype {value.dtype!r}.\")\n        return value\n      if dtype is not None:\n        try:\n          dtype = dtype.as_datatype_enum\n        except AttributeError:\n          dtype = dtypes.as_dtype(dtype).as_datatype_enum\n      ctx.ensure_initialized()\n>     return ops.EagerTensor(value, ctx.device_name, dtype)\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Failed copying input tensor from /job:localhost/replica:0/task:0/device:CPU:0 to /job:localhost/replica:0/task:0/device:TPU:0 in order to run _EagerConst: Element type C128 is not supported on TPU.\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/constant_op.py:102: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003546660000210977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006064029998924525,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9012483900000916,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030643600030089146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006551980000040203,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08434727800022301,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 161,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 255,
                        "message": "in idct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random9>, dct_type = 1, norm = None\nshape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/idct_test.py:161: in _compare\n    tf_idct = dct_ops.idct(signals, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:255: in idct\n    return _dct_internal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00040542300030210754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000604462999945099,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012540899997475208,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0020815980001316348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005886159997317009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3499282279999534,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003355090002514771,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006505470000774949,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.374236845999803,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003215430001546338,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
            "lineno": 86,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006105719999141002,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04833122799982448,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=0.01, atol=1e-11\nMismatched value: a is different from b. \nnot close where = (array([418]),)\nnot close lhs = [0.0047655]\nnot close rhs = [0.00470656]\nnot close dif = [5.893642e-05]\nnot close tol = [4.7065627e-05]\ndtype = float32, shape = (1000,)\nMismatched elements: 1 / 1000 (0.1%)\nMax absolute difference: 0.00011635\nMax relative difference: 0.01252218\n x: array([6.157359e-01, 1.035406e-01, 4.434267e-01, 4.795118e-01,\n       2.433577e-02, 2.681143e-01, 8.596003e-01, 6.771227e-01,\n       1.646579e-01, 7.134295e-01, 2.083564e-02, 1.703571e-01,...\n y: array([6.157417e-01, 1.035485e-01, 4.434308e-01, 4.795133e-01,\n       2.430058e-02, 2.680984e-01, 8.595904e-01, 6.771321e-01,\n       1.646430e-01, 7.134306e-01, 2.083021e-02, 1.703041e-01,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/igammac_test.py",
                        "lineno": 100,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.igammac_test.IgammacTest testMethod=testSmallValues0>, dtype = <class 'numpy.float32'>\nrtol = 0.01, atol = 1e-11\n\n    @parameterized.parameters((np.float32, 1e-2, 1e-11), (np.float64, 1e-4, 1e-30))\n    def testSmallValues(self, dtype, rtol, atol):\n        # rtol, atol = self.adjust_tolerance_for_tpu(dtype, rtol, atol)\n        # Test values near zero.\n        x = np.random.uniform(\n            low=np.finfo(dtype).tiny, high=1.0, size=[NUM_SAMPLES]\n        ).astype(dtype)\n        a = np.random.uniform(\n            low=np.finfo(dtype).tiny, high=1.0, size=[NUM_SAMPLES]\n        ).astype(dtype)\n    \n        expected_values = sps.gammaincc(a, x)\n        actual = _igammac(a, x)\n>       self.assertAllClose(expected_values, actual, atol=atol, rtol=rtol)\n\nsrc/tensorflow_tests_reduced/igammac_test.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.igammac_test.IgammacTest testMethod=testSmallValues0>\na = array([6.15735888e-01, 1.03540607e-01, 4.43426728e-01, 4.79511768e-01,\n       2.43357718e-02, 2.68114299e-01, 8.596003...67325e-01, 7.05970228e-01,\n       1.91320166e-01, 6.28332019e-01, 2.49883998e-02, 5.06186038e-02],\n      dtype=float32)\nb = array([6.15741730e-01, 1.03548527e-01, 4.43430781e-01, 4.79513288e-01,\n       2.43005753e-02, 2.68098354e-01, 8.595904...79886e-01, 7.05982208e-01,\n       1.91285551e-01, 6.28366590e-01, 2.49571204e-02, 5.06570339e-02],\n      dtype=float32)\nrtol = 0.01, atol = 1e-11, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=0.01, atol=1e-11\nE       Mismatched value: a is different from b. \nE       not close where = (array([418]),)\nE       not close lhs = [0.0047655]\nE       not close rhs = [0.00470656]\nE       not close dif = [5.893642e-05]\nE       not close tol = [4.7065627e-05]\nE       dtype = float32, shape = (1000,)\nE       Mismatched elements: 1 / 1000 (0.1%)\nE       Max absolute difference: 0.00011635\nE       Max relative difference: 0.01252218\nE        x: array([6.157359e-01, 1.035406e-01, 4.434267e-01, 4.795118e-01,\nE              2.433577e-02, 2.681143e-01, 8.596003e-01, 6.771227e-01,\nE              1.646579e-01, 7.134295e-01, 2.083564e-02, 1.703571e-01,...\nE        y: array([6.157417e-01, 1.035485e-01, 4.434308e-01, 4.795133e-01,\nE              2.430058e-02, 2.680984e-01, 8.595904e-01, 6.771321e-01,\nE              1.646430e-01, 7.134306e-01, 2.083021e-02, 1.703041e-01,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003330009999444883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005759600003329979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013654092000251694,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021537399970839033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005021490001126949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005548750000343716,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003725599999597762,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005604900002253999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041593700007069856,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00019956799997089547,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004576260002977506,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0267030830000294,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031054900000526686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006295329999375099,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5492330470001434,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002463.6743433,
                        "msecs": 674.3433475494385,
                        "relativeCreated": 489774.55282211304,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00033256300002904027,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
            "lineno": 91,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006614229996557697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05019561099970815,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/intersection_test.py",
                    "lineno": 180,
                    "message": "AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\""
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 94,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 180,
                        "message": "in _test_set_intersection_3d"
                    }
                ],
                "longrepr": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.intersection_test.SetOpsTest testMethod=test_set_intersection_3d_invalid_indices>\n\n    def test_set_intersection_3d_invalid_indices(self):\n        for dtype in _DTYPES:\n>           self._test_set_intersection_3d(dtype=dtype, invalid_indices=True)\n\nsrc/tensorflow_tests_reduced/intersection_test.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/intersection_test.py:180: in _test_set_intersection_3d\n    self._set_intersection(sp_a, sp_b)\nE   AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\""
            },
            "teardown": {
                "duration": 0.0003042030002688989,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006292929997471219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.47396836999996594,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00047214200003509177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007300360002773232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01723995299971648,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                    "lineno": 1397,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\n\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nCannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nAssign: CPU \nIsVariableInitialized: CPU TPU TPU_SYSTEM \nVariable: CPU TPU TPU_SYSTEM \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\n  IsVariableInitialized (IsVariableInitialized) /device:TPU:0\n  IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\n  Assign (Assign) /device:TPU:0\n\n\t [[{{node IsVariableInitialized}}]]\n\nOriginal stack trace for 'IsVariableInitialized':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n    test = variables.is_variable_initialized(v0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\n    return state_ops.is_variable_initialized(variable)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\n    return gen_state_ops.is_variable_initialized(ref=ref, name=name)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation("
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                        "lineno": 37,
                        "message": "in testIsVariableInitialized"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 991,
                        "message": "in eval"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 5798,
                        "message": "in _eval_using_default_session"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 2054,
                        "message": "in run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 968,
                        "message": "in run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1191,
                        "message": "in _run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1371,
                        "message": "in _do_run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1397,
                        "message": "InvalidArgumentError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nCannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nAssign: CPU \nIsVariableInitialized: CPU TPU TPU_SYSTEM \nVariable: CPU TPU TPU_SYSTEM \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\n  IsVariableInitialized (IsVariableInitialized) /device:TPU:0\n  IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\n  Assign (Assign) /device:TPU:0\n\n\t [[{{node IsVariableInitialized}}]]\n\nOriginal stack trace for 'IsVariableInitialized':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n    test = variables.is_variable_initialized(v0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\n    return state_ops.is_variable_initialized(variable)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\n    return gen_state_ops.is_variable_initialized(ref=ref, name=name)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002465.7414405,
                        "msecs": 741.4405345916748,
                        "relativeCreated": 491841.6500091553,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ],
                "longrepr": "self = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7f1d9e617130>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7f1d67e4a550>\nargs = ({}, [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7f1d6baed8f0>], [], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'IsVariableInitialized\\' defined at (most recent call last):\\n    File \"s...ized_1 (IsVariableInitialized) /device:TPU:0\\n  Assign (Assign) /device:TPU:0\\n\\n\\t [[{{node IsVariableInitialized}}]]'\nm = <re.Match object; span=(1621, 1653), match='[[{{node IsVariableInitialized}}'>\n\n    def _do_call(self, fn, *args):\n      try:\n>       return fn(*args)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfeed_dict = {}, fetch_list = [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7f1d6baed8f0>]\ntarget_list = [], options = None, run_metadata = None\n\n    def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):\n      # Ensure any changes to the graph are reflected in the runtime.\n>     self._extend_graph()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7f1d9e617130>\n\n    def _extend_graph(self):\n      with self._graph._session_run_lock():  # pylint: disable=protected-access\n>       tf_session.ExtendSession(self._session)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Assign: CPU \nE       IsVariableInitialized: CPU TPU TPU_SYSTEM \nE       Variable: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\nE         IsVariableInitialized (IsVariableInitialized) /device:TPU:0\nE         IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\nE         Assign (Assign) /device:TPU:0\nE       \nE       \t [[{{node IsVariableInitialized}}]]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1401: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.is_variable_initialized_test.VariableOpTest testMethod=testIsVariableInitialized>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/is_variable_initialized_test.py:37: in testIsVariableInitialized\n    state_ops.assign(v0, [[2.0, 3.0]]).eval()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:991: in eval\n    return _eval_using_default_session(self, feed_dict, self.graph, session)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:5798: in _eval_using_default_session\n    return session.run(tensors, feed_dict)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:2054: in run\n    return super().run(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:968: in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1191: in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1371: in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7f1d9e617130>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7f1d67e4a550>\nargs = ({}, [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7f1d6baed8f0>], [], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'IsVariableInitialized\\' defined at (most recent call last):\\n    File \"s...ized_1 (IsVariableInitialized) /device:TPU:0\\n  Assign (Assign) /device:TPU:0\\n\\n\\t [[{{node IsVariableInitialized}}]]'\nm = <re.Match object; span=(1621, 1653), match='[[{{node IsVariableInitialized}}'>\n\n    def _do_call(self, fn, *args):\n      try:\n        return fn(*args)\n      except errors.OpError as e:\n        message = compat.as_text(e.message)\n        m = BaseSession._NODEDEF_NAME_RE.search(message)\n        node_def = None\n        op = None\n        if m is not None:\n          node_name = m.group(3)\n          try:\n            op = self._graph.get_operation_by_name(node_name)\n            node_def = op.node_def\n          except KeyError:\n            pass\n        message = error_interpolation.interpolate(message, self._graph)\n        if 'only supports NHWC tensor format' in message:\n          message += ('\\nA possible workaround: Try disabling Grappler optimizer'\n                      '\\nby modifying the config for creating the session eg.'\n                      '\\nsession_config.graph_options.rewrite_options.'\n                      'disable_meta_optimizer = True')\n>       raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\nE       \nE       Detected at node 'IsVariableInitialized' defined at (most recent call last):\nE           File \"src/tensorflow_test.py\", line 98, in <module>\nE             retcode = pytest.main([sys.argv[1], \"-s\"])\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE             return wrap_session(config, _main)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE             session.exitstatus = doit(config, session) or 0\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE             config.hook.pytest_runtestloop(session=session)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE             runtestprotocol(item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE             reports.append(call_and_report(item, \"call\", log))\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE             call = call_runtest_hook(item, when, **kwds)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE             return CallInfo.from_call(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE             result: Optional[TResult] = func()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE             item.runtest()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE             self._testcase(result=self)  # type: ignore[arg-type]\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE             return self.run(*args, **kwds)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE             self._callTestMethod(testMethod)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE             method()\nE           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE             test = variables.is_variable_initialized(v0)\nE       Node: 'IsVariableInitialized'\nE       Detected at node 'IsVariableInitialized' defined at (most recent call last):\nE           File \"src/tensorflow_test.py\", line 98, in <module>\nE             retcode = pytest.main([sys.argv[1], \"-s\"])\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE             return wrap_session(config, _main)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE             session.exitstatus = doit(config, session) or 0\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE             config.hook.pytest_runtestloop(session=session)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE             runtestprotocol(item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE             reports.append(call_and_report(item, \"call\", log))\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE             call = call_runtest_hook(item, when, **kwds)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE             return CallInfo.from_call(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE             result: Optional[TResult] = func()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE             item.runtest()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE             self._testcase(result=self)  # type: ignore[arg-type]\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE             return self.run(*args, **kwds)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE             self._callTestMethod(testMethod)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE             method()\nE           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE             test = variables.is_variable_initialized(v0)\nE       Node: 'IsVariableInitialized'\nE       Cannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Assign: CPU \nE       IsVariableInitialized: CPU TPU TPU_SYSTEM \nE       Variable: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\nE         IsVariableInitialized (IsVariableInitialized) /device:TPU:0\nE         IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\nE         Assign (Assign) /device:TPU:0\nE       \nE       \t [[{{node IsVariableInitialized}}]]\nE       \nE       Original stack trace for 'IsVariableInitialized':\nE         File \"src/tensorflow_test.py\", line 98, in <module>\nE           retcode = pytest.main([sys.argv[1], \"-s\"])\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE           ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE           return wrap_session(config, _main)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE           session.exitstatus = doit(config, session) or 0\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE           config.hook.pytest_runtestloop(session=session)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE           runtestprotocol(item, nextitem=nextitem)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE           reports.append(call_and_report(item, \"call\", log))\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE           call = call_runtest_hook(item, when, **kwds)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE           return CallInfo.from_call(\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE           result: Optional[TResult] = func()\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE           item.runtest()\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE           self._testcase(result=self)  # type: ignore[arg-type]\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE           return self.run(*args, **kwds)\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE           self._callTestMethod(testMethod)\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE           method()\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\nE           return f(self, *args, **kwargs)\nE         File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE           test = variables.is_variable_initialized(v0)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\nE           return _add_should_use_warning(fn(*args, **kwargs),\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\nE           return state_ops.is_variable_initialized(variable)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\nE           return gen_state_ops.is_variable_initialized(ref=ref, name=name)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\nE           _, _, _op, _outputs = _op_def_library._apply_op_helper(\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\nE           op = g._create_op_internal(op_type_name, inputs, dtypes=None,\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\nE           ret = Operation(\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1397: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004326429998400272,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006456099999923026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000558446000013646,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00031431700017492403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006207659998835879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21502487700036,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002837870001712872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006394900001396309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20396282900037477,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029889100005675573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005997899997964851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004962059997524193,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003112509998572932,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
            "lineno": 46,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005794730000161508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22002845899987733,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 2, 3, 4]),)\nnot close lhs = [-0.1182904  -0.07006288 -0.30843028 -0.4436405 ]\nnot close rhs = [-0.11829388 -0.07006592 -0.30844239 -0.44358085]\nnot close dif = [3.47920406e-06 3.04441260e-06 1.21031736e-05 5.96516431e-05]\nnot close tol = [1.11829388e-06 1.07006592e-06 1.30844239e-06 1.44358085e-06]\ndtype = float32, shape = (6,)\nMismatched elements: 4 / 6 (66.7%)\nMax absolute difference: 5.96516431e-05\nMax relative difference: 0.00013448\n x: array([-0.11829 , -0.859814, -0.070063, -0.30843 , -0.443641, -0.693147],\n      dtype=float32)\n y: array([-0.118294, -0.859814, -0.070066, -0.308442, -0.443581, -0.693147])"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                        "lineno": 64,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002466.9294987,
                        "msecs": 929.4986724853516,
                        "relativeCreated": 493029.70814704895,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.log_survival_function_test.LaplaceTest testMethod=testLaplaceLogSurvivalFunction>\n\n    def testLaplaceLogSurvivalFunction(self):\n      batch_size = 6\n      loc = constant_op.constant([2.0] * batch_size)\n      scale = constant_op.constant([3.0] * batch_size)\n      loc_v = 2.0\n      scale_v = 3.0\n      x = np.array([-2.5, 2.5, -4.0, 0.1, 1.0, 2.0], dtype=np.float32)\n    \n      laplace = laplace_lib.Laplace(loc=loc, scale=scale)\n      timer = tensorflow_op_timer()\n      with timer:\n          sf = laplace.log_survival_function(x)\n          timer.gen.send(sf)\n      self.assertEqual(sf.get_shape(), (6,))\n      if not stats:\n        return\n      expected_sf = stats.laplace.logsf(x, loc_v, scale=scale_v)\n>     self.assertAllClose(self.evaluate(sf), expected_sf)\n\nsrc/tensorflow_tests_reduced/log_survival_function_test.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <src.tensorflow_tests_reduced.log_survival_function_test.LaplaceTest testMethod=testLaplaceLogSurvivalFunction>\na = array([-0.1182904 , -0.85981387, -0.07006288, -0.30843028, -0.4436405 ,\n       -0.6931472 ], dtype=float32)\nb = array([-0.11829388, -0.85981385, -0.07006592, -0.30844239, -0.44358085,\n       -0.69314718]), rtol = 1e-06, atol = 1e-06\nmsg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 2, 3, 4]),)\nE       not close lhs = [-0.1182904  -0.07006288 -0.30843028 -0.4436405 ]\nE       not close rhs = [-0.11829388 -0.07006592 -0.30844239 -0.44358085]\nE       not close dif = [3.47920406e-06 3.04441260e-06 1.21031736e-05 5.96516431e-05]\nE       not close tol = [1.11829388e-06 1.07006592e-06 1.30844239e-06 1.44358085e-06]\nE       dtype = float32, shape = (6,)\nE       Mismatched elements: 4 / 6 (66.7%)\nE       Max absolute difference: 5.96516431e-05\nE       Max relative difference: 0.00013448\nE        x: array([-0.11829 , -0.859814, -0.070063, -0.30843 , -0.443641, -0.693147],\nE             dtype=float32)\nE        y: array([-0.118294, -0.859814, -0.070066, -0.308442, -0.443581, -0.693147])\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.000414471000112826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006590540001525369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005390329997680965,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00029395499996098806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006357900001603412,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005280409995975788,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021454500028994516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004939049999848066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029005000001234293,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023842499967940967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005526000004465459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005660080000779999,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023856999996496597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005414399997789587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002089782999973977,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024284000028274022,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005481870002768119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004621150001185015,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00040682799999558483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006822870000178227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004220264000196039,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000239455999690108,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005512840002666053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004696450000665209,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00032034400010161335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006598359996132785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022505720000026486,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022624699977313867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005074170003354084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005717190001632844,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021563200016316841,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
            "lineno": 73,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004846359997827676,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4158745660001841,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateful_57923[_XlaMustCompile=true,config_proto=14098975582213336369,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFunc (No registered 'PyFunc' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateful_57918}}{{node PyFunc}}){{function_node __inference_numpy_func_stateful_57918}}{{node PyFunc}}\nOne approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\n\nThe op is created at: \nFile \"src/tensorflow_test.py\", line 98, in <module>\n  retcode = pytest.main([sys.argv[1], \"-s\"])\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n  ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n  return wrap_session(config, _main)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n  session.exitstatus = doit(config, session) or 0\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n  config.hook.pytest_runtestloop(session=session)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n  item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n  runtestprotocol(item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n  reports.append(call_and_report(item, \"call\", log))\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n  call = call_runtest_hook(item, when, **kwds)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n  return CallInfo.from_call(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n  result: Optional[TResult] = func()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n  lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n  item.runtest()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n  self._testcase(result=self)  # type: ignore[arg-type]\nFile \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n  return self.run(*args, **kwds)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n  self._callTestMethod(testMethod)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n  method()\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 96, in test_stateful\n  self.evaluate(func_stateful(\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 92, in func_stateful\n  sum1 = numpy_func_stateful(a, b)\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 86, in numpy_func_stateful\n  test = numpy_function(plus, [a, b], dtypes.int32, stateful=True) [Op:__inference_func_stateful_57923]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/numpy_function_test.py",
                        "lineno": 96,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 880,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 952,
                        "message": "in _call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 1745,
                        "message": "in _call_flat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 378,
                        "message": "in call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.numpy_function_test.NumpyFunctionTest testMethod=test_stateful>\n\n    def test_stateful(self):\n        call_count = 0\n    \n        def plus(a, b):\n            nonlocal call_count\n            call_count += 1\n            return a + b\n    \n        @def_function.function\n        def numpy_func_stateful(a, b):\n            timer = tensorflow_op_timer()\n            with timer:\n                test = numpy_function(plus, [a, b], dtypes.int32, stateful=True)\n                timer.gen.send(test)\n            return test\n    \n        @def_function.function\n        def func_stateful(a, b):\n            sum1 = numpy_func_stateful(a, b)\n            sum2 = numpy_func_stateful(a, b)\n            return sum1 + sum2\n    \n>       self.evaluate(func_stateful(\n            constant_op.constant(1),\n            constant_op.constant(2),\n        ))\n\nsrc/tensorflow_tests_reduced/numpy_function_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:880: in __call__\n    result = self._call(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:952: in _call\n    return self._concrete_variable_creation_fn._call_flat(   # pylint: disable=protected-access\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1745: in _call_flat\n    return self._build_call_outputs(self._inference_function.call(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:378: in call\n    outputs = execute.execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = '__inference_func_stateful_57923', num_outputs = 1\ninputs = [<tf.Tensor: shape=(), dtype=int32, numpy=1>, <tf.Tensor: shape=(), dtype=int32, numpy=2>]\nattrs = ('executor_type', '', 'config_proto', b'\\n\\x07\\n\\x03CPU\\x10\\x01\\n\\x07\\n\\x03GPU\\x10\\x00\\n\\x07\\n\\x03TPU\\x10\\x08\\n\\x0e\\n\\nTPU_SYSTEM\\x10\\x012\\x02J\\x008\\x01@\\x01\\x82\\x01\\x00')\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateful_57923[_XlaMustCompile=true,config_proto=14098975582213336369,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFunc (No registered 'PyFunc' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateful_57918}}{{node PyFunc}}){{function_node __inference_numpy_func_stateful_57918}}{{node PyFunc}}\nE                                           One approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\nE                                           \nE                                           The op is created at: \nE                                           File \"src/tensorflow_test.py\", line 98, in <module>\nE                                             retcode = pytest.main([sys.argv[1], \"-s\"])\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE                                             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE                                             return wrap_session(config, _main)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE                                             session.exitstatus = doit(config, session) or 0\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE                                             config.hook.pytest_runtestloop(session=session)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE                                             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE                                             runtestprotocol(item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE                                             reports.append(call_and_report(item, \"call\", log))\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE                                             call = call_runtest_hook(item, when, **kwds)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE                                             return CallInfo.from_call(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE                                             result: Optional[TResult] = func()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE                                             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE                                             item.runtest()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE                                             self._testcase(result=self)  # type: ignore[arg-type]\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE                                             return self.run(*args, **kwds)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE                                             self._callTestMethod(testMethod)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE                                             method()\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 96, in test_stateful\nE                                             self.evaluate(func_stateful(\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 92, in func_stateful\nE                                             sum1 = numpy_func_stateful(a, b)\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 86, in numpy_func_stateful\nE                                             test = numpy_function(plus, [a, b], dtypes.int32, stateful=True) [Op:__inference_func_stateful_57923]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038076400005593314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
            "lineno": 43,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006477890001406195,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.427926707000097,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateless_57943[_XlaMustCompile=true,config_proto=14098975582213336369,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFuncStateless (No registered 'PyFuncStateless' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateless_57938}}{{node PyFuncStateless_1}}){{function_node __inference_numpy_func_stateless_57938}}{{node PyFuncStateless_1}}\nOne approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\n\nThe op is created at: \nFile \"src/tensorflow_test.py\", line 98, in <module>\n  retcode = pytest.main([sys.argv[1], \"-s\"])\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n  ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n  return wrap_session(config, _main)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n  session.exitstatus = doit(config, session) or 0\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n  config.hook.pytest_runtestloop(session=session)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n  item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n  runtestprotocol(item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n  reports.append(call_and_report(item, \"call\", log))\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n  call = call_runtest_hook(item, when, **kwds)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n  return CallInfo.from_call(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n  result: Optional[TResult] = func()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n  lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n  item.runtest()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n  self._testcase(result=self)  # type: ignore[arg-type]\nFile \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n  return self.run(*args, **kwds)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n  self._callTestMethod(testMethod)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n  method()\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 66, in test_stateless\n  self.evaluate(func_stateless(\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 62, in func_stateless\n  sum1 = numpy_func_stateless(a, b)\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 58, in numpy_func_stateless\n  return numpy_function(plus, [a, b], dtypes.int32, stateful=False) [Op:__inference_func_stateless_57943]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/numpy_function_test.py",
                        "lineno": 66,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 880,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 952,
                        "message": "in _call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 1745,
                        "message": "in _call_flat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 378,
                        "message": "in call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.numpy_function_test.NumpyFunctionTest testMethod=test_stateless>\n\n    def test_stateless(self):\n        call_count = 0\n    \n        def plus(a, b):\n            nonlocal call_count\n            call_count += 1\n            return a + b\n    \n        @def_function.function\n        def numpy_func_stateless(a, b):\n            timer = tensorflow_op_timer()\n            with timer:\n                test = numpy_function(plus, [a, b], dtypes.int32, stateful=False)\n                timer.gen.send(test)\n            return numpy_function(plus, [a, b], dtypes.int32, stateful=False)\n    \n        @def_function.function\n        def func_stateless(a, b):\n            sum1 = numpy_func_stateless(a, b)\n            sum2 = numpy_func_stateless(a, b)\n            return sum1 + sum2\n    \n>       self.evaluate(func_stateless(\n            constant_op.constant(1),\n            constant_op.constant(2),\n        ))\n\nsrc/tensorflow_tests_reduced/numpy_function_test.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:880: in __call__\n    result = self._call(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:952: in _call\n    return self._concrete_variable_creation_fn._call_flat(   # pylint: disable=protected-access\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1745: in _call_flat\n    return self._build_call_outputs(self._inference_function.call(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:378: in call\n    outputs = execute.execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = '__inference_func_stateless_57943', num_outputs = 1\ninputs = [<tf.Tensor: shape=(), dtype=int32, numpy=1>, <tf.Tensor: shape=(), dtype=int32, numpy=2>]\nattrs = ('executor_type', '', 'config_proto', b'\\n\\x07\\n\\x03CPU\\x10\\x01\\n\\x07\\n\\x03GPU\\x10\\x00\\n\\x07\\n\\x03TPU\\x10\\x08\\n\\x0e\\n\\nTPU_SYSTEM\\x10\\x012\\x02J\\x008\\x01@\\x01\\x82\\x01\\x00')\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateless_57943[_XlaMustCompile=true,config_proto=14098975582213336369,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFuncStateless (No registered 'PyFuncStateless' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateless_57938}}{{node PyFuncStateless_1}}){{function_node __inference_numpy_func_stateless_57938}}{{node PyFuncStateless_1}}\nE                                           One approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\nE                                           \nE                                           The op is created at: \nE                                           File \"src/tensorflow_test.py\", line 98, in <module>\nE                                             retcode = pytest.main([sys.argv[1], \"-s\"])\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE                                             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE                                             return wrap_session(config, _main)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE                                             session.exitstatus = doit(config, session) or 0\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE                                             config.hook.pytest_runtestloop(session=session)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE                                             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE                                             runtestprotocol(item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE                                             reports.append(call_and_report(item, \"call\", log))\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE                                             call = call_runtest_hook(item, when, **kwds)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE                                             return CallInfo.from_call(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE                                             result: Optional[TResult] = func()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE                                             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE                                             item.runtest()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE                                             self._testcase(result=self)  # type: ignore[arg-type]\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE                                             return self.run(*args, **kwds)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE                                             self._callTestMethod(testMethod)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE                                             method()\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 66, in test_stateless\nE                                             self.evaluate(func_stateless(\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 62, in func_stateless\nE                                             sum1 = numpy_func_stateless(a, b)\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 58, in numpy_func_stateless\nE                                             return numpy_function(plus, [a, b], dtypes.int32, stateful=False) [Op:__inference_func_stateless_57943]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0005270940000627888,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007189520001702476,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19885776199998872,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030653399971924955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006332479997581686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010041599998658057,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031457000022783177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
            "lineno": 37,
            "outcome": "failed",
            "setup": {
                "duration": 0.00063975200009736,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03242383399992832,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 39,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_hash_bucket>\n\n    def test_seq_ex_in_sequence_categorical_column_with_hash_bucket(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_hash_bucket,\n          10, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034814700029528467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
            "lineno": 32,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005812710001009691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012117633999878308,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_identity>\n\n    def test_seq_ex_in_sequence_categorical_column_with_identity(self):\n>     self._test_parsed_sequence_example(\n          'int_list', sfc.sequence_categorical_column_with_identity,\n          10, [3, 6], [2, 4, 6])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x..., numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'int_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003363259997968271,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
            "lineno": 48,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005874690000382543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01274285499994221,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 53,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_file>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_file(self):\n      _, fname = tempfile.mkstemp()\n      with open(fname, 'w') as f:\n        f.write(string.ascii_lowercase)\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_file,\n          fname, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033261900034631253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
            "lineno": 42,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006038500000613567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011881707999691571,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_list>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_list(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_list,\n          list(string.ascii_lowercase), [3, 4],\n          [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00031941399993229425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005882369996470516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008427220000157831,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00037288900011844817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005857510000168986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043547199993554386,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00024150900026143063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005472850002661289,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6045123459998649,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030219700011002715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006252980001590913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.569231542000125,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003103850003753905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006658160000370117,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.661113314999966,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030275200015239534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006249820003176865,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005279020001580648,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003347919996485871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
            "lineno": 85,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005864249997102888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14530154300018694,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 122,
                    "message": "AssertionError: Native and compiled functions are not equivalent.\n\nNative results: None\nCompiled results: None\nNative out: None\nCompiled out: \nNative error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:StringFormat]\nCompiled error: NoneType: None\nNative call: multiple_prints(1, 2)\nCheck the logs for the generated code."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 87,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 169,
                        "message": "in assertFunctionMatchesEager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 122,
                        "message": "in assertResultsMatch"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_multiple_prints>\n\n    def test_multiple_prints(self):\n>       self.assertFunctionMatchesEager(multiple_prints, 1, 2)\n\nsrc/tensorflow_tests_reduced/print_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/reference_test_base.py:169: in assertFunctionMatchesEager\n    self.assertResultsMatch(f, args, native_data, compiled_data)\nsrc/tensorflow_tests_reduced/reference_test_base.py:122: in assertResultsMatch\n    self.fail('Native and compiled functions are not equivalent.\\n\\n'\nE   AssertionError: Native and compiled functions are not equivalent.\nE   \nE   Native results: None\nE   Compiled results: None\nE   Native out: None\nE   Compiled out: \nE   Native error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:StringFormat]\nE   Compiled error: NoneType: None\nE   Native call: multiple_prints(1, 2)\nE   Check the logs for the generated code."
            },
            "teardown": {
                "duration": 0.0002668319998520019,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005226070002208871,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004978500001016073,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021289500000420958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
            "lineno": 95,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046879399997123983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.058398983999722986,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 122,
                    "message": "AssertionError: Native and compiled functions are not equivalent.\n\nNative results: None\nCompiled results: None\nNative out: None\nCompiled out: \nNative error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:StringFormat]\nCompiled error: NoneType: None\nNative call: tf_print(0)\nCheck the logs for the generated code."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 169,
                        "message": "in assertFunctionMatchesEager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 122,
                        "message": "in assertResultsMatch"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_tf_print>\n\n    def test_tf_print(self):\n>       self.assertFunctionMatchesEager(tf_print, 0)\n\nsrc/tensorflow_tests_reduced/print_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/reference_test_base.py:169: in assertFunctionMatchesEager\n    self.assertResultsMatch(f, args, native_data, compiled_data)\nsrc/tensorflow_tests_reduced/reference_test_base.py:122: in assertResultsMatch\n    self.fail('Native and compiled functions are not equivalent.\\n\\n'\nE   AssertionError: Native and compiled functions are not equivalent.\nE   \nE   Native results: None\nE   Compiled results: None\nE   Native out: None\nE   Compiled out: \nE   Native error: InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:StringFormat]\nE   Compiled error: NoneType: None\nE   Native call: tf_print(0)\nE   Check the logs for the generated code."
            },
            "teardown": {
                "duration": 0.0003609860000324261,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
            "lineno": 41,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000617169000179274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032648700016579824,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 42, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020698900016213884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
            "lineno": 90,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004741819998343999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003002290000040375,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 91, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019784899996011518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
            "lineno": 182,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004600530000971048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028913599999214057,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 183, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00022166799999467912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
            "lineno": 220,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045883899974796805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002909350000663835,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 221, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019828000040433835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
            "lineno": 202,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045710099993812037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002899330002037459,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 203, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0001982670000870712,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
            "lineno": 269,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046144400039338507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029336399984458694,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 270, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0002069729998765979,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
            "lineno": 358,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000456529000075534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028526599999167956,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 359, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020471700008783955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
            "lineno": 109,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007822510001460614,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003162419998261612,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 110, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0001994579997699475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
            "lineno": 167,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004547009998532303,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002880379997804994,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 168, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00021678300026906072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
            "lineno": 140,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045801099986420013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029073500036247424,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 141, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019815399991784943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
            "lineno": 281,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004584819998854073,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002884189998439979,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 282, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020505300017248373,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
            "lineno": 318,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045878799983256613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002847430000656459,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 319, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00022153400004754076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
            "lineno": 335,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000453087000096275,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028693400008705794,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 336, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020975999996153405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
            "lineno": 302,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004498539997257467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028449199999158736,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 303, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019669599987537367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
            "lineno": 239,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044908300014867564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029467100011970615,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 240, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0001963559998330311,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
            "lineno": 64,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008232049999605806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029518299970732187,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 65, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020699099968624068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004572830002871342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028849599993918673,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0006134360000942252,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.000554794999970909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014006589999553398,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022022399980414775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005406759996731125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013855880001756304,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030110799980320735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
            "lineno": 23,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006146719997559558,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11692185499987318,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002760229999694275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005777600003966654,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1702482680002504,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002971639996758313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006061230001250806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024145427000348718,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023684699999648728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005395230000431184,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0370073730000513,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002619090000735014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.000591761999658047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009890337999877374,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023592100023961393,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
            "lineno": 70,
            "outcome": "passed",
            "setup": {
                "duration": 0.00054552599976887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07617271800017988,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002532170001359191,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
            "lineno": 54,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005341060000318976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11188320600012958,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002606259999993199,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005625680000775901,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008912089997465955,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004287990000193531,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005891569999221247,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00036875500018140883,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0002042490000349062,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004704010002569703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003285210000285588,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00019891300007657264,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0010308169999007077,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032561299985900405,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00022630399962508818,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
            "lineno": 175,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046424799984379206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003214280000065628,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/raw_rnn_test.py', 176, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020035199986523367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046125200015012524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003211499997632927,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.000223188999825652,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004627859998436179,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00033688700023049023,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020194600028844434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004623449999598961,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002754950000962708,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003868260000672308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005470840001180477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004567539999698056,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020014599977002945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004717420001725259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004359499998827232,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020614599998225458,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004515609998634318,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043350599980840343,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020277800012991065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045651999971596524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003969479998886527,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000316549000217492,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
            "lineno": 29,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009256200000891113,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.5403902950001793,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003160659998684423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006606499996451021,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028906489997098106,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00029579200008811313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006084000001465029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00526138599980186,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023452100003851228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005264950000309909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003471252000053937,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002255019999211072,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005157169998710742,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003911707000042952,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022375999969881377,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005042410002715769,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005047429999649466,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003552160001163429,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000594740999986243,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007724977999714611,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022392499977286207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005035180001868866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046540699986508116,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003056649998143257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005947999998170417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008072230002653669,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021474699997270363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005309749999469204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004380629998195218,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00030800000013186946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005986609999126813,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044005700010529836,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002771079998638015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
            "lineno": 443,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006114440002420451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06333974400013176,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022614900035478058,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005000090000066848,
                "outcome": "passed"
            },
            "call": {
                "duration": 22.040282084999944,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006951390000722313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.001131939000060811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0996602659997734,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031016699995234376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006642839998676209,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08919047400013369,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002731499998844811,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006209530001797248,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.5330631249999,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000635995999800798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010849870000129158,
                "outcome": "passed"
            },
            "call": {
                "duration": 30.620732297999893,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007300910001504235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011376439997548005,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.520182172999739,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003139219998047338,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006321959999695537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7066556970003148,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002913669995905366,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006320190000224102,
                "outcome": "passed"
            },
            "call": {
                "duration": 19.910905505999835,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007401389998449304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011161289999108703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37180350599965095,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029460900032063364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000626263999947696,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7153853079998953,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002948050000668445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005890540001018962,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7862683930002277,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002978090001306555,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000603679999585438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2928527959998064,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002944829998341447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005966549997538095,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.310739861000002,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003351639998072642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006448889998864615,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010237930000585038,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0007575310000902391,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005769519998466421,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07308664999982284,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024334099998668535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005874950002180412,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.048078323000027,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00036521299989544787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000734116999865364,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.542056143000082,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003569770001377037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007252440000229399,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.71703966699988,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005319759998201334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.001120586000070034,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.2660012179999285,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00037268899995979154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007849250000617758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3380794159998004,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003133499999421474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000776145000145334,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.690615014999821,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032741200038799434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006143169998722442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0891366430000744,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002954179999505868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000613304000125936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006365049998748873,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000482852000004641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
            "lineno": 649,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006117170000834449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12420042100029605,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026266899976690183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000595847000113281,
                "outcome": "passed"
            },
            "call": {
                "duration": 12.801345747000141,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007487660000151664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011981749998994928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.100771449000149,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003153940001539013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006824990000495745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20642784399979064,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002984739999192243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006629289996453736,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.509619286000088,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034892800022134907,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007368070000666194,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.77319928199995,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033525599974382203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006338069997582352,
                "outcome": "passed"
            },
            "call": {
                "duration": 23.951448373999938,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006496989999504876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011496750003061607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5422124789997724,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002964379996228672,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006345210003928514,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.358692794000035,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007500450001316494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011470780000308878,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.456948056999863,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007323120003093209,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0011908389997188351,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013854759999958333,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0007215929999802029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
            "lineno": 766,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006700909998471616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06440194500009966,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023703599981672596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
            "lineno": 795,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005394589998104493,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.049160688000029,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003206970000064757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006765799998902366,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1382967979998284,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028134800004409044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
            "lineno": 781,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006072080000194546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.40230438300022797,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030957099988881964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006864009997116227,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.495647315000042,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031315199976234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006262199999582663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.428982310000265,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002977399999508634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006213360002220725,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7616828169998371,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030188799973984715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000607914999818604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.45707958599996346,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003063190001739713,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
            "lineno": 773,
            "outcome": "passed",
            "setup": {
                "duration": 0.000589723999837588,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4700962819997585,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003178930001013214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006508270002996142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016491960000166728,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005494639999596984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
            "lineno": 883,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006839940001555078,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06417458499981876,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025265299973398214,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
            "lineno": 926,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005465629997161159,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0302662909998617,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035236400026406045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006776659997740353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13503063699999984,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002916100002039457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006278869996094727,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.38702808400012145,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030397899990930455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006482829999185924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5003583749999052,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002972900001623202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006183120003697695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.43383765799990215,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031537199993181275,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006266469999900437,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7460006450000947,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000296221999633417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006297889999586914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4473038410001209,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002971659996546805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
            "lineno": 898,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006237540001166053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7793040649999057,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003131640000901825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
            "lineno": 890,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006523719998767774,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4448680199998307,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003109560002485523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006701849997625686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015553279999949154,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005018169999857491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
            "lineno": 1024,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006317219999800727,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4641674680001415,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002999500002260902,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
            "lineno": 1016,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006487599998763471,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07217909799965128,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024205299996538088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
            "lineno": 1038,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005826460001117084,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.032940701999905286,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002215660001638753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000524162999681721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007457799997609982,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003429430003052403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
            "lineno": 1073,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006958429999031068,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4379039720001856,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032371499992223107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
            "lineno": 1065,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006580539998140011,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05715179399976478,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002755980003712466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
            "lineno": 1087,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005779590001111501,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05004328700033511,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025173700032610213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005535659997804032,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000813765000202693,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00033966099999815924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005937579999226728,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5114156680001543,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003149509998365829,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006240080001589376,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0939502729997912,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003511360000629793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000650774000405363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24892781200014724,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005240430000412744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006062600000404927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.32023519999984273,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029691199961234815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000590661999922304,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.745837093999853,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002947709999716608,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
            "lineno": 1167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005957759999546397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05564048199994431,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028281199956836645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006546909999087802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23682649199963635,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002879029998439364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005846139997629507,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37948340799994185,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028655699998125783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000599162999606051,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005046169999332051,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004690949999712757,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
            "lineno": 79,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006048939999345748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0810278260000814,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028461200008678134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006082949998926779,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09065790100021331,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028587399992829887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006189529999574006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08872256300037407,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030303399989861646,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006303089999164513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0083191280000392,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023748100011289353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005789870001535746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0810699769999701,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002728459999161714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
            "lineno": 153,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006139580000308342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27473424600020735,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030379300005733967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
            "lineno": 137,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006425760002457537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3547797750002246,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029340099990804447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005925730001763441,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08764644800021415,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030627300020569237,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006331680001494533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08033784099961849,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002912690001721785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
            "lineno": 118,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006390680000549764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06092950800029939,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026868099985222216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006026109999766049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.052560388000074454,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023702499993305537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005409899999904155,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07718288600017331,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002766959996733931,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
            "lineno": 250,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006104049998612027,
                "outcome": "passed"
            },
            "call": {
                "duration": 41.76151486700019,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.ResourceExhaustedError: {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:TPU:0}} XLA:TPU compile permanent error. Ran out of memory in memory space hbm. Used 23.28G of 15.48G hbm. Exceeded hbm capacity by 7.80G.\n\nTotal hbm usage >= 23.80G:\n    reserved        530.00M \n    program          23.28G \n    arguments            0B \n\nOutput size 0B; shares 0B with arguments.\n\nProgram hbm requirement 23.28G:\n    global             4.0K\n    HLO temp         23.28G (30.0% utilization: Unpadded (6.98G) Padded (23.28G), 0.0% fragmentation (29.0K))\n\n  Largest program allocations in hbm:\n\n  1. Size: 18.63G\n     Shape: pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 16.30G (8.0x expansion)\n     XLA label: reshape.3 = reshape(dynamic-slice)\n     Allocation type: HLO temp\n     ==========================\n\n  2. Size: 2.33G\n     Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 768B (1.0x expansion)\n     XLA label: reshape.1 = reshape(arg0.1)\n     Allocation type: HLO temp\n     ==========================\n\n  3. Size: 2.33G\n     Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 768B (1.0x expansion)\n     XLA label: dynamic-slice = dynamic-slice(get-tuple-element.22, add), dynamic_slice_sizes={2500000000}\n     Allocation type: HLO temp\n     ==========================\n\n  4. Size: 4.0K\n     Shape: (u32[]{:T(256)}, pred[2500000000]{0:T(1024)(128)(4,1)}, pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)})\n     Unpadded size: 4.0K\n     XLA label: tuple.5 = tuple(copy.8, reshape.1, broadcast)\n     Allocation type: HLO temp\n     ==========================\n\n  5. Size: 4.0K\n     Shape: u32[8,128]{1,0}\n     Unpadded size: 4.0K\n     XLA label: constant literal\n     Allocation type: global\n     ==========================\n\n\n\t [[{{node Reshape}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:Reshape]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reshape_test.py",
                        "lineno": 263,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 199,
                        "message": "in reshape"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 8546,
                        "message": "in reshape"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 8571,
                        "message": "in reshape_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "ResourceExhaustedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.reshape_test.ReshapeTest testMethod=testInt64Shape>\n\n    def testInt64Shape(self):\n      # with ops.device(\"/device:CPU:0\"):\n      x = array_ops.zeros([50000, 50000], dtype=dtypes.bool)\n      # Provide dimension larger than int32\n      timer = tensorflow_op_timer()\n      with timer:\n        y = array_ops.reshape(x, [50000**2])\n        timer.gen.send(y)\n      self.assertEqual([50000**2], y.get_shape().as_list())\n      # Even if first dimension is within int32, ensure we correctly go to int64\n      timer = tensorflow_op_timer()\n      with timer:\n>       y = array_ops.reshape(x, [1, 50000**2])\n\nsrc/tensorflow_tests_reduced/reshape_test.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:199: in reshape\n    result = gen_array_ops.reshape(tensor, shape, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:8546: in reshape\n    return reshape_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:8571: in reshape_eager_fallback\n    _result = _execute.execute(b\"Reshape\", 1, inputs=_inputs_flat, attrs=_attrs,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'Reshape', num_outputs = 1\ninputs = [<tf.Tensor: shape=(50000, 50000), dtype=bool, numpy=\narray([[False, False, False, ..., False, False, False],\n       [...alse, False, ..., False, False, False]])>, <tf.Tensor: shape=(2,), dtype=int64, numpy=array([         1, 2500000000])>]\nattrs = ('T', 10, 'Tshape', 9), ctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.ResourceExhaustedError: {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:TPU:0}} XLA:TPU compile permanent error. Ran out of memory in memory space hbm. Used 23.28G of 15.48G hbm. Exceeded hbm capacity by 7.80G.\nE                                           \nE                                           Total hbm usage >= 23.80G:\nE                                               reserved        530.00M \nE                                               program          23.28G \nE                                               arguments            0B \nE                                           \nE                                           Output size 0B; shares 0B with arguments.\nE                                           \nE                                           Program hbm requirement 23.28G:\nE                                               global             4.0K\nE                                               HLO temp         23.28G (30.0% utilization: Unpadded (6.98G) Padded (23.28G), 0.0% fragmentation (29.0K))\nE                                           \nE                                             Largest program allocations in hbm:\nE                                           \nE                                             1. Size: 18.63G\nE                                                Shape: pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 16.30G (8.0x expansion)\nE                                                XLA label: reshape.3 = reshape(dynamic-slice)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             2. Size: 2.33G\nE                                                Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 768B (1.0x expansion)\nE                                                XLA label: reshape.1 = reshape(arg0.1)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             3. Size: 2.33G\nE                                                Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 768B (1.0x expansion)\nE                                                XLA label: dynamic-slice = dynamic-slice(get-tuple-element.22, add), dynamic_slice_sizes={2500000000}\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             4. Size: 4.0K\nE                                                Shape: (u32[]{:T(256)}, pred[2500000000]{0:T(1024)(128)(4,1)}, pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)})\nE                                                Unpadded size: 4.0K\nE                                                XLA label: tuple.5 = tuple(copy.8, reshape.1, broadcast)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             5. Size: 4.0K\nE                                                Shape: u32[8,128]{1,0}\nE                                                Unpadded size: 4.0K\nE                                                XLA label: constant literal\nE                                                Allocation type: global\nE                                                ==========================\nE                                           \nE                                           \nE                                           \t [[{{node Reshape}}]]\nE                                           Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\nE                                            [Op:Reshape]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: ResourceExhaustedError"
            },
            "teardown": {
                "duration": 0.00041125200004898943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006226719997357577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01607140000032814,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002179210000576859,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004847629998039338,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05204222699967431,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002455819999340747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005578129998866643,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06898124800000005,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027554300004339893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
            "lineno": 126,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006134810000730795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04995235099977435,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024031299972193665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005319649999364628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04929251900011877,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024365900026168674,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
            "lineno": 162,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005685900000571564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.044358542999816564,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021809899999425397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005220640000516141,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008014740001272003,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0006947219999346999,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005735350000577455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004351070001575863,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00025184700007230276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005513619998964714,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14729597400037164,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002804.295885,
                        "msecs": 295.8850860595703,
                        "relativeCreated": 830396.0945606232,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002804.354016,
                        "msecs": 354.0160655975342,
                        "relativeCreated": 830454.2255401611,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002804.3634615,
                        "msecs": 363.4614944458008,
                        "relativeCreated": 830463.6709690094,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002804.3727887,
                        "msecs": 372.788667678833,
                        "relativeCreated": 830472.9981422424,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002804.382162,
                        "msecs": 382.16209411621094,
                        "relativeCreated": 830482.3715686798,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002804.3914557,
                        "msecs": 391.45565032958984,
                        "relativeCreated": 830491.6651248932,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002650749997883395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005465730000651092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000620481000169093,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028387700012899586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005646659997182724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047004499992908677,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020974900007786346,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
            "lineno": 1812,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004743929998767271,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18790323499979422,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000274316999821167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005644500001835695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005463960001179657,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002160509998248017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005077549999441544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004565000003822206,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020538900025712792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
            "lineno": 1200,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046464499973808415,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03765603900001224,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023583899974255473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005151679997652536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004967370000485971,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022128999989945441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
            "lineno": 1496,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005278130001897807,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007772774999921239,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022810500013292767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005349060002117767,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0029976420000821236,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002358780002396088,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
            "lineno": 1175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005115710000609397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03477333099999669,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023289000000659144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
            "lineno": 1147,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005125500001668115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03663500299990119,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003016610003214737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
            "lineno": 1127,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005405550000432413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01518125400025383,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023614700012331014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
            "lineno": 1509,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005197360001147899,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.673578679000002,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029155900028854376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
            "lineno": 1788,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005884679999326181,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003912018999926659,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002197049998358125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
            "lineno": 1598,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005042719999437395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004980870000053983,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020895500028927927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
            "lineno": 988,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046358000008694944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01962034300004234,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000242644000081782,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
            "lineno": 1086,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005226469997978711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01635438499988595,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002349579999645357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
            "lineno": 1611,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005419520002760692,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004805091999969591,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002279959999214043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
            "lineno": 1795,
            "outcome": "passed",
            "setup": {
                "duration": 0.000506550999944011,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020515037000222947,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002144140003110806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
            "lineno": 823,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004733780001515697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01993551399982607,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023517099998571211,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005318099997566605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0250022719997105,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026685000011639204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
            "lineno": 867,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005343590000848053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022299789000044257,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023620799993295805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
            "lineno": 757,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005357820000426727,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022421639000185678,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023411199981637765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005233110000517627,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005317210002431239,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002375900003244169,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
            "lineno": 1663,
            "outcome": "passed",
            "setup": {
                "duration": 0.000513723000040045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027849397999943903,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023270200017577736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
            "lineno": 241,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005129309997755627,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008083084000190865,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022746600006939843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
            "lineno": 937,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005207670001254883,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012841729000228952,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022607699975196738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
            "lineno": 1036,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005170770000404445,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011609664999923552,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022921600020708865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.000521657000263076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021525005000057718,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023453199992218288,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
            "lineno": 217,
            "outcome": "passed",
            "setup": {
                "duration": 0.000515390999680676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008254660999682528,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022902799992152723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005074799996691581,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005186440002944437,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00023477500008084462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.000536424999609153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006370253999648412,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002359519999117765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
            "lineno": 391,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005425680001280853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01135997099981978,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023970999973244034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
            "lineno": 132,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005187329998079804,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003351468000346358,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002804740001920436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
            "lineno": 643,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005977440000606293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016488303000187443,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024908600016715354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
            "lineno": 256,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005156180000085442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007336691999626055,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022865800019644666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
            "lineno": 603,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005102579998492729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06313839899985396,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021738100031143404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047729800007800804,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007095268000284705,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002075170000352955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
            "lineno": 166,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046460299972750363,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0066951329999938025,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002057480000985379,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
            "lineno": 658,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004602730000442534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01972856900010811,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023351199979515513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
            "lineno": 552,
            "outcome": "passed",
            "setup": {
                "duration": 0.00051835000022038,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01732665999998062,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022976300033406005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
            "lineno": 200,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005512389998330036,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011671623999973235,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021316700031093205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
            "lineno": 1760,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004602120002346055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01086508899970795,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002129959998455888,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046335800016095163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005600130002676451,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020318899987614714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
            "lineno": 1574,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005033669999647827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.043618861000140896,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002156569998987834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004880559999946854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004825019996133051,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002071869998871989,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045593000004373607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000455418000001373,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002015280001614883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045075199977873126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004411059999256395,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0006967389999772422,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004658249999920372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004447510000318289,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020102299959035008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
            "lineno": 1338,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004447880000952864,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06590210200010915,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002922909998233081,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005743500000789936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.048099875999923825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025838200008365675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
            "lineno": 1629,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006053199999769276,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08920352599989201,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024180199989132234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005386399998315028,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005704760001208342,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020855599996139063,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
            "lineno": 1372,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004664000002776447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006027537000136363,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000234355999964464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
            "lineno": 1381,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005263000002742046,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10804892399983146,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002555820001362008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
            "lineno": 1401,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005217839998294949,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002814697999838245,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002061949999188073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004735219999929541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047387499989781645,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014869619999444694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
            "lineno": 101,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005718910001633049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2099983630000679,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002989550002894248,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
            "lineno": 41,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006666859999313601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005390277999595128,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023658700001760735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005455320001601649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10445911300030275,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027560899980016984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.000580424999952811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013922740999987582,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002571949999037315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
            "lineno": 68,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005394309996518132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019823872000415577,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022805000025982736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005153930001142726,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.172070335999706,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028859699978056597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006183659997986979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1748901890000525,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029909300019426155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006347440003082738,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013776420000795042,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004997730002287426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006530850000672217,
                "outcome": "passed"
            },
            "call": {
                "duration": 86.85180825599991,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006817369999225775,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011550419999366568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2968744719996721,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034680599992498173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006374949998644297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0070403509998868685,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000216729000385385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005000399996788474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11332092600014221,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\n\t [[{{node set_diag}}]]\n\t [[set_diag]]\n\t [[set_diag/_5]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\n\t [[{{node set_diag}}]]\n\t [[set_diag]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002894.26778,
                        "msecs": 267.780065536499,
                        "relativeCreated": 920367.9895401001,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1]]\n\t [[set_diag_1/_11]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002894.3168814,
                        "msecs": 316.8814182281494,
                        "relativeCreated": 920417.0908927917,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2]]\n\t [[set_diag_2/_19]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002894.337489,
                        "msecs": 337.48888969421387,
                        "relativeCreated": 920437.6983642578,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00029661300004590885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005891509999855771,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.4480601019999995,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030437099985647365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006136850001894345,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9707855139999992,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031962100001692306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006660019998889766,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.080935934000081,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031325000009019277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006076120002944663,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.593964330999825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003333319996272621,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006464500002039131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000907283999822539,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004901519996565185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
            "lineno": 74,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006314570000540698,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007881217999965884,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 80,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards>\n\n    def testIndexEqualsNumShards(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 4)\n\nsrc/tensorflow_tests_reduced/shard_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037445599991769996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
            "lineno": 86,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006702430000586901,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006645134999871516,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 92,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards2>\n\n    def testIndexEqualsNumShards2(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(4, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003704800001287367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006582440000784118,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004234405999795854,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIteratorEndsBeforeFirstElem>\n\n    def testIteratorEndsBeforeFirstElem(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(1)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035511099986251793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006630810003116494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004219111999645975,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 68,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testLargerWorkerPool>\n\n    def testLargerWorkerPool(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(7, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036686200019175885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
            "lineno": 110,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005987660001665063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004157678999945347,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 116,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testName>\n\n    def testName(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(1, 0, name=\"shard\")\n\nsrc/tensorflow_tests_reduced/shard_test.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000359711999863066,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
            "lineno": 27,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006519909998132789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00499256900002365,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ZipDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1259,
                        "message": "in zip"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 4956,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 8383,
                        "message": "in zip_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNestedData>\n\n    def testNestedData(self):\n      with tf.device(\"cpu\"):\n          dataset_a = dataset_ops.Dataset.range(10)\n          dataset_b = dataset_ops.Dataset.range(10, 0, -1)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset_ops.Dataset.zip((dataset_a, dataset_b)).shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1259: in zip\n    return ZipDataset(datasets, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4956: in __init__\n    variant_tensor = gen_dataset_ops.zip_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:8383: in zip_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ZipDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000402527000005648,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
            "lineno": 98,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006512850000035542,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007961932999933197,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 104,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNumShardsLargerThanDataset>\n\n    def testNumShardsLargerThanDataset(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(20, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003568770002857491,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
            "lineno": 38,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006495170000562211,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004289037000035023,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testOffsetZero>\n\n    def testOffsetZero(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003648899996733235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
            "lineno": 16,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006468030001087754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004242861000420817,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 23,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testSimpleCase>\n\n    def testSimpleCase(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003785660001085489,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0011594379998314253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007558180000160064,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005221459996391786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006097290001889633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004927119998683338,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002237150001747068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005102509999233007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011638229998425231,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_2>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66d8a430>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0002420979999442352,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000496598999689013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009563439998601098,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_5>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00023661600016566808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005008809998798824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008739059999243182,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_2>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00024316999997608946,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005080430000816705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008488349999424827,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_5>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b341f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0002450799997859576,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005139059999237361,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008802860002106172,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_2>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b34160>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00025204699977621203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005083619998913491,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008489359997838619,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_5>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b34820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0002373650004301453,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004916329999105074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008442240000476886,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_2>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787430>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00023705699959464255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005008789999010332,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008431599999312311,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_5>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f040>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.0005077989999335841,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
            "lineno": 163,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005981770000289544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004439437999735674,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 170,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testEmptyDataset>\n\n    def testEmptyDataset(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.from_tensor_slices([])\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(\n          num_shards=2, index=1)\n\nsrc/tensorflow_tests_reduced/shard_test.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003607799999372219,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000678911000250082,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004418941000039922,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_1>\nkwargs = {'index': -1}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035885499983123736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000667395000164106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004392628000005061,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_2>\nkwargs = {'index': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b34b80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003628749996096303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006565619996763417,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004727505000118981,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_3>\nkwargs = {'index': 3}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036526100029732333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006029510000189475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004358077999768284,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_4>\nkwargs = {'index': 4}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3fee0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036740900031873025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006627349998780119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004383351000342373,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_10>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003739660000974254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006764769996152609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00437969599988719,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_5>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038026399988666526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007016630001999147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0043384900000091875,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_7>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003868560002047161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006952139997338236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044058860003133304,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_10>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67787940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037931899987597717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006879880002088612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004546065999875282,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_5>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003679370001918869,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007021229998827039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005045233000146254,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_7>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67fd00d0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037041799987491686,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006891420002830273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004666254999847297,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_10>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e954c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038490399992952007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006166490002215141,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004566442999930587,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_5>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e953a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003629110001384106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006505639998977131,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004576055000143242,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_7>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e951f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003769139998439641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006463989998337638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00449140399996395,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_10>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003637619997789443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006602470002690097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004518427000220981,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_5>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e951f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036400299995875685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007069340003909019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004654478000247764,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_7>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037722299975939677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006706299996039888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00500752600009946,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_10>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67fc7a60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035629200010589557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006519579997075198,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004495217000112461,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_5>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d667644c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00040029799993135384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006163510001897521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004583766999985528,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_7>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e951f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003796259998125606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006794049995733076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004548751000129414,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_10>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e79280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000400210999941919,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006853670001873979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045842109998375236,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_5>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67b3f3a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037827599999218364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006699999999000283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004604824000125518,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_7>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67fc7550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003606129998843244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000691996000114159,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004605653999988135,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_10>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67fc7280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036394500011738273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006802900002185197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004622055999789154,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_5>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67f4a5e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003656000003502413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006757890000699263,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045887589999438205,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_7>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e79700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035972700015918235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006589910003640398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045290890002434026,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_10>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e799d0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035935300002165604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006641009999839298,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004566616999909456,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_5>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67f4a5e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003645439996944333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006609179999941261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045404259999486385,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_7>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6675b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003485279999040358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006530279997605248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004528979000042455,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_10>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66015430>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003664549999484734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00062390300035986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004496869999911723,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_5>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d67e79700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003855109998767148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006675949998680153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004514006000135851,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_7>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f790>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000364134999927046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007010170002104132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004519256000094174,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_10>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6675b280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037673099996027304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006670789998679538,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004467071999897598,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_5>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003660919996946177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006695140000374522,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004479337999782729,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_7>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f790>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037379800005510333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006726830001753115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045052270002088335,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_10>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036078499988434487,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006658059996880183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004526947000158543,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_5>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f790>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000357968999651348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006799479997425806,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044478190002337215,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_7>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6779ce50>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034217500024169567,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006948649997866596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044850740000583755,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_10>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6675b430>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003586500001802051,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005909080000492395,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044303409999884025,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_5>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6600f280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037601399981213035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007091160000527452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0045293529997252335,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_7>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6675b430>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035648899984153104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006996849997449317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004480783999952109,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_10>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003561720000107016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006728069997734565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004546175000086805,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_5>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6779c700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000384367000151542,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006787669999539503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004442724000000453,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_7>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036649000003308174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006731319999744301,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044489300003078824,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_10>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6779c700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003559790002327645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006618229999730829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004456151000340469,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_5>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6674f820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003540719999364228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006242019999262993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004622756999651756,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_7>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66ce6670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003486030000203755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006640629999310477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004556627000056324,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_10>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6779c700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003793619998759823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006105880001996411,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004525057999671844,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_5>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d66d01550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039003300025797216,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006718839999848569,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004532872000254429,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_7>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7f1eabfe8490>, should_execute = True\nreason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7f1d6779c700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037617999987560324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
            "lineno": 213,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006747489996996592,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008011915999759367,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 220,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexGreaterThanNumElements>\n\n    def testNumShardsAndIndexGreaterThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(13)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(23, 21)\n\nsrc/tensorflow_tests_reduced/shard_test.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036376000025484245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006830570000602165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004368905000319501,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 187,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexLessThanNumElements>\n\n    def testNumShardsAndIndexLessThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035413400019024266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
            "lineno": 197,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006806050000705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00676349500008655,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 204,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsGreaterThanNumElementsIndexLess>\n\n    def testNumShardsGreaterThanNumElementsIndexLess(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(7)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(8, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003791529998125043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007204069997897022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000861291999626701,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001559230000111711,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005972580001980532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005531390002033731,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021607700000458863,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047778500038475613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13765068099974087,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002956.3791046,
                        "msecs": 379.1046142578125,
                        "relativeCreated": 982479.3140888214,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002867659995899885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005903780001972336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012347150000096008,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000217196999983571,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005049179999332409,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08840042400015591,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000234589999763557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005053439999755938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005106180001348548,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020285299979150295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005158409999239666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0863041779998639,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000229475000196544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005670040000040899,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010239329999421898,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021611400006804615,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004813359996660438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16709099899981084,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028133400019214605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005973040001663321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008426189997408073,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002209059998676821,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004663820000132546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08568950700009736,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023386500015476486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005218050000621588,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010749779999059683,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021941100021649618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047797599972909666,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16776187400000708,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028621899991776445,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005962100003671367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005752820002271619,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002123819999724219,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004730069999823172,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08732662100010202,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022620399977313355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004973690001861542,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009647900001255039,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002090769999085751,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004685200001404155,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16935392000004867,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027464699996926356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005931890000283602,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007467130003533384,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002091289998134016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004731660001198179,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047632530000100815,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022729000011167955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005457450001813413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010448610000821645,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021186999993005884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048267100009979913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1207006309996359,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028100000008635106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005680720000782458,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005788379999103199,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002098509999086673,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005021839997425559,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08638004200020077,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022989300032350002,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005480539998643508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010203669999100384,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020844999971814104,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046972799964351,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1717267690000881,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027186300030734856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005648030000884319,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007408540000142239,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021034900009908597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047308800003520446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03260419400021419,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021075699987704866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004729830002361268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008892969999578781,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021585600006801542,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004895089996352908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05211324800029615,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023444299995389883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005040880000706238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006802480002079392,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020507399995040032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004955099998369406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12306579500000225,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028463500029829447,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005638900001940783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011790180001298722,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002148769999621436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005085769998913747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1925125519996982,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002879610001400579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005820860001222172,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005822210000587802,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021246699998300755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047496600018348545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04997295100019983,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000211763000152132,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004902239998045843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009750970002642134,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002134690003003925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000468925999939529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08487560100002156,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002416920001451217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005085839998173469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006220969999048975,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020312100014052703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004731409999294556,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0863466169998901,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000231223000355385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005245030001788109,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010838700000022072,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020897000013064826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004730639998342667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16994992100035233,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002754890001597232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005626939996545843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005772039999101253,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021304799975041533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004991800001334923,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15678510899988396,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029721200007770676,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006276800004343386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001424391000000469,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021513799993044813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004839769999307464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17351210699962394,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003086820001954038,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006243269999686163,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005608980000033625,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013226410001152544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005821700001433783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043237999989287346,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021514199988814653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004674299998441711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008875369999259419,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020804599989787675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045627400004377705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008047139999689534,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020543899972835789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004591150000123889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007562689997939742,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021227900015219348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004552069999590458,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007141170003706065,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021461899996211287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004517209999903571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007133599997359852,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002032490001511178,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008601089998592215,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12557569999989937,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002836669996213459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005631490002997452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16081332700014173,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027322200003254693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000614528999903996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5672758699997758,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029079000023557455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000583119999646442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002917898999839963,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.00024072700034594163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000497824999911245,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16248434799990719,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028699099993900745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005859600000803766,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002654846000041289,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022211900022739428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004892759998256224,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010065229998872383,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002086640001834894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004660479999074596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007401520001621975,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002065959997707978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005050529998698039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007036079996396438,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020561800010909792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046684000017194194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007261210002980079,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020993800035284949,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008259010000983835,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3946832049996374,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:514: make_saveable_from_iterator (from tensorflow.python.data.experimental.ops.iterator_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\n`make_saveable_from_iterator` is intended for use in TF1 with `tf.compat.v1.Saver`. In TF2, use `tf.train.Checkpoint` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002960.090666,
                        "msecs": 90.66605567932129,
                        "relativeCreated": 986190.8755302429,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.000324761999763723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006779040004403214,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5718703310003548,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029950399994049803,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006392079999386624,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.417906280999887,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003069340000365628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006233930002963461,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5849527489999673,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002970419996017881,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006122730001152377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5625462470002276,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0008321289997184067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
            "lineno": 36,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007207540002127644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12687047999997958,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002964.6526847,
                        "msecs": 652.6846885681152,
                        "relativeCreated": 990752.8941631317,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002964.6529484,
                        "msecs": 652.9483795166016,
                        "relativeCreated": 990753.1578540802,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002964.7068257,
                        "msecs": 706.8257331848145,
                        "relativeCreated": 990807.0352077484,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002793959997688944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005870499999218737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005120030000398401,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028737100001308136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005781390000265674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01137041100037095,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000223946000005526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005010919999222097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008341832000041904,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021954300018478534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
            "lineno": 102,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005000690002816555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0028044539999427798,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021902900016357307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005338900000424474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00276107099989531,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021744900004705414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004984529996363563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.058765305999713746,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025018200039994554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005413889998635568,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008447154999885242,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022235300002648728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005146670000613085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06599958900005731,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002788379997582524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005892130002393969,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005453529997794249,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00046518599992850795,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006261520002226462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11151500200003284,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003086649999204383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006658180000158609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005482560000018566,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003132990000267455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006178349999572674,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.686019708999993,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006998079998083995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011905189999197319,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15775151099978757,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035624900010589045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006861000001663342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1441754239999682,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003507840001475415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007230229998640425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21432450199972664,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030507900009979494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006610410000575939,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31486789300015516,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003114559999630728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006455769998865435,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1144388389998312,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031977200023902697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006938569999874744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007301489999917976,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004999780003345222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007266540001182875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1640522300003795,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003324130002511083,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007347189998654358,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005966949997855409,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003484580001895665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006937749999451626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004670166000323661,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025611899991417886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005695580002793577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0037600639998345287,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024219899978561443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005667619998348528,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003690727000048355,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002660280001691717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005635989996335411,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003683244000058039,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025234700024157064,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000564944999950967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004155878999881679,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002581069998086605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005619319999823347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0037742660001640616,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002426559999548772,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005487759999596165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003587764999792853,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002523789999031578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005661939999299648,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004119201999856159,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025473000005149515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005612240001937607,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004712449999715318,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005226619996392401,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007032389999039879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5178224010001031,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033021099989127833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006568789999619185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.849736263000068,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031582499968862976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006531849999191763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6739524909999091,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003267850001975603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006595019999622309,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005462559997795324,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00037522100001297076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006636620000790572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005035510002926458,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00026553099996817764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006110250001256645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017495617999884416,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test0>, size = None\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(0,), dtype=int32, numpy=array([], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.0003524710000419873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006252540001696616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006779954999728943,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test1>, size = ()\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(0,), dtype=int32, numpy=array([], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.00029239700006655767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005629099996440345,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01651585800027533,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1]{0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test2>, size = (1,)\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(1,), dtype=int32, numpy=array([1], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1]{0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.00030299699983515893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006408120002561191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016130706999774702,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1,2]{1,0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test3>, size = (1, 2)\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7f1eab410f40>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1,2]{1,0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.0003008499998031766,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005789619999632123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008171149997906468,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003895760000887094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006311980000646145,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.6517449510001825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003321530002722284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006877840000925062,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.962789487000009,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032305000013366225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 58,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006552539998665452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5207239349997508,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003182850000484905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006041749998075829,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009244349998880352,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003459539998402761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006544839998241514,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14778444500007026,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029412000003503636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006295090001913195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14355070700003125,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002764340001704113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
            "lineno": 112,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005836310001541278,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.4502066289996947,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035613699992609327,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006506679997073661,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12553702099967268,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032250000003841706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006007889996908489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009862070000963286,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00038192800002434524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006184379999467637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043764799966083956,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002535950002311438,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005529459999706887,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004038699999000528,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00027172299996891525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005725299997720867,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1900658940003268,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034031999985018047,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006581809998351673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021055449999948905,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003635010002653871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006625350001741026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5063781969997763,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003266839999014337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006548329997713154,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.271934771999895,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003224189999855298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.000670377999995253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4005385780001234,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031131400010053767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006417229997168761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1344961320000948,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030292100018414203,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006366520001392928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.34881197200002134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031838900031289086,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006334970003081253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014191569998729392,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004815239999516052,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006312609998531116,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5885988440004439,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003343630000927078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006667019997621537,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05387296300023081,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003167210002175125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006441130003622675,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01990658299973802,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorDeterminismTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038163799990798,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.000660845000311383,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2761488359997202,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003335960000185878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006880989999444864,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12071921899996596,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002854049998859409,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006727929999215121,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2773896590001641,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031209600001602666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.000641440999970655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06588018200000079,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027829800001200056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006253750002542802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17534411799988447,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002938569996331353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006163210000522668,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001252388000011706,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005031609998695785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.000637664999885601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006644731000051252,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022206399989954662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005132729997967544,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005657970000356727,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00030245399966588593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
            "lineno": 169,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006101260000832553,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027092107000044052,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/convert_to_constants.py:943: extract_sub_graph (from tensorflow.python.framework.graph_util_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1684002990.4704554,
                        "msecs": 470.4554080963135,
                        "relativeCreated": 1016570.6648826599,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00024065800016614958,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005372339996938535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004735869997603004,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003007770001204335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
            "lineno": 87,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006294340000749798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006090411000059248,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022277699963524356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005126490000293416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005513452000286634,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023430600003848667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
            "lineno": 92,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005124900003465882,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00944726299985632,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022729300007995334,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005322859997249907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005501276999893889,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021476600022651837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004637150000235124,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3309707929997785,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_73]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002990.7502894,
                        "msecs": 750.2894401550293,
                        "relativeCreated": 1016850.4989147186,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003028360001735564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006010910001350567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009595434999937424,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022260300011112122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005181069996069709,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23170539300008386,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_63]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 370, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002991.0540156,
                        "msecs": 54.0156364440918,
                        "relativeCreated": 1017154.2251110077,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003426160001254175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006409560000975034,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00827563899974848,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021709800012104097,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004976979998900788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23766792900005385,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_73]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002991.320565,
                        "msecs": 320.56498527526855,
                        "relativeCreated": 1017420.7744598389,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00030106299982435303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
            "lineno": 115,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005907590002607321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0066275939998377,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023989600003915257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005039049997321854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008824477999951341,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023160999990068376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005305800000314775,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00780098099994575,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000254254000083165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
            "lineno": 127,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005326870000317285,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19820851999975275,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_63]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_columns must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_1/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 375, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002991.558694,
                        "msecs": 558.6938858032227,
                        "relativeCreated": 1017658.9033603668,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003405209999982617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
            "lineno": 97,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005817999999635504,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0116999240003679,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002256719999422785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
            "lineno": 193,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005405080000855378,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02771924200033027,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021897200031162356,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048305600012099603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007239259998641501,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021423500038508791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
            "lineno": 165,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045201000011729775,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3138982229997964,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 98, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_57]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 98, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1684002991.8675444,
                        "msecs": 867.544412612915,
                        "relativeCreated": 1017967.7538871765,
                        "thread": 139776243350592,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 86315
                    }
                ]
            },
            "teardown": {
                "duration": 0.00033230600001843413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.000592948000303295,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026954524999837304,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002491860000191082,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
            "lineno": 182,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005666229999405914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007883368999955565,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007028899999568239,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005903729997953633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000447796999651473,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.07189465200008271,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses",
            "category": "DeprecationWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/autograph/core/converter_testing.py",
            "lineno": 18
        },
        {
            "message": "torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py",
            "lineno": 181
        },
        {
            "message": "invalid value encountered in subtract",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2992
        },
        {
            "message": "torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py",
            "lineno": 181
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "invalid value encountered in reduce",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py",
            "lineno": 86
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Exception in thread Thread-1\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1378, in _do_call\n    return fn(*args)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1361, in _run_fn\n    return self._call_tf_sessionrun(options, feed_dict, fetch_list,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1454, in _call_tf_sessionrun\n    return tf_session.TF_SessionRun_wrapper(self._session, options, feed_dict,\ntensorflow.python.framework.errors_impl.CancelledError: Run call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 3486, in assertRaisesWithPredicateMatch\n    yield\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 968, in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1191, in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1371, in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1397, in _do_call\n    raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\ntensorflow.python.framework.errors_impl.CancelledError: Graph execution error:\n\nRun call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.8/threading.py\", line 870, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/usr/lib/python3.8/contextlib.py\", line 131, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 3490, in assertRaisesWithPredicateMatch\n    raise AssertionError(\"Exception of type %s: %s\" %\nAssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.CancelledError'>: Graph execution error:\n\nRun call was cancelled\n",
            "category": "PytestUnhandledThreadExceptionWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/threadexception.py",
            "lineno": 73
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        }
    ]
}