{
    "created": 1683579257.9750743,
    "duration": 944.8864779472351,
    "exitcode": 1,
    "root": "/home/frasermince/portability",
    "environment": {
        "Python": "3.8.10",
        "Platform": "Linux-5.15.0-1022-gcp-x86_64-with-glibc2.29",
        "Packages": {
            "pytest": "7.2.2",
            "pluggy": "1.0.0"
        },
        "Plugins": {
            "metadata": "2.0.4",
            "xdist": "3.2.1",
            "json-report": "1.5.0",
            "hypothesis": "6.70.2",
            "timeout": "2.1.0",
            "forked": "1.6.0"
        }
    },
    "summary": {
        "passed": 623,
        "skipped": 289,
        "failed": 280,
        "total": 1192,
        "collected": 1192
    },
    "collectors": [
        {
            "nodeid": "",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/__init__.py",
                    "type": "Package"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
                    "type": "TestCaseFunction",
                    "lineno": 211
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
                    "type": "TestCaseFunction",
                    "lineno": 484
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
                    "type": "TestCaseFunction",
                    "lineno": 513
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
                    "type": "TestCaseFunction",
                    "lineno": 539
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
                    "type": "TestCaseFunction",
                    "lineno": 464
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 312
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 411
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
                    "type": "TestCaseFunction",
                    "lineno": 429
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
                    "type": "TestCaseFunction",
                    "lineno": 272
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
                    "type": "TestCaseFunction",
                    "lineno": 125
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
                    "type": "TestCaseFunction",
                    "lineno": 90
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
                    "type": "TestCaseFunction",
                    "lineno": 117
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
                    "type": "TestCaseFunction",
                    "lineno": 238
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 246
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
                    "type": "TestCaseFunction",
                    "lineno": 187
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
                    "type": "TestCaseFunction",
                    "lineno": 254
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 241
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
                    "type": "TestCaseFunction",
                    "lineno": 522
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
                    "type": "TestCaseFunction",
                    "lineno": 169
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
                    "type": "TestCaseFunction",
                    "lineno": 313
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
                    "type": "TestCaseFunction",
                    "lineno": 289
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
                    "type": "TestCaseFunction",
                    "lineno": 469
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
                    "type": "TestCaseFunction",
                    "lineno": 216
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
                    "type": "TestCaseFunction",
                    "lineno": 129
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 264
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
                    "type": "TestCaseFunction",
                    "lineno": 335
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
                    "type": "TestCaseFunction",
                    "lineno": 562
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
                    "type": "TestCaseFunction",
                    "lineno": 351
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
                    "type": "TestCaseFunction",
                    "lineno": 433
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 484
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
                    "type": "TestCaseFunction",
                    "lineno": 529
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
                    "type": "TestCaseFunction",
                    "lineno": 420
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
                    "type": "TestCaseFunction",
                    "lineno": 407
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 71
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
                    "type": "TestCaseFunction",
                    "lineno": 77
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 404
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
                    "type": "TestCaseFunction",
                    "lineno": 59
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
                    "type": "TestCaseFunction",
                    "lineno": 558
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
                    "type": "TestCaseFunction",
                    "lineno": 562
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
                    "type": "TestCaseFunction",
                    "lineno": 584
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
                    "type": "TestCaseFunction",
                    "lineno": 570
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
                    "type": "TestCaseFunction",
                    "lineno": 575
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
                    "type": "TestCaseFunction",
                    "lineno": 354
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
                    "type": "TestCaseFunction",
                    "lineno": 521
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
                    "type": "TestCaseFunction",
                    "lineno": 405
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
                    "type": "TestCaseFunction",
                    "lineno": 385
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
                    "type": "TestCaseFunction",
                    "lineno": 365
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
                    "type": "TestCaseFunction",
                    "lineno": 425
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
                    "type": "TestCaseFunction",
                    "lineno": 505
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 445
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
                    "type": "TestCaseFunction",
                    "lineno": 525
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
                    "type": "TestCaseFunction",
                    "lineno": 532
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
                    "type": "TestCaseFunction",
                    "lineno": 186
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
                    "type": "TestCaseFunction",
                    "lineno": 544
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
                    "type": "TestCaseFunction",
                    "lineno": 509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
                    "type": "TestCaseFunction",
                    "lineno": 195
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 88
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
                    "type": "TestCaseFunction",
                    "lineno": 51
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 63
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 110
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
                    "type": "TestCaseFunction",
                    "lineno": 184
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
                    "type": "TestCaseFunction",
                    "lineno": 144
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 156
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
                    "type": "TestCaseFunction",
                    "lineno": 197
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 93
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
                    "type": "TestCaseFunction",
                    "lineno": 161
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
                    "type": "TestCaseFunction",
                    "lineno": 172
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
                    "type": "TestCaseFunction",
                    "lineno": 191
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
                    "type": "TestCaseFunction",
                    "lineno": 204
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
                    "type": "TestCaseFunction",
                    "lineno": 77
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
                    "type": "TestCaseFunction",
                    "lineno": 1727
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
                    "type": "TestCaseFunction",
                    "lineno": 18
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
                    "type": "TestCaseFunction",
                    "lineno": 317
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
                    "type": "TestCaseFunction",
                    "lineno": 303
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
                    "type": "TestCaseFunction",
                    "lineno": 22
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
                    "type": "TestCaseFunction",
                    "lineno": 105
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
                    "type": "TestCaseFunction",
                    "lineno": 266
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
                    "type": "TestCaseFunction",
                    "lineno": 294
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
                    "type": "TestCaseFunction",
                    "lineno": 330
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
                    "type": "TestCaseFunction",
                    "lineno": 357
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
                    "type": "TestCaseFunction",
                    "lineno": 341
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
                    "type": "TestCaseFunction",
                    "lineno": 309
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 224
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
                    "type": "TestCaseFunction",
                    "lineno": 250
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
                    "type": "TestCaseFunction",
                    "lineno": 442
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
                    "type": "TestCaseFunction",
                    "lineno": 399
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
                    "type": "TestCaseFunction",
                    "lineno": 450
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
                    "type": "TestCaseFunction",
                    "lineno": 185
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
                    "type": "TestCaseFunction",
                    "lineno": 99
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
                    "type": "TestCaseFunction",
                    "lineno": 196
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
                    "type": "TestCaseFunction",
                    "lineno": 142
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
                    "type": "TestCaseFunction",
                    "lineno": 124
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
                    "type": "TestCaseFunction",
                    "lineno": 152
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
                    "type": "TestCaseFunction",
                    "lineno": 133
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
                    "type": "TestCaseFunction",
                    "lineno": 104
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 96
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
                    "type": "TestCaseFunction",
                    "lineno": 83
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
                    "type": "TestCaseFunction",
                    "lineno": 293
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
                    "type": "TestCaseFunction",
                    "lineno": 449
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
                    "type": "TestCaseFunction",
                    "lineno": 44
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
                    "type": "TestCaseFunction",
                    "lineno": 55
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
                    "type": "TestCaseFunction",
                    "lineno": 108
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
                    "type": "TestCaseFunction",
                    "lineno": 164
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
                    "type": "TestCaseFunction",
                    "lineno": 136
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 53
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
                    "type": "TestCaseFunction",
                    "lineno": 221
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
                    "type": "TestCaseFunction",
                    "lineno": 206
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
                    "type": "TestCaseFunction",
                    "lineno": 178
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
                    "type": "TestCaseFunction",
                    "lineno": 225
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
                    "type": "TestCaseFunction",
                    "lineno": 240
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
                    "type": "TestCaseFunction",
                    "lineno": 192
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
                    "type": "TestCaseFunction",
                    "lineno": 168
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
                    "type": "TestCaseFunction",
                    "lineno": 249
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 67
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
                    "type": "TestCaseFunction",
                    "lineno": 100
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
                    "type": "TestCaseFunction",
                    "lineno": 25
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
                    "type": "TestCaseFunction",
                    "lineno": 43
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
                    "type": "TestCaseFunction",
                    "lineno": 69
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 366
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
                    "type": "TestCaseFunction",
                    "lineno": 414
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
                    "type": "TestCaseFunction",
                    "lineno": 399
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
                    "type": "TestCaseFunction",
                    "lineno": 188
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
                    "type": "TestCaseFunction",
                    "lineno": 75
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
                    "type": "TestCaseFunction",
                    "lineno": 91
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
                    "type": "TestCaseFunction",
                    "lineno": 31
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
                    "type": "TestCaseFunction",
                    "lineno": 43
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
                    "type": "TestCaseFunction",
                    "lineno": 37
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
                    "type": "TestCaseFunction",
                    "lineno": 32
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
                    "type": "TestCaseFunction",
                    "lineno": 48
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
                    "type": "TestCaseFunction",
                    "lineno": 42
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
                    "type": "TestCaseFunction",
                    "lineno": 208
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_lone_print",
                    "type": "TestCaseFunction",
                    "lineno": 76
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
                    "type": "TestCaseFunction",
                    "lineno": 85
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_print_multiple_values",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_print_with_nontf_values",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
                    "type": "TestCaseFunction",
                    "lineno": 95
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
                    "type": "TestCaseFunction",
                    "lineno": 182
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
                    "type": "TestCaseFunction",
                    "lineno": 220
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
                    "type": "TestCaseFunction",
                    "lineno": 202
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 269
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
                    "type": "TestCaseFunction",
                    "lineno": 358
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
                    "type": "TestCaseFunction",
                    "lineno": 167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
                    "type": "TestCaseFunction",
                    "lineno": 140
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
                    "type": "TestCaseFunction",
                    "lineno": 281
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
                    "type": "TestCaseFunction",
                    "lineno": 318
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 335
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
                    "type": "TestCaseFunction",
                    "lineno": 302
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
                    "type": "TestCaseFunction",
                    "lineno": 239
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
                    "type": "TestCaseFunction",
                    "lineno": 64
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
                    "type": "TestCaseFunction",
                    "lineno": 46
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 23
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 50
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
                    "type": "TestCaseFunction",
                    "lineno": 160
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
                    "type": "TestCaseFunction",
                    "lineno": 70
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
                    "type": "TestCaseFunction",
                    "lineno": 54
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
                    "type": "TestCaseFunction",
                    "lineno": 29
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 443
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 649
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 766
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 781
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 773
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 883
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 926
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
                    "type": "TestCaseFunction",
                    "lineno": 898
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
                    "type": "TestCaseFunction",
                    "lineno": 890
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1024
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1016
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1038
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
                    "type": "TestCaseFunction",
                    "lineno": 1073
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
                    "type": "TestCaseFunction",
                    "lineno": 1065
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 1087
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
                    "type": "TestCaseFunction",
                    "lineno": 1167
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
                    "type": "TestCaseFunction",
                    "lineno": 79
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
                    "type": "TestCaseFunction",
                    "lineno": 153
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 137
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
                    "type": "TestCaseFunction",
                    "lineno": 106
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
                    "type": "TestCaseFunction",
                    "lineno": 114
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
                    "type": "TestCaseFunction",
                    "lineno": 118
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 94
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
                    "type": "TestCaseFunction",
                    "lineno": 250
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
                    "type": "TestCaseFunction",
                    "lineno": 179
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
                    "type": "TestCaseFunction",
                    "lineno": 235
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
                    "type": "TestCaseFunction",
                    "lineno": 122
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
                    "type": "TestCaseFunction",
                    "lineno": 126
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
                    "type": "TestCaseFunction",
                    "lineno": 130
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
                    "type": "TestCaseFunction",
                    "lineno": 162
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
                    "type": "TestCaseFunction",
                    "lineno": 1812
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
                    "type": "TestCaseFunction",
                    "lineno": 1496
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
                    "type": "TestCaseFunction",
                    "lineno": 1175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1147
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
                    "type": "TestCaseFunction",
                    "lineno": 1509
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
                    "type": "TestCaseFunction",
                    "lineno": 1788
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
                    "type": "TestCaseFunction",
                    "lineno": 1598
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 988
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1086
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
                    "type": "TestCaseFunction",
                    "lineno": 1611
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
                    "type": "TestCaseFunction",
                    "lineno": 1795
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
                    "type": "TestCaseFunction",
                    "lineno": 823
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
                    "type": "TestCaseFunction",
                    "lineno": 912
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
                    "type": "TestCaseFunction",
                    "lineno": 867
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 757
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
                    "type": "TestCaseFunction",
                    "lineno": 1663
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
                    "type": "TestCaseFunction",
                    "lineno": 241
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
                    "type": "TestCaseFunction",
                    "lineno": 937
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
                    "type": "TestCaseFunction",
                    "lineno": 1036
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
                    "type": "TestCaseFunction",
                    "lineno": 181
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
                    "type": "TestCaseFunction",
                    "lineno": 217
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 360
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
                    "type": "TestCaseFunction",
                    "lineno": 391
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
                    "type": "TestCaseFunction",
                    "lineno": 132
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
                    "type": "TestCaseFunction",
                    "lineno": 643
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
                    "type": "TestCaseFunction",
                    "lineno": 256
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
                    "type": "TestCaseFunction",
                    "lineno": 603
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
                    "type": "TestCaseFunction",
                    "lineno": 145
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
                    "type": "TestCaseFunction",
                    "lineno": 166
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
                    "type": "TestCaseFunction",
                    "lineno": 658
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
                    "type": "TestCaseFunction",
                    "lineno": 552
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
                    "type": "TestCaseFunction",
                    "lineno": 200
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1760
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
                    "type": "TestCaseFunction",
                    "lineno": 1574
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
                    "type": "TestCaseFunction",
                    "lineno": 1338
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
                    "type": "TestCaseFunction",
                    "lineno": 84
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
                    "type": "TestCaseFunction",
                    "lineno": 1629
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
                    "type": "TestCaseFunction",
                    "lineno": 1690
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
                    "type": "TestCaseFunction",
                    "lineno": 1372
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
                    "type": "TestCaseFunction",
                    "lineno": 1381
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
                    "type": "TestCaseFunction",
                    "lineno": 1401
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
                    "type": "TestCaseFunction",
                    "lineno": 101
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
                    "type": "TestCaseFunction",
                    "lineno": 41
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 57
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
                    "type": "TestCaseFunction",
                    "lineno": 68
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
                    "type": "TestCaseFunction",
                    "lineno": 121
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
                    "type": "TestCaseFunction",
                    "lineno": 78
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
                    "type": "TestCaseFunction",
                    "lineno": 86
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
                    "type": "TestCaseFunction",
                    "lineno": 49
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
                    "type": "TestCaseFunction",
                    "lineno": 27
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
                    "type": "TestCaseFunction",
                    "lineno": 38
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
                    "type": "TestCaseFunction",
                    "lineno": 16
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
                    "type": "TestCaseFunction",
                    "lineno": 163
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 213
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
                    "type": "TestCaseFunction",
                    "lineno": 180
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
                    "type": "TestCaseFunction",
                    "lineno": 197
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_1",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_2",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyexhaustediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyfullyusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifymultiplebreaks",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyresetrestorediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyunusediterator",
                    "type": "TestCaseFunction",
                    "lineno": 292
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
                    "type": "TestCaseFunction",
                    "lineno": 36
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
                    "type": "TestCaseFunction",
                    "lineno": 74
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
                    "type": "TestCaseFunction",
                    "lineno": 102
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
                    "type": "TestCaseFunction",
                    "lineno": 110
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
                    "type": "TestCaseFunction",
                    "lineno": 89
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
                    "type": "TestCaseFunction",
                    "lineno": 61
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
                    "type": "TestCaseFunction",
                    "lineno": 1620
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
                    "type": "TestCaseFunction",
                    "lineno": 62
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
                    "type": "TestCaseFunction",
                    "lineno": 90
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
                    "type": "TestCaseFunction",
                    "lineno": 58
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 73
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
                    "type": "TestCaseFunction",
                    "lineno": 149
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
                    "type": "TestCaseFunction",
                    "lineno": 112
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
                    "type": "TestCaseFunction",
                    "lineno": 60
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
                    "type": "TestCaseFunction",
                    "lineno": 203
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
                    "type": "TestCaseFunction",
                    "lineno": 138
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
                    "type": "TestCaseFunction",
                    "lineno": 46
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
                    "type": "TestCaseFunction",
                    "lineno": 66
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
                    "type": "TestCaseFunction",
                    "lineno": 98
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
                    "type": "TestCaseFunction",
                    "lineno": 158
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
                    "type": "TestCaseFunction",
                    "lineno": 173
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
                    "type": "TestCaseFunction",
                    "lineno": 80
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
                    "type": "TestCaseFunction",
                    "lineno": 169
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
                    "type": "TestCaseFunction",
                    "lineno": 87
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
                    "type": "TestCaseFunction",
                    "lineno": 82
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
                    "type": "TestCaseFunction",
                    "lineno": 92
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
                    "type": "TestCaseFunction",
                    "lineno": 175
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 151
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 123
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 135
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 109
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 143
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 115
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 119
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 103
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 127
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 97
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
                    "type": "TestCaseFunction",
                    "lineno": 193
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
                    "type": "TestCaseFunction",
                    "lineno": 165
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
                    "type": "TestCaseFunction",
                    "lineno": 159
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
                    "type": "TestCaseFunction",
                    "lineno": 182
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
                    "type": "TestCaseFunction",
                    "lineno": 2753
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest",
                    "type": "UnitTestCase"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest",
                    "type": "UnitTestCase"
                }
            ]
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/__init__.py",
            "outcome": "passed",
            "result": [
                {
                    "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/Variable_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_default_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cast_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/clip_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/concat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/constant_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/decode_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/eval_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/fill_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/from_list_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/gamma_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/idct_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/igammac_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/intersection_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/print_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/range_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/reshape_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/run_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shard_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/svd_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py",
                    "type": "Module"
                },
                {
                    "nodeid": "src/tensorflow_tests_reduced/zeros_test.py",
                    "type": "Module"
                }
            ]
        }
    ],
    "tests": [
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_stops_training_in_after_save",
            "lineno": 211,
            "outcome": "passed",
            "setup": {
                "duration": 3.1395537140000442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6109671490000892,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/training/training_util.py:396: Variable.initialized_value (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse Variable.read_value. Variables in 2.X are initialized automatically both in eager and graph (inside tf.defun) contexts.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578318.1046116,
                        "msecs": 104.61163520812988,
                        "relativeCreated": 10602.671384811401,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.000360538999984783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_default_saver",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008766480000304,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5136497580000423,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/training/saver.py:1173: get_checkpoint_mtimes (from tensorflow.python.checkpoint.checkpoint_management) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse standard file utilities to get mtimes.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578319.1819527,
                        "msecs": 181.95271492004395,
                        "relativeCreated": 11680.012464523315,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00041910100003406114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_listener_with_monitored_session",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008500139999796374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.38989887399998224,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003269869999940056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_both_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005949540000074194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018429133000040565,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022423100006108143,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_in_none_secs_and_steps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005166429999690081,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01725207300000875,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002244419999897218,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_raise_when_saver_and_scaffold_both_present",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.000514079000026868,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017602603000000272,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021634399990944075,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_checkpoint_before_first_train_step",
            "lineno": 484,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004926679999925909,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3138920760000019,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002926160000242817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def",
            "lineno": 513,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005833349999875281,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3160953150000978,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002986760000567301,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_graph_def_false",
            "lineno": 539,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005939570000919048,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22504489899995406,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029500599998755206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_saves_at_end",
            "lineno": 464,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005912609999541019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23566905500001667,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028136200000972167,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_at_begin_and_end",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005957609999995839,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23019712399991477,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029925399996955093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_calls_listeners_periodically",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006010390000028565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2808997199999794,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003117470000688627,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_in_first_step",
            "lineno": 133,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005845260000114649,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21368810100000246,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003307080000922724,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_secs_saves_periodically",
            "lineno": 312,
            "outcome": "passed",
            "setup": {
                "duration": 0.000619776999997157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2649751669999887,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002921960000321633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_in_first_step",
            "lineno": 411,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006477170001062404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21487254700002723,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003257659999462703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_save_steps_saves_periodically",
            "lineno": 429,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005867589999297707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2593063429999347,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029127999994216225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_saves_when_saver_and_scaffold_both_missing",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005882240000119054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21479484500002854,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028981900004509953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006202439999469789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018301697999959288,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/lib/python3.8/contextlib.py:83: TensorFlowTestCase.test_session (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `self.session()` or `self.cached_session()` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578322.4836547,
                        "msecs": 483.6547374725342,
                        "relativeCreated": 14981.714487075806,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00024235500006852817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/CheckpointSaverHook_test.py::CheckpointSaverHookTest::test_two_listeners_with_default_saver",
            "lineno": 272,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005516520000128367,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5224255810001068,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000800702999981695,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::BaseLookupTableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007659359999934168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000850897999953304,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002745100000538514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_False",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005949760000021342,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06422901399992043,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002387579999094669,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int32_True",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005439930000648019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005517397000062374,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022889199999553966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_False",
            "lineno": 125,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004933569999820975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0031996530000242274,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 357,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 466,
                        "message": "in hash_table_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_int64_False>\nis_anonymous = False\n\n    def test_int64(self, is_anonymous):\n      timer = tensorflow_op_timer()\n      with timer:\n        init = lookup_ops.KeyValueTensorInitializer((42, 1, -1000), (0, 1, 2),\n                                                  dtypes.int64, dtypes.int64)\n        timer.gen.send(init)\n>     table = self.getHashTable()(\n          init, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:357: in _create_resource\n    table_ref = gen_lookup_ops.hash_table_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:466: in hash_table_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037582599998131627,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_int64_True",
            "lineno": 125,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006437920000053055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005255125999951815,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 352,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 53,
                        "message": "in anonymous_hash_table"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_int64_True>\nis_anonymous = True\n\n    def test_int64(self, is_anonymous):\n      timer = tensorflow_op_timer()\n      with timer:\n        init = lookup_ops.KeyValueTensorInitializer((42, 1, -1000), (0, 1, 2),\n                                                  dtypes.int64, dtypes.int64)\n        timer.gen.send(init)\n>     table = self.getHashTable()(\n          init, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:352: in _create_resource\n    table_ref = gen_lookup_ops.anonymous_hash_table(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:53: in anonymous_hash_table\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003328969999074616,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_False",
            "lineno": 100,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005730510000603317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005590442000084295,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 108,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 357,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 466,
                        "message": "in hash_table_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_multiple_tables_False>\nis_anonymous = False\n\n    def test_multiple_tables(self, is_anonymous):\n      with ops.name_scope(\"table_scope\"):\n        timer = tensorflow_op_timer()\n        with timer:\n          init1 = lookup_ops.KeyValueTensorInitializer(\n            (\"brain\", \"salad\", \"surgery\"), (0, 1, 2), dtypes.string, dtypes.int64)\n          timer.gen.send(init1)\n>       table1 = self.getHashTable()(\n            init1, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:357: in _create_resource\n    table_ref = gen_lookup_ops.hash_table_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:466: in hash_table_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003199279999535065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_multiple_tables_True",
            "lineno": 100,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005607510000800175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005482049999955052,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 108,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 352,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 53,
                        "message": "in anonymous_hash_table"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_multiple_tables_True>\nis_anonymous = True\n\n    def test_multiple_tables(self, is_anonymous):\n      with ops.name_scope(\"table_scope\"):\n        timer = tensorflow_op_timer()\n        with timer:\n          init1 = lookup_ops.KeyValueTensorInitializer(\n            (\"brain\", \"salad\", \"surgery\"), (0, 1, 2), dtypes.string, dtypes.int64)\n          timer.gen.send(init1)\n>       table1 = self.getHashTable()(\n            init1, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:352: in _create_resource\n    table_ref = gen_lookup_ops.anonymous_hash_table(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:53: in anonymous_hash_table\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035289499999180407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000581475999979375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007536660000369011,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00021518399989872705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_False",
            "lineno": 90,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004791520000253513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0053345600000511695,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 357,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 466,
                        "message": "in hash_table_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_string_False>\nis_anonymous = False\n\n    def test_string(self, is_anonymous):\n      timer = tensorflow_op_timer()\n      with timer:\n        init = lookup_ops.KeyValueTensorInitializer(\n          (\"brain\", \"salad\", \"surgery\"), (0, 1, 2), dtypes.string, dtypes.int64)\n        timer.gen.send(init)\n>     table = self.getHashTable()(\n          init, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:357: in _create_resource\n    table_ref = gen_lookup_ops.hash_table_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:466: in hash_table_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:HashTableV2] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00031440300006124744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py::KeyValueTensorInitializerTest::test_string_True",
            "lineno": 90,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005768100000977938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005579104000048574,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 102,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py",
                        "lineno": 94,
                        "message": "in default_resource_creator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 347,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 198,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py",
                        "lineno": 352,
                        "message": "in _create_resource"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py",
                        "lineno": 53,
                        "message": "in anonymous_hash_table"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.KeyValueTensorInitializer_test.KeyValueTensorInitializerTest testMethod=test_string_True>\nis_anonymous = True\n\n    def test_string(self, is_anonymous):\n      timer = tensorflow_op_timer()\n      with timer:\n        init = lookup_ops.KeyValueTensorInitializer(\n          (\"brain\", \"salad\", \"surgery\"), (0, 1, 2), dtypes.string, dtypes.int64)\n        timer.gen.send(init)\n>     table = self.getHashTable()(\n          init, default_value=-1, experimental_is_anonymous=is_anonymous)\n\nsrc/tensorflow_tests_reduced/KeyValueTensorInitializer_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:102: in __call__\n    return previous_getter(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:97: in <lambda>\n    previous_getter = lambda *a, **kw: default_resource_creator(None, *a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/trackable/resource.py:94: in default_resource_creator\n    obj.__init__(*a, **kw)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:347: in __init__\n    super(StaticHashTable, self).__init__(default_value, initializer)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:198: in __init__\n    self._resource_handle = self._create_resource()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/lookup_ops.py:352: in _create_resource\n    table_ref = gen_lookup_ops.anonymous_hash_table(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_lookup_ops.py:53: in anonymous_hash_table\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = 'hash_table'\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:AnonymousHashTable] name: hash_table\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0005626920000167956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_illegal_args",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007534039999654851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007038769999780925,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001956730000074458,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_at_end_only",
            "lineno": 117,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004633489999150697,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01244763400006832,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020788400001947593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs",
            "lineno": 238,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004691039999897839,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02262413400001151,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021013100001709972,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_secs_and_end",
            "lineno": 246,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047691999998278334,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026197614000011527,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002024279999659484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046748400006890733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04008127200006584,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027650000004086905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_every_n_steps_and_end",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048606200004996936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04491811599996254,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021245300001737633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_first_step",
            "lineno": 187,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047727399999075715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007425377999993543,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020022100000005594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_print_formatter",
            "lineno": 254,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004640679999283748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007326505000037287,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019769400000768655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/LoggingTensorHook_test.py::LoggingTensorHookTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046310999994148005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002594920000547063,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004056390000641841,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 241,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005458880000333011,
                "outcome": "passed"
            },
            "call": {
                "duration": 12.072749466000005,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3252,
                    "message": "AssertionError: \nArrays are not equal\n\nnot equal lhs = array(True)\nnot equal rhs = array(False)\nMismatched elements: 1 / 1 (100%)\n x: array(True)\n y: array(False)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 262,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 42,
                        "message": "in assertAllFinite"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3252,
                        "message": "AssertionError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:250: Normal.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578326.1166255,
                        "msecs": 116.62554740905762,
                        "relativeCreated": 18614.68529701233,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/distributions/normal.py:149: Distribution.__init__ (from tensorflow.python.ops.distributions.distribution) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578326.1194491,
                        "msecs": 119.44913864135742,
                        "relativeCreated": 18617.50888824463,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testFiniteGradientAtDifficultPoints>\n\n    def testFiniteGradientAtDifficultPoints(self):\n      for dtype in [np.float32, np.float64]:\n        g = ops.Graph()\n        with g.as_default():\n          mu = variables.Variable(dtype(0.0))\n          sigma = variables.Variable(dtype(1.0))\n          timer = tensorflow_op_timer()\n          with timer:\n            dist = normal_lib.Normal(loc=mu, scale=sigma)\n            timer.gen.send(dist)\n          x = np.array([-100., -20., -5., 0., 5., 20., 100.]).astype(dtype)\n          for func in [\n              dist.cdf, dist.log_cdf, dist.survival_function,\n              dist.log_survival_function, dist.log_prob, dist.prob\n          ]:\n            value = func(x)\n            grads = gradients_impl.gradients(value, [mu, sigma])\n            with self.session(graph=g):\n              self.evaluate(variables.global_variables_initializer())\n              self.assertAllFinite(value)\n>             self.assertAllFinite(grads[0])\n\nsrc/tensorflow_tests_reduced/Normal_test.py:262: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/Normal_test.py:42: in assertAllFinite\n    self.assertAllEqual(all_true, is_finite)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testFiniteGradientAtDifficultPoints>\na = array(True), b = array(False), msg = ''\n\n    @py_func_if_in_function\n    def assertAllEqual(self, a, b, msg=None):\n      \"\"\"Asserts that two numpy arrays or Tensors have the same values.\n    \n      Args:\n        a: the expected numpy ndarray or anything can be converted to one.\n        b: the actual numpy ndarray or anything can be converted to one.\n        msg: Optional message to report on failure.\n      \"\"\"\n      if (ragged_tensor.is_ragged(a) or ragged_tensor.is_ragged(b)):\n        return self._assertRaggedEqual(a, b, msg)\n      msg = msg if msg else \"\"\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # Arbitrary bounds so that we don't print giant tensors.\n      if (b.ndim <= 3 or b.size < 500):\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" Contents: %r. \\n%s.\" % (a.shape, b.shape, b, msg))\n      else:\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" %s\" % (a.shape, b.shape, msg))\n    \n      same = (a == b)\n    \n      if (a.dtype in [\n          np.float16, np.float32, np.float64, dtypes.bfloat16.as_numpy_dtype\n      ]):\n        same = np.logical_or(same, np.logical_and(np.isnan(a), np.isnan(b)))\n      msgs = [msg]\n      if not np.all(same):\n        # Adds more details to np.testing.assert_array_equal.\n        diff = np.logical_not(same)\n        if a.ndim:\n          x = a[np.where(diff)]\n          y = b[np.where(diff)]\n          msgs.append(\"not equal where = {}\".format(np.where(diff)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not equal lhs = %r\" % x)\n        msgs.append(\"not equal rhs = %r\" % y)\n    \n        if (a.dtype.kind != b.dtype.kind and\n            {a.dtype.kind, b.dtype.kind}.issubset({\"U\", \"S\", \"O\"})):\n          a_list = []\n          b_list = []\n          # OK to flatten `a` and `b` because they are guaranteed to have the\n          # same shape.\n          for out_list, flat_arr in [(a_list, a.flat), (b_list, b.flat)]:\n            for item in flat_arr:\n              if isinstance(item, str):\n                out_list.append(item.encode(\"utf-8\"))\n              else:\n                out_list.append(item)\n          a = np.array(a_list)\n          b = np.array(b_list)\n    \n>       np.testing.assert_array_equal(a, b, err_msg=\"\\n\".join(msgs))\nE       AssertionError: \nE       Arrays are not equal\nE       \nE       not equal lhs = array(True)\nE       not equal rhs = array(False)\nE       Mismatched elements: 1 / 1 (100%)\nE        x: array(True)\nE        y: array(False)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3252: AssertionError"
            },
            "teardown": {
                "duration": 0.00035414400008448865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNegativeSigmaFails",
            "lineno": 522,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006020879999368844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1077070559999811,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027591200000642857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalCDF",
            "lineno": 169,
            "outcome": "passed",
            "setup": {
                "duration": 0.00058306599999014,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.837683526999967,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003568409999843425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropy",
            "lineno": 313,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006393979999756993,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.5789250219999076,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003311799999892173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalEntropyWithScalarInputs",
            "lineno": 289,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006922469999608438,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11004497999999785,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close lhs = 2.9362611567309673\nnot close rhs = 2.936253547668457\nnot close dif = 7.609062510294251e-06\nnot close tol = 3.9362535476684564e-06\ndtype = float64, shape = ()\nMismatched elements: 1 / 1 (100%)\nMax absolute difference: 7.60906251e-06\nMax relative difference: 2.59141875e-06\n x: array(2.936261)\n y: array(2.936254, dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 312,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalEntropyWithScalarInputs>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalEntropyWithScalarInputs(self):\n      # Scipy.stats.norm cannot deal with the shapes in the other test.\n      mu_v = 2.34\n      sigma_v = 4.56\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu_v, scale=sigma_v)\n        timer.gen.send(normal)\n    \n      entropy = normal.entropy()\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), entropy.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(entropy).shape)\n      self.assertAllEqual(normal.batch_shape, entropy.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(entropy).shape)\n      # scipy.stats.norm cannot deal with these shapes.\n      if not stats:\n        return\n      expected_entropy = stats.norm(mu_v, sigma_v).entropy()\n>     self.assertAllClose(expected_entropy, self.evaluate(entropy))\n\nsrc/tensorflow_tests_reduced/Normal_test.py:312: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalEntropyWithScalarInputs>\na = array(2.93626116), b = array(2.9362535, dtype=float32), rtol = 1e-06, atol = 1e-06\nmsg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close lhs = 2.9362611567309673\nE       not close rhs = 2.936253547668457\nE       not close dif = 7.609062510294251e-06\nE       not close tol = 3.9362535476684564e-06\nE       dtype = float64, shape = ()\nE       Mismatched elements: 1 / 1 (100%)\nE       Max absolute difference: 7.60906251e-06\nE       Max relative difference: 2.59141875e-06\nE        x: array(2.936261)\nE        y: array(2.936254, dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003645089999508855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalFullyReparameterized",
            "lineno": 469,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005877160000409276,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2790365699999029,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002973719999772584,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogCDF",
            "lineno": 216,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006431949999523567,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9379516099999137,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=0.001, atol=0\nMismatched value: a is different from b. \nnot close where = (array([], dtype=int64),)\nnot close lhs = []\nnot close rhs = []\nnot close dif = []\nnot close tol = []\ndtype = float64, shape = (50,)\nx and y -inf location mismatch:\n x: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\n       -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\n       -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\n y: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\n       -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\n       -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 240,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogCDF>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogCDF(self):\n      batch_size = 50\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      x = np.linspace(-100.0, 10.0, batch_size).astype(np.float64)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      cdf = normal.log_cdf(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), cdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(cdf).shape)\n      self.assertAllEqual(normal.batch_shape, cdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(cdf).shape)\n    \n      if not stats:\n        return\n      expected_cdf = stats.norm(mu, sigma).logcdf(x)\n>     self.assertAllClose(expected_cdf, self.evaluate(cdf), atol=0, rtol=1e-3)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogCDF>\na = array([-2.71846674e+03, -2.87226212e+03, -2.29013116e+03, -1.49419982e+03,\n       -1.16756658e+03, -1.79713902e+03, -1...0,\n       -2.26439591e+00, -2.49925140e-01, -3.31285237e-01, -1.11303615e-03,\n       -4.46576733e-10, -3.36052592e-12])\nb = array([-2.71846674e+03, -2.87226212e+03, -2.29013116e+03, -1.49419982e+03,\n       -1.16756658e+03, -1.79713902e+03, -1...0,\n       -2.26439591e+00, -2.49925140e-01, -3.31285237e-01, -1.11303615e-03,\n       -4.46576720e-10, -3.36052583e-12])\nrtol = 0.001, atol = 0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=0.001, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([], dtype=int64),)\nE       not close lhs = []\nE       not close rhs = []\nE       not close dif = []\nE       not close tol = []\nE       dtype = float64, shape = (50,)\nE       x and y -inf location mismatch:\nE        x: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\nE              -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\nE              -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\nE        y: array([-2.718467e+03, -2.872262e+03, -2.290131e+03, -1.494200e+03,\nE              -1.167567e+03, -1.797139e+03, -1.274029e+03, -1.402784e+03,\nE              -1.319098e+03, -1.115421e+03, -8.751474e+02, -2.415754e+03,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00035901100000046426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDF",
            "lineno": 93,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005811229999608258,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3456911459999219,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]),)\nnot close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nnot close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nnot close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\n 3.25966991e-05 3.26067818e-05]\nnot close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\n 3.1201985e-06]\ndtype = float64, shape = (6,)\nMismatched elements: 6 / 6 (100%)\nMax absolute difference: 3.27042548e-05\nMax relative difference: 1.56104771e-05\n x: array([-3.582731, -2.082731, -2.120231, -2.520231, -2.870231, -2.120231])\n y: array([-3.582698, -2.082699, -2.120198, -2.520199, -2.870198, -2.120198],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 127,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDF>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogPDF(self):\n      batch_size = 6\n      mu = constant_op.constant([3.0] * batch_size)\n      sigma = constant_op.constant([math.sqrt(10.0)] * batch_size)\n      x = np.array([-2.5, 2.5, 4.0, 0.0, -1.0, 2.0], dtype=np.float32)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      log_pdf = normal.log_prob(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), log_pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(log_pdf).shape)\n      self.assertAllEqual(normal.batch_shape, log_pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(log_pdf).shape)\n    \n      pdf = normal.prob(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(pdf).shape)\n      self.assertAllEqual(normal.batch_shape, pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(pdf).shape)\n    \n      if not stats:\n        return\n      expected_log_pdf = stats.norm(self.evaluate(mu),\n                                    self.evaluate(sigma)).logpdf(x)\n>     self.assertAllClose(expected_log_pdf, self.evaluate(log_pdf))\n\nsrc/tensorflow_tests_reduced/Normal_test.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDF>\na = array([-3.58273105, -2.0827311 , -2.1202311 , -2.52023106, -2.87023108,\n       -2.1202311 ])\nb = array([-3.5826983, -2.0826986, -2.1201985, -2.5201986, -2.8701985,\n       -2.1201985], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]),)\nE       not close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nE       not close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nE       not close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\nE        3.25966991e-05 3.26067818e-05]\nE       not close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\nE        3.1201985e-06]\nE       dtype = float64, shape = (6,)\nE       Mismatched elements: 6 / 6 (100%)\nE       Max absolute difference: 3.27042548e-05\nE       Max relative difference: 1.56104771e-05\nE        x: array([-3.582731, -2.082731, -2.120231, -2.520231, -2.870231, -2.120231])\nE        y: array([-3.582698, -2.082699, -2.120198, -2.520199, -2.870198, -2.120198],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003677419999803533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogPDFMultidimensional",
            "lineno": 129,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005880200000092373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.265035193000017,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]), array([0, 0, 0, 0, 0, 0]))\nnot close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nnot close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nnot close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\n 3.25966991e-05 3.26067818e-05]\nnot close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\n 3.1201985e-06]\ndtype = float64, shape = (6, 2)\nMismatched elements: 6 / 12 (50%)\nMax absolute difference: 3.27042548e-05\nMax relative difference: 1.56104771e-05\n x: array([[-3.582731, -2.281297],\n       [-2.082731, -3.281297],\n       [-2.120231, -3.906297],...\n y: array([[-3.582698, -2.281298],\n       [-2.082699, -3.281298],\n       [-2.120198, -3.906298],..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 167,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDFMultidimensional>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogPDFMultidimensional(self):\n      batch_size = 6\n      mu = constant_op.constant([[3.0, -3.0]] * batch_size)\n      sigma = constant_op.constant(\n          [[math.sqrt(10.0), math.sqrt(15.0)]] * batch_size)\n      x = np.array([[-2.5, 2.5, 4.0, 0.0, -1.0, 2.0]], dtype=np.float32).T\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      log_pdf = normal.log_prob(x)\n      log_pdf_values = self.evaluate(log_pdf)\n      self.assertEqual(log_pdf.get_shape(), (6, 2))\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), log_pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(log_pdf).shape)\n      self.assertAllEqual(normal.batch_shape, log_pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(log_pdf).shape)\n    \n      pdf = normal.prob(x)\n      pdf_values = self.evaluate(pdf)\n      self.assertEqual(pdf.get_shape(), (6, 2))\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), pdf_values.shape)\n      self.assertAllEqual(normal.batch_shape, pdf.get_shape())\n      self.assertAllEqual(normal.batch_shape, pdf_values.shape)\n    \n      if not stats:\n        return\n      expected_log_pdf = stats.norm(self.evaluate(mu),\n                                    self.evaluate(sigma)).logpdf(x)\n>     self.assertAllClose(expected_log_pdf, log_pdf_values)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogPDFMultidimensional>\na = array([[-3.58273105, -2.28129699],\n       [-2.0827311 , -3.28129699],\n       [-2.1202311 , -3.9062968 ],\n       [-2.52023106, -2.57296363],\n       [-2.87023108, -2.40629699],\n       [-2.1202311 , -3.10629694]])\nb = array([[-3.5826983, -2.281298 ],\n       [-2.0826986, -3.2812977],\n       [-2.1201985, -3.9062977],\n       [-2.5201986, -2.5729644],\n       [-2.8701985, -2.4062977],\n       [-2.1201985, -3.1062977]], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]), array([0, 0, 0, 0, 0, 0]))\nE       not close lhs = [-3.58273105 -2.0827311  -2.1202311  -2.52023106 -2.87023108 -2.1202311 ]\nE       not close rhs = [-3.5826983 -2.0826986 -2.1201985 -2.5201986 -2.8701985 -2.1201985]\nE       not close dif = [3.27042548e-05 3.25119185e-05 3.26067818e-05 3.24777639e-05\nE        3.25966991e-05 3.26067818e-05]\nE       not close tol = [4.5826982e-06 3.0826986e-06 3.1201985e-06 3.5201988e-06 3.8701983e-06\nE        3.1201985e-06]\nE       dtype = float64, shape = (6, 2)\nE       Mismatched elements: 6 / 12 (50%)\nE       Max absolute difference: 3.27042548e-05\nE       Max relative difference: 1.56104771e-05\nE        x: array([[-3.582731, -2.281297],\nE              [-2.082731, -3.281297],\nE              [-2.120231, -3.906297],...\nE        y: array([[-3.582698, -2.281298],\nE              [-2.082699, -3.281298],\nE              [-2.120198, -3.906298],...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003332759999921109,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalLogSurvivalFunction",
            "lineno": 264,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005759600001056242,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.921725136999953,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-05, atol=0\nMismatched value: a is different from b. \nnot close where = (array([], dtype=int64),)\nnot close lhs = []\nnot close rhs = []\nnot close dif = []\nnot close tol = []\ndtype = float64, shape = (50,)\nx and y -inf location mismatch:\n x: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\n       -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\n       -1.087042e+01, -2.467983e+01, -2.828881e+01, -9.673692e+01,...\n y: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\n       -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\n       -1.087042e+01, -2.467983e+01, -2.828881e+01,          -inf,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 288,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogSurvivalFunction>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalLogSurvivalFunction(self):\n      batch_size = 50\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      x = np.linspace(-10.0, 100.0, batch_size).astype(np.float64)\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n    \n      sf = normal.log_survival_function(x)\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), sf.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(sf).shape)\n      self.assertAllEqual(normal.batch_shape, sf.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(sf).shape)\n    \n      if not stats:\n        return\n      expected_sf = stats.norm(mu, sigma).logsf(x)\n>     self.assertAllClose(expected_sf, self.evaluate(sf), atol=0, rtol=1e-5)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:288: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalLogSurvivalFunction>\na = array([-1.58100526e-11, -9.63975185e-12, -2.17294721e-05, -1.59851442e-01,\n       -5.22361614e-01, -4.92193631e-01, -8...3,\n       -2.54495648e+03, -2.30082673e+03, -1.80839656e+03, -1.63287471e+03,\n       -3.83425748e+03, -3.74187317e+03])\nb = array([-1.58100529e-11, -9.63975167e-12, -2.17294721e-05, -1.59851442e-01,\n       -5.22361614e-01, -4.92193631e-01, -8...3,\n       -2.54495648e+03, -2.30082673e+03, -1.80839656e+03, -1.63287471e+03,\n       -3.83425748e+03, -3.74187317e+03])\nrtol = 1e-05, atol = 0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-05, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([], dtype=int64),)\nE       not close lhs = []\nE       not close rhs = []\nE       not close dif = []\nE       not close tol = []\nE       dtype = float64, shape = (50,)\nE       x and y -inf location mismatch:\nE        x: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\nE              -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\nE              -1.087042e+01, -2.467983e+01, -2.828881e+01, -9.673692e+01,...\nE        y: array([-1.581005e-11, -9.639752e-12, -2.172947e-05, -1.598514e-01,\nE              -5.223616e-01, -4.921936e-01, -8.486708e+00, -9.833373e+00,\nE              -1.087042e+01, -2.467983e+01, -2.828881e+01,          -inf,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003501200000073368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalMeanAndMode",
            "lineno": 335,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005728790000603112,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.672160507000058,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004381579999517271,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalNormalKL",
            "lineno": 562,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008784540000306151,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.805565199000057,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:579: kl_divergence (from tensorflow.python.ops.distributions.kullback_leibler) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578360.1536863,
                        "msecs": 153.6862850189209,
                        "relativeCreated": 52651.74603462219,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003203750000011496,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalQuantile",
            "lineno": 351,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006398680000074819,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.12373637799999,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=0\nMismatched value: a is different from b. \nnot close where = (array([ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n       24]),)\nnot close lhs = [-2.2167613  -0.5416338  -1.84319094 -2.1376815  -1.03631029  0.6666193\n -1.62494523 -1.06409917 -1.38996994  1.4744596   1.50845214  0.6596996\n -0.06850544  0.37577051  1.28210496 -1.08370343  1.04559716 -1.28761554]\nnot close rhs = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nnot close dif = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nnot close tol = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\ndtype = float64, shape = (52,)\nx and y nan location mismatch:\n x: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\n        -0.362716,  -4.316168,  -2.216761,  -0.541634,  -1.843191,\n        -2.137682,  -1.03631 ,   0.666619,  -1.624945,  -1.064099,...\n y: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\n        -0.362716,  -4.316168,        nan,        nan,        nan,\n              nan,        nan,        nan,        nan,        nan,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 378,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalQuantile>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testNormalQuantile(self):\n      batch_size = 52\n      mu = self._rng.randn(batch_size)\n      sigma = self._rng.rand(batch_size) + 1.0\n      p = np.linspace(0., 1.0, batch_size - 2).astype(np.float64)\n      # Quantile performs piecewise rational approximation so adding some\n      # special input values to make sure we hit all the pieces.\n      p = np.hstack((p, np.exp(-33), 1. - np.exp(-33)))\n      timer = tensorflow_op_timer()\n      with timer:\n        normal = normal_lib.Normal(loc=mu, scale=sigma)\n        timer.gen.send(normal)\n      x = normal.quantile(p)\n    \n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()), x.get_shape())\n      self.assertAllEqual(\n          self.evaluate(normal.batch_shape_tensor()),\n          self.evaluate(x).shape)\n      self.assertAllEqual(normal.batch_shape, x.get_shape())\n      self.assertAllEqual(normal.batch_shape, self.evaluate(x).shape)\n    \n      if not stats:\n        return\n      expected_x = stats.norm(mu, sigma).ppf(p)\n>     self.assertAllClose(expected_x, self.evaluate(x), atol=0.)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testNormalQuantile>\na = array([        -inf,  -2.44157199,  -2.98273687,  -3.83925603,\n        -2.90591281,  -0.36271623,  -4.31616788,  -2.21...  2.26027454,   2.3117328 ,   4.1005244 ,   2.38212891,\n         3.68270323,          inf, -15.60125165,  10.99604508])\nb = array([        -inf,  -2.44157199,  -2.98273687,  -3.83925603,\n        -2.90591281,  -0.36271623,  -4.31616788,       ...  2.26027454,   2.3117328 ,   4.1005244 ,   2.38212891,\n         3.68270323,          inf, -15.60125165,  10.99604508])\nrtol = 1e-06, atol = 0.0, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=0\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\nE              24]),)\nE       not close lhs = [-2.2167613  -0.5416338  -1.84319094 -2.1376815  -1.03631029  0.6666193\nE        -1.62494523 -1.06409917 -1.38996994  1.4744596   1.50845214  0.6596996\nE        -0.06850544  0.37577051  1.28210496 -1.08370343  1.04559716 -1.28761554]\nE       not close rhs = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       not close dif = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       not close tol = [nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan nan]\nE       dtype = float64, shape = (52,)\nE       x and y nan location mismatch:\nE        x: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\nE               -0.362716,  -4.316168,  -2.216761,  -0.541634,  -1.843191,\nE               -2.137682,  -1.03631 ,   0.666619,  -1.624945,  -1.064099,...\nE        y: array([      -inf,  -2.441572,  -2.982737,  -3.839256,  -2.905913,\nE               -0.362716,  -4.316168,        nan,        nan,        nan,\nE                     nan,        nan,        nan,        nan,        nan,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00043680599992512725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSample",
            "lineno": 433,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006411829999706242,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8343818790000341,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002903129999367593,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSampleMultiDimensional",
            "lineno": 484,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005812860000560249,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.725912515999994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033617300005062134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShape",
            "lineno": 529,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006367700000282639,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06950061199995616,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002785820000781314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalShapeWithPlaceholders",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00054663600008098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07192827299991222,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002557069999511441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalStandardDeviation",
            "lineno": 420,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005666300000939373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08064204200002223,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000272825000024568,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.000630817000001116,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.8516526269999076,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003089750000526692,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalVariance",
            "lineno": 407,
            "outcome": "passed",
            "setup": {
                "duration": 0.000617104999946605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12407581100001153,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002966139999216466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testNormalWithSoftplusScale",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006304980000777505,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.861883526999918,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/Normal_test.py:89: NormalWithSoftplusScale.__init__ (from tensorflow.python.ops.distributions.normal) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nUse `tfd.Normal(loc, tf.nn.softplus(scale)) instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578382.1296518,
                        "msecs": 129.6517848968506,
                        "relativeCreated": 74627.71153450012,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0004263340000534299,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamShapes",
            "lineno": 71,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008281390000774991,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3291677689999233,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00039669800003139244,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testParamStaticShapes",
            "lineno": 77,
            "outcome": "passed",
            "setup": {
                "duration": 0.000747574000001805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008397295000008853,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023939599998357153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat32",
            "lineno": 401,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005588539999052955,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3283285999999634,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000307236999901761,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testQuantileFiniteGradientAtDifficultPointsFloat64",
            "lineno": 404,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006093499999906271,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.1018302059999314,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3252,
                    "message": "AssertionError: \nArrays are not equal\n\nnot equal where = (array([1, 2, 4]),)\nnot equal lhs = array([ True,  True,  True])\nnot equal rhs = array([False, False, False])\nMismatched elements: 3 / 6 (50%)\n x: array([ True,  True,  True,  True,  True,  True])\n y: array([ True, False, False,  True, False,  True])"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 406,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 400,
                        "message": "in _baseQuantileFiniteGradientAtDifficultPoints"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/Normal_test.py",
                        "lineno": 42,
                        "message": "in assertAllFinite"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3252,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testQuantileFiniteGradientAtDifficultPointsFloat64>\n\n    def testQuantileFiniteGradientAtDifficultPointsFloat64(self):\n>     self._baseQuantileFiniteGradientAtDifficultPoints(np.float64)\n\nsrc/tensorflow_tests_reduced/Normal_test.py:406: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/Normal_test.py:400: in _baseQuantileFiniteGradientAtDifficultPoints\n    self.assertAllFinite(grads[1])\nsrc/tensorflow_tests_reduced/Normal_test.py:42: in assertAllFinite\n    self.assertAllEqual(all_true, is_finite)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.Normal_test.NormalTest testMethod=testQuantileFiniteGradientAtDifficultPointsFloat64>\na = array([ True,  True,  True,  True,  True,  True])\nb = array([ True, False, False,  True, False,  True]), msg = ''\n\n    @py_func_if_in_function\n    def assertAllEqual(self, a, b, msg=None):\n      \"\"\"Asserts that two numpy arrays or Tensors have the same values.\n    \n      Args:\n        a: the expected numpy ndarray or anything can be converted to one.\n        b: the actual numpy ndarray or anything can be converted to one.\n        msg: Optional message to report on failure.\n      \"\"\"\n      if (ragged_tensor.is_ragged(a) or ragged_tensor.is_ragged(b)):\n        return self._assertRaggedEqual(a, b, msg)\n      msg = msg if msg else \"\"\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # Arbitrary bounds so that we don't print giant tensors.\n      if (b.ndim <= 3 or b.size < 500):\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" Contents: %r. \\n%s.\" % (a.shape, b.shape, b, msg))\n      else:\n        self.assertEqual(\n            a.shape, b.shape, \"Shape mismatch: expected %s, got %s.\"\n            \" %s\" % (a.shape, b.shape, msg))\n    \n      same = (a == b)\n    \n      if (a.dtype in [\n          np.float16, np.float32, np.float64, dtypes.bfloat16.as_numpy_dtype\n      ]):\n        same = np.logical_or(same, np.logical_and(np.isnan(a), np.isnan(b)))\n      msgs = [msg]\n      if not np.all(same):\n        # Adds more details to np.testing.assert_array_equal.\n        diff = np.logical_not(same)\n        if a.ndim:\n          x = a[np.where(diff)]\n          y = b[np.where(diff)]\n          msgs.append(\"not equal where = {}\".format(np.where(diff)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not equal lhs = %r\" % x)\n        msgs.append(\"not equal rhs = %r\" % y)\n    \n        if (a.dtype.kind != b.dtype.kind and\n            {a.dtype.kind, b.dtype.kind}.issubset({\"U\", \"S\", \"O\"})):\n          a_list = []\n          b_list = []\n          # OK to flatten `a` and `b` because they are guaranteed to have the\n          # same shape.\n          for out_list, flat_arr in [(a_list, a.flat), (b_list, b.flat)]:\n            for item in flat_arr:\n              if isinstance(item, str):\n                out_list.append(item.encode(\"utf-8\"))\n              else:\n                out_list.append(item)\n          a = np.array(a_list)\n          b = np.array(b_list)\n    \n>       np.testing.assert_array_equal(a, b, err_msg=\"\\n\".join(msgs))\nE       AssertionError: \nE       Arrays are not equal\nE       \nE       not equal where = (array([1, 2, 4]),)\nE       not equal lhs = array([ True,  True,  True])\nE       not equal rhs = array([False, False, False])\nE       Mismatched elements: 3 / 6 (50%)\nE        x: array([ True,  True,  True,  True,  True,  True])\nE        y: array([ True, False, False,  True, False,  True])\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3252: AssertionError"
            },
            "teardown": {
                "duration": 0.00035005199993065617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005879800000911928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.903797155999996,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003212560000065423,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Normal_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006444539999392873,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010632380000288322,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.001008858999966833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::PForTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006793370000650611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007335904999990817,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002940260000059425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_once",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006613660000311938,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2557195379999939,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031025400005546544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_create_variable_repeated",
            "lineno": 1727,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005919910000784512,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08386534900000697,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025441499997214123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/Variable_test.py::VariableTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005440299999008857,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007785709999552637,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000316645999987486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005920559999594843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16865374299993618,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002933690000190836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithDynamicallyShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005954299999757495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5057350369999085,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033879599993724696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithScalarWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006147269999701166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19591165599990745,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029303899998467386,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testEffectivelyEquivalentSizesWithStaticShapedWeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006025989999898229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18989069799999925,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002844690000074479,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMetricsCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006001760000344802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02375242799996613,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002135489999091078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdates",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005075860000260946,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20591477200002828,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002873460000500927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testMultipleUpdatesWithWeightedValues",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000606492999963848,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25836570900003153,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002928529999053353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndLabelsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005924619999859715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0023829230000274038,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002303879999772107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testPredictionsAndWeightsOfDifferentSizeRaisesValueError",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005058440000311748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015656214999921758,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022901300008015824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testUpdatesCollection",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005254930000546665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02593710300004659,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024007299998629605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::testVars",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005197350000116785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025420241000006172,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024844400002166367,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/accuracy_test.py::AccuracyTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005252879999488869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030274400000962487,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005428590000065014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasic",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006445980000080453,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5851782259999254,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002980399999614747,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testBasicCallableParams",
            "lineno": 167,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005800279999448321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3961492980000685,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000317911000024651,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testMinimizeSparseResourceVariable",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006133340000360477,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.506203027999959,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000319322999985161,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::testResourceBasic",
            "lineno": 163,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006118059999380421,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.010604444000023,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00039094299995667825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adadeltaoptimizer_test.py::AdadeltaOptimizerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007345610000584202,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016850299999759955,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00044910999997682666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::testPositiveDeltaUint8",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006606120000469673,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1463335860000825,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029861400003028393,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/adjust_brightness_test.py::AdjustBrightnessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006211280000343322,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010244090000242068,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00032123400001182745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphGradientVariable",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.000671607000072072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14453612199997679,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004833449999068762,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::testGraphModeWithGradients",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009638220000169895,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1140296410000019,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/autograph/pyct/static_analysis/liveness.py:83: Analyzer.lamba_check (from tensorflow.python.autograph.pyct.static_analysis.liveness) is deprecated and will be removed after 2023-09-23.\nInstructions for updating:\nLambda fuctions will be no more assumed to be used in the statement where they are used, or at least in the same block. https://github.com/tensorflow/tensorflow/issues/56089",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578400.7422817,
                        "msecs": 742.2816753387451,
                        "relativeCreated": 93240.34142494202,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00027280400001927774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_default_test.py::FunctionGradientsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005882309999378776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007944689999703769,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003639770000063436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllPybind11DTypeConvertibleToDType",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006676980000293042,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0020745979999219344,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002144780000890023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConstructible",
            "lineno": 42,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005094809999945937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007604470000615038,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002091759999984788,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToDType",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005167690000007497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001358903999971517,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021112600006745197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAllTypesConvertibleToNumpyDtype",
            "lineno": 59,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005086440000923176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033946139999443403,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021555799992256652,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeInvalidArgument",
            "lineno": 558,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005151809999688339,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005217870000251423,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021727799992277141,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testAsDtypeReturnsInternedVersion",
            "lineno": 562,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005062610000550194,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045206300001154887,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020865100009359594,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization0",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.000519628000006378,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006391089999624455,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022383099997114186,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization1",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005125480000742755,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005183639999586376,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021920699998645432,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization10",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005014700000174344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005126280000240513,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000211143000001357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization11",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004971280000063416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005414810000274883,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002194710000367195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization12",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004979589999720702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005276480000020456,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021228999992217723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization13",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004950990000907041,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005199129999482466,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021612900002310198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization14",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004895020000503791,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005192500000248401,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002217389999259467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization15",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005244419999144156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000517949000027329,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021204400002261536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization16",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005053959999941071,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000521237000043584,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002108260000568407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization17",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005078510000657843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005473209999991013,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021124499994584767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization18",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004991539999537054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005200699999932112,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002101900000752721,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization19",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004965360000142027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007927179999569489,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021740400006819982,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization2",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005056060000470097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005497240000522652,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022040600003947475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization20",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005046149999543559,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005212570000594496,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021836700000221754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization3",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004941680000456472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005447899999353467,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002134620000333598,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization4",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004946979998976531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005193839999719785,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002120510000622744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization5",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005320720000554502,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000520351999966806,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022144199999729608,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization6",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.00050716900000225,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005086690000553062,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021091500002512475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization7",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005217609999590422,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005473669999673803,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021120399992469174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization8",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005005369999935283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000530263999962699,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002189249998991727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSerialization9",
            "lineno": 584,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004963600000564838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005254220000097121,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021222099996975885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSubtypes",
            "lineno": 570,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004994500000066182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004266119999556395,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002282119999108545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypeSupertypes",
            "lineno": 575,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005025630000545789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044946299999537587,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021040900003299612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testDTypesHaveUniqueNames",
            "lineno": 354,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005008530000623068,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007294690000207993,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002173640000364685,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testEqWithNonTFTypes",
            "lineno": 521,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005009290000543842,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043898100000205886,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021040399997218628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testInvalid",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005044550000548043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007158219999610083,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021500000002561137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsComplex",
            "lineno": 405,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004923170000665777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005507310000893995,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021519199992781068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsFloating",
            "lineno": 385,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005209439999589449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005330340000000433,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022027900001830858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsInteger",
            "lineno": 365,
            "outcome": "passed",
            "setup": {
                "duration": 0.000505992999933369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005272399999967092,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002106969999431385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testIsUnsigned",
            "lineno": 425,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007047810000813115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005419099999244281,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021057999992990517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testLimitsUndefinedError",
            "lineno": 505,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006190079999441878,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004490860000032626,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022877900005369156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testMinMax",
            "lineno": 445,
            "outcome": "passed",
            "setup": {
                "duration": 0.000493047999952978,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004957707000016853,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002168089999941003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testNumpyConversion",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005072860000154833,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009786260000055336,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022396299993943103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonLongConversion",
            "lineno": 525,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005135659999950803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004426570000077845,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002222589999973934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testPythonTypesConversion",
            "lineno": 532,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005288510000127644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000474958000040715,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021013399998537352,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRealDtype",
            "lineno": 186,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005089589999442978,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004760779999060105,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002085070000248379,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testReduce",
            "lineno": 544,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005030710000255567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0020613330000287533,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022152400003960793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testRepr",
            "lineno": 509,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000530025999978534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047323000001142645,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/as_dtype_test.py', 510, 'Skipped: b/142725777')"
            },
            "teardown": {
                "duration": 0.00022072100000514183,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::testStringConversion",
            "lineno": 195,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005026000000043496,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009766520000766832,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022018500010290154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/as_dtype_test.py::TypesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005071839999573058,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042360999998436455,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0013412170000037804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_noop_when_both_identical",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006254539999872577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02442856400000437,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020782199999302975,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::AssertEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000473639999995612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004545729999563264,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002971630000274672,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005435440000383096,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0025388550000116084,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019990600003438885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_CanSetUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004578360000095927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004705267000076674,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019461399995179818,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_MergesShapes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046109200002319994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002006816999937655,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020585099991876632,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenDimIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004493970000112313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002160433999961242,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020000699998945493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::testStaticShape_RaisesErrorWhenRankIncompatible",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000450290000003406,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001994930000023487,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020697700006166997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assertEqual_test.py::EnsureShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045682099994337477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003775719999339344,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003599719999556328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_both_empty",
            "lineno": 88,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005617570000140404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13918531900003472,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002662329999338908,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less",
            "lineno": 51,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005745919999071702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12110071200004313,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026942400006646494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_doesnt_raise_when_less_and_broadcastable_shapes",
            "lineno": 63,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005868519999694399,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10375312400003622,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.2393515,
                        "msecs": 239.3515110015869,
                        "relativeCreated": 93737.41126060486,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00027439799998774106,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_equal",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005856020000010176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01113015600003564,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002455029999737235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005586989999528669,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012527854999916599,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.3619237,
                        "msecs": 361.9236946105957,
                        "relativeCreated": 93859.98344421387,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00023179899994829611,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_raises_when_less_but_non_broadcastable_shapes",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005380009999953472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015373311000075773,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020035800002915494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_returns_none_with_eager",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046125399990160076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007490084999972169,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021663600000465522,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004571459999169747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000608421999913844,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00019913100004487205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessTest::test_static_check_in_graph_mode",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044510399993669125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006642586999987543,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004316380000091158,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_both_empty",
            "lineno": 184,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005567609999843626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12095940799997607,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002764890000435116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_equal",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005669250000437387,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09424360199989223,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002545830000144633,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal",
            "lineno": 144,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005547389999946972,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0836026929999889,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 962, in assert_less\n    return _binary_assert('<', 'assert_less', math_ops.less, np.less, x, y, data,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.6305788,
                        "msecs": 630.5787563323975,
                        "relativeCreated": 94128.63850593567,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/AssertGuard/Identity' type=Identity>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.6316772,
                        "msecs": 631.6771507263184,
                        "relativeCreated": 94129.73690032959,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.6321156,
                        "msecs": 632.1156024932861,
                        "relativeCreated": 94130.17535209656,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00024078599994936667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_doesnt_raise_when_less_equal_and_broadcastable_shapes",
            "lineno": 156,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005405059999930018,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1016363740000088,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002752489999693353,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_greater",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005739150000181326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012953111000001627,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.816725,
                        "msecs": 816.7250156402588,
                        "relativeCreated": 94314.78476524353,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "==================================\nObject was never used (type <class 'tensorflow.python.framework.ops.Operation'>):\n<tf.Operation 'assert_less_equal/Assert/Assert' type=Assert>\nIf you want to mark it as used call its \"mark_used()\" method.\nIt was originally created here:\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n==================================",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py",
                        "filename": "tf_should_use.py",
                        "module": "tf_should_use",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 80,
                        "funcName": "_check_sated",
                        "created": 1683578401.8172781,
                        "msecs": 817.2781467437744,
                        "relativeCreated": 94315.33789634705,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00026571599994440476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_raises_when_less_equal_but_non_broadcastable_shapes",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005538249999972322,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015173860999993849,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022344000001339737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048328100001526764,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005540079999946101,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000204393999979402,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/assert_less_test.py::AssertLessEqualTest::test_static_check_in_graph_mode",
            "lineno": 197,
            "outcome": "passed",
            "setup": {
                "duration": 0.000486217000002398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006298776999983602,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004172309999148638,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBasic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005799519999527547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1673480770000424,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1940: is_gpu_available (from tensorflow.python.framework.test_util) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.config.list_physical_devices('GPU')` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578401.9700418,
                        "msecs": 970.0417518615723,
                        "relativeCreated": 94468.10150146484,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.000385918999995738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testBfloat16",
            "lineno": 93,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007100179999497414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.061269333000041115,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026030100002572,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testCastToTypeOfVariable",
            "lineno": 161,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005716480000046431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04851207300009719,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022666000006665854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testGradients",
            "lineno": 172,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005509309999069956,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1121770810000271,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 189,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 342,
                        "message": "in compute_gradient"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 285,
                        "message": "in _compute_gradient_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py",
                        "lineno": 110,
                        "message": "in decorated_eager"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 184,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 1003,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2001,
                        "message": "in cast"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testGradients>\n\n    def testGradients(self):\n      t = [dtypes.float32, dtypes.float64, dtypes.complex64, dtypes.complex128]\n      for src_t in t:\n        for dst_t in t:\n          with self.cached_session():\n            x = constant_op.constant(1.0, src_t)\n    \n            def cast(x, dst_t=dst_t):\n              x = array_ops.identity(x)\n              timer = tensorflow_op_timer()\n              with timer:\n                x = math_ops.cast(x, dst_t)\n                timer.gen.send(x)\n              return x\n    \n            err = gradient_checker_v2.max_error(\n>               *gradient_checker_v2.compute_gradient(cast, [x]))\n\nsrc/tensorflow_tests_reduced/cast_test.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:342: in compute_gradient\n    return _compute_gradient_list(f, x, delta)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:285: in _compute_gradient_list\n    y = f_temp(*xs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker_v2.py:110: in decorated_eager\n    return f(*map(ops.convert_to_tensor, xs_data))\nsrc/tensorflow_tests_reduced/cast_test.py:184: in cast\n    x = math_ops.cast(x, dst_t)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1003: in cast\n    x = gen_math_ops.cast(x, base_type, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2001: in cast\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035382800001571013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testInfNan",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006351289999884102,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014136792999920544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002351789999011089,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testIntToFloatBoundary",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005482560000018566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006302851000100418,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022733800005880767,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testNotImplemented",
            "lineno": 158,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005177799999955823,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024190657999952236,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3490,
                    "message": "AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 160,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/cast_test.py",
                        "lineno": 157,
                        "message": "in _OpError"
                    },
                    {
                        "path": "/usr/lib/python3.8/contextlib.py",
                        "lineno": 131,
                        "message": "in __exit__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3490,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n>       yield\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3486: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nx = array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), dtype = tf.string, err = 'Cast.*int.*string.*'\n\n    def _OpError(self, x, dtype, err):\n      with self.assertRaisesOpError(err):\n        timer = tensorflow_op_timer()\n        with timer:\n>         test = math_ops.cast(x, dtype)\n\nsrc/tensorflow_tests_reduced/cast_test.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string), kwargs = {}\n\n    def error_handler(*args, **kwargs):\n      try:\n        if not is_traceback_filtering_enabled():\n>         return fn(*args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), tf.string), kwargs = {}, result = NotImplemented\n\n    @traceback_utils.filter_traceback\n    def op_dispatch_handler(*args, **kwargs):\n      \"\"\"Call `dispatch_target`, peforming dispatch when appropriate.\"\"\"\n    \n      # Type-based dispatch system (dispatch v2):\n      if api_dispatcher is not None:\n        if iterable_params is not None:\n          args, kwargs = replace_iterable_params(args, kwargs, iterable_params)\n        result = api_dispatcher.Dispatch(args, kwargs)\n        if result is not NotImplemented:\n          return result\n    \n      # Fallback dispatch system (dispatch v1):\n      try:\n>       return dispatch_target(*args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>\ndtype = tf.string, name = None\n\n    @tf_export(\"cast\", \"dtypes.cast\")\n    @dispatch.register_unary_elementwise_api\n    @dispatch.add_dispatch_support\n    def cast(x, dtype, name=None):\n      \"\"\"Casts a tensor to a new type.\n    \n      The operation casts `x` (in case of `Tensor`) or `x.values`\n      (in case of `SparseTensor` or `IndexedSlices`) to `dtype`.\n    \n      For example:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      Notice `tf.cast` has an alias `tf.dtypes.cast`:\n    \n      >>> x = tf.constant([1.8, 2.2], dtype=tf.float32)\n      >>> tf.dtypes.cast(x, tf.int32)\n      <tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>\n    \n      The operation supports data types (for `x` and `dtype`) of\n      `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`, `int64`,\n      `float16`, `float32`, `float64`, `complex64`, `complex128`, `bfloat16`.\n      In case of casting from complex types (`complex64`, `complex128`) to real\n      types, only the real part of `x` is returned. In case of casting from real\n      types to complex types (`complex64`, `complex128`), the imaginary part of the\n      returned value is set to `0`. The handling of complex types here matches the\n      behavior of numpy.\n    \n      Note casting nan and inf values to integral types has undefined behavior.\n    \n      Args:\n        x: A `Tensor` or `SparseTensor` or `IndexedSlices` of numeric type. It could\n          be `uint8`, `uint16`, `uint32`, `uint64`, `int8`, `int16`, `int32`,\n          `int64`, `float16`, `float32`, `float64`, `complex64`, `complex128`,\n          `bfloat16`.\n        dtype: The destination type. The list of supported dtypes is the same as\n          `x`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` or `SparseTensor` or `IndexedSlices` with same shape as `x` and\n          same type as `dtype`.\n    \n      Raises:\n        TypeError: If `x` cannot be cast to the `dtype`.\n      \"\"\"\n      base_type = dtypes.as_dtype(dtype).base_dtype\n      if isinstance(x,\n                    (ops.Tensor, _resource_variable_type)) and base_type == x.dtype:\n        return x\n      with ops.name_scope(name, \"Cast\", [x]) as name:\n        if isinstance(x, sparse_tensor.SparseTensor):\n          values_cast = cast(x.values, base_type, name=name)\n          x = sparse_tensor.SparseTensor(x.indices, values_cast, x.dense_shape)\n        elif isinstance(x, indexed_slices.IndexedSlices):\n          values_cast = cast(x.values, base_type, name=name)\n          x = indexed_slices.IndexedSlices(values_cast, x.indices, x.dense_shape)\n        else:\n          # TODO(josh11b): If x is not already a Tensor, we could return\n          # ops.convert_to_tensor(x, dtype=dtype, ...)  here, but that\n          # allows some conversions that cast() can't do, e.g. casting numbers to\n          # strings.\n          x = ops.convert_to_tensor(x, name=\"x\")\n          if x.dtype != base_type:\n>           x = gen_math_ops.cast(x, base_type, name=name)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:1003: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = <tf.Tensor: shape=(10,), dtype=int64, numpy=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])>\nDstT = tf.string, Truncate = False, name = None\n\n    def cast(x, DstT, Truncate=False, name=None):\n      r\"\"\"Cast x of type SrcT to y of DstT.\n    \n      Args:\n        x: A `Tensor`.\n        DstT: A `tf.DType`.\n        Truncate: An optional `bool`. Defaults to `False`.\n        name: A name for the operation (optional).\n    \n      Returns:\n        A `Tensor` of type `DstT`.\n      \"\"\"\n      _ctx = _context._context or _context.context()\n      tld = _ctx._thread_local_data\n      if tld.is_eager:\n        try:\n          _result = pywrap_tfe.TFE_Py_FastPathExecute(\n            _ctx, \"Cast\", name, x, \"DstT\", DstT, \"Truncate\", Truncate)\n          return _result\n        except _core._NotOkStatusException as e:\n>         _ops.raise_from_not_ok_status(e, name)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2001: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\n\n    def testNotImplemented(self):\n>     self._OpError(np.arange(0, 10), dtypes.string, \"Cast.*int.*string.*\")\n\nsrc/tensorflow_tests_reduced/cast_test.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/cast_test.py:157: in _OpError\n    self.evaluate(math_ops.cast(x, dtype))\n/usr/lib/python3.8/contextlib.py:131: in __exit__\n    self.gen.throw(type, value, traceback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.cast_test.CastOpTest testMethod=testNotImplemented>\nexception_type = <class 'tensorflow.python.framework.errors_impl.OpError'>\nexpected_err_re_or_predicate = 'Cast.*int.*string.*'\n\n    @contextlib.contextmanager\n    def assertRaisesWithPredicateMatch(self, exception_type,\n                                       expected_err_re_or_predicate):\n      \"\"\"Returns a context manager to enclose code expected to raise an exception.\n    \n      If the exception is an OpError, the op stack is also included in the message\n      predicate search.\n    \n      Args:\n        exception_type: The expected type of exception that should be raised.\n        expected_err_re_or_predicate: If this is callable, it should be a function\n          of one argument that inspects the passed-in exception and returns True\n          (success) or False (please fail the test). Otherwise, the error message\n          is expected to match this regular expression partially.\n    \n      Returns:\n        A context manager to surround code that is expected to raise an\n        exception.\n      \"\"\"\n      if callable(expected_err_re_or_predicate):\n        predicate = expected_err_re_or_predicate\n      else:\n    \n        def predicate(e):\n          err_str = e.message if isinstance(e, errors.OpError) else str(e)\n          op = e.op if isinstance(e, errors.OpError) else None\n          while op is not None:\n            err_str += \"\\nCaused by: \" + op.name\n            op = op._original_op  # pylint: disable=protected-access\n          logging.info(\"Searching within error strings: '%s' within '%s'\",\n                       expected_err_re_or_predicate, err_str)\n          return re.search(expected_err_re_or_predicate, err_str)\n    \n      try:\n        yield\n        self.fail(exception_type.__name__ + \" not raised\")\n      except Exception as e:  # pylint: disable=broad-except\n        if not isinstance(e, exception_type) or not predicate(e):\n>         raise AssertionError(\"Exception of type %s: %s\" %\n                               (str(type(e)), str(e)))\nE         AssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.InvalidArgumentError'>: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Cast]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3490: AssertionError"
            },
            "teardown": {
                "duration": 0.00035833000004004134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRandom",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006084469999905195,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6429860849999613,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002967080000644273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testRefDtype",
            "lineno": 191,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006079739999904632,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006377413999985038,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020639299998492788,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::testSmallValues",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004998970000542613,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12321292699994046,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002811580000070535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::CastOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005965330000208269,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0021336529999871345,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004907660000981195,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::testCast",
            "lineno": 204,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005628650000062407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08438735899994754,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029378799990809057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cast_test.py::SparseTensorCastTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006233509999447051,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000735057000042616,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000336700999923778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::testClip",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006979690000434857,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.1826221689999556,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003088780000553015,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/clip_test.py::MathTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000633291999974972,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022692669999742066,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000314473999992515,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput0",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005838989999347177,
                "outcome": "passed"
            },
            "call": {
                "duration": 9.37685354000007,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/compute_gradient_error_test.py:56: compute_gradient_error (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578407.5733216,
                        "msecs": 573.3215808868408,
                        "relativeCreated": 100071.38133049011,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gradient_checker.py:390: compute_gradient (from tensorflow.python.ops.gradient_checker) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse tf.test.compute_gradient in 2.0, which has better support for functions. Note that the two versions have different usage, so code change is needed.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578407.5735714,
                        "msecs": 573.5714435577393,
                        "relativeCreated": 100071.63119316101,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0005870640000011917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::testOutputAndGradient2DInput01",
            "lineno": 77,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010641710000527382,
                "outcome": "passed"
            },
            "call": {
                "duration": 8.988354197000035,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003303979999600415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/compute_gradient_error_test.py::MomentsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006689770000321005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012146349999966333,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00039583099999163096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_concat",
            "lineno": 1727,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006705529999635473,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005078868999930819,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ConcatV2]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1732,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/concat_test.py",
                        "lineno": 44,
                        "message": "in test_concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 1232,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py",
                        "lineno": 875,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 1821,
                        "message": "in concat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 1262,
                        "message": "in concat_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.concat_test.TensorArrayOpsTest testMethod=test_concat>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if not tf2.enabled():\n        self.skipTest(\"Test is only compatible with v2\")\n    \n>     return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/concat_test.py:44: in test_concat\n    result = values.concat()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py:1232: in concat\n    return self._implementation.concat(name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/tensor_array_ops.py:875: in concat\n    return array_ops.concat(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:1821: in concat\n    return gen_array_ops.concat_v2(values=values, axis=axis, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:1262: in concat_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ConcatV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003781599999683749,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/concat_test.py::TensorArrayOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006922799999529161,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007750099999839222,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00030209900000954804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number0",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005876679999801127,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005622349999612197,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019366999993053469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number1",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004668110000238812,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047355300000617717,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001897600000120292,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number10",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045582000007016177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004369110000652654,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021294800001214753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number11",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046126100005494663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004361100000096485,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019142799999372073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number12",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045641799999884825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042491099998187565,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001915889999963838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number13",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004591819999859581,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043599399998583976,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002002129999709723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number14",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045860699992772425,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004269509998948706,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020129499989707256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number15",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004537739999932455,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004602359999807959,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019867200001044694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number16",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045036900007744407,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004331739999088313,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019006000002264045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number17",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045547199999873555,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043342599997231446,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018932299997231894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number18",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004465369999024915,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004339289999961693,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018950699995912146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number19",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004744450000089273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004357850000360486,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019207100001494837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number2",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004442020000396951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004340049999882467,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001901179999777014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number20",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048495599992293137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043602200003078906,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019044299995130132,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number3",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004559459999882165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004232149999552348,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018928100007542525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number4",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007004150000966547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044681700001092395,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019175500005985668,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number5",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004561740000781356,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043508599992492236,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018875199998547032,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number6",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004749109999693246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000427219000016521,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002152570000362175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number7",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004565089999459815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004395549999571813,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001919400000360838,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number8",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045363200001702353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004312879999588404,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019199500002287095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_convert_string_to_number9",
            "lineno": 18,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045554799999081297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042884499998763204,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001999649999788744,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_grad_error",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044517399999222107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17492883399995662,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002900639999552368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_pfor",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006674549999843293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17610038800000893,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002871829999548936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_eager_const_xla",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006092579999403824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09236797599999136,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003020860000333414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/constant_test.py::ConstantOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000754630999949768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008207729999867297,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00091759200006436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeInvalidOutputShape",
            "lineno": 317,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006842120000101204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23654336999993575,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027607000004081783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSame",
            "lineno": 66,
            "outcome": "failed",
            "setup": {
                "duration": 0.000573788999986391,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24694626999996672,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 83,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeSame>\n\n    def testConv2DTransposeSame(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 2, 2, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 12, 8, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"SAME\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([ 2, 12,  8,  2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dty...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 2, 2, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0006228199999895878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeShapeInference",
            "lineno": 303,
            "outcome": "passed",
            "setup": {
                "duration": 0.000760442000000694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.43197034699994674,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003025449999540797,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeSingleStride",
            "lineno": 22,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005920339999647695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0969080220000933,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 39,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeSingleStride>\n\n    def testConv2DTransposeSingleStride(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 1, 1, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 6, 4, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"SAME\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([2, 6, 4, 2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dtype=i...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 1, 1, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000394507999999405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testConv2DTransposeValid",
            "lineno": 105,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006100269999933516,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18458836000002066,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 122,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2675,
                        "message": "in conv2d_transpose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py",
                        "lineno": 2761,
                        "message": "in conv2d_transpose_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1427,
                        "message": "in conv2d_backprop_input"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py",
                        "lineno": 1521,
                        "message": "in conv2d_backprop_input_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testConv2DTransposeValid>\n\n    def testConv2DTransposeValid(self):\n      with self.cached_session():\n        for dtype in (dtypes.float32, dtypes.int32):\n          strides = [1, 2, 2, 1]\n    \n          # Input, output: [batch, height, width, depth]\n          x_shape = [2, 6, 4, 3]\n          y_shape = [2, 13, 9, 2]\n    \n          # Filter: [kernel_height, kernel_width, output_depth, input_depth]\n          f_shape = [3, 3, 2, 3]\n    \n          x = constant_op.constant(1, shape=x_shape, name=\"x\", dtype=dtype)\n          f = constant_op.constant(1, shape=f_shape, name=\"filter\", dtype=dtype)\n          timer = tensorflow_op_timer()\n          with timer:\n>           output = nn_ops.conv2d_transpose(\n              x, f, y_shape, strides=strides, padding=\"VALID\")\n\nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2675: in conv2d_transpose\n    return conv2d_transpose_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/nn_ops.py:2761: in conv2d_transpose_v2\n    return gen_nn_ops.conv2d_backprop_input(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1427: in conv2d_backprop_input\n    return conv2d_backprop_input_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_nn_ops.py:1521: in conv2d_backprop_input_eager_fallback\n    _result = _execute.execute(b\"Conv2DBackpropInput\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'Conv2DBackpropInput', num_outputs = 1\ninputs = [<tf.Tensor: shape=(4,), dtype=int32, numpy=array([ 2, 13,  9,  2], dtype=int32)>, <tf.Tensor: shape=(3, 3, 2, 3), dty...         [1, 1, 1]],\n\n        [[1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1],\n         [1, 1, 1]]]], dtype=int32)>]\nattrs = ('T', 3, 'strides', [1, 2, 2, 1], 'use_cudnn_on_gpu', True, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Conv2DBackpropInput]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035707699998965836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::testGradient",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005858839999746124,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.732994453999936,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                    "lineno": 180,
                    "message": "AssertionError: 0.99609375 not less than 0.0006"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv2d_transpose_test.py",
                        "lineno": 180,
                        "message": "in testGradient"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv2d_transpose_test.Conv2DTransposeTest testMethod=testGradient>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv2d_transpose_test.py:180: in testGradient\n    self.assertLess(err, err_tolerance)\nE   AssertionError: 0.99609375 not less than 0.0006"
            },
            "teardown": {
                "duration": 0.00032116199997744843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv2d_transpose_test.py::Conv2DTransposeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005903310000121564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005229959999724088,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00040329699993435497,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D1x1x1Filter",
            "lineno": 266,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006301140000459782,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9152525739999646,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17]),)\nnot close lhs = [0.18518519 0.22222222 0.25925926 0.40740741 0.5        0.59259259\n 0.62962963 0.77777778 0.92592593 0.85185185 1.05555556 1.25925926\n 1.07407407 1.33333333 1.59259259 1.2962963  1.61111111 1.92592593]\nnot close rhs = [0.18558311 0.22287369 0.25994682 0.4079132  0.50086975 0.59360504\n 0.6302452  0.778862   0.92726517 0.85235596 1.056427   1.2602692\n 1.0733871  1.3331146  1.5926285  1.2974548  1.6132812  1.928894  ]\nnot close dif = [3.97924624e-04 6.51467744e-04 6.87563120e-04 5.05798008e-04\n 8.69750977e-04 1.01245150e-03 6.15578740e-04 1.08421951e-03\n 1.33923724e-03 5.04107031e-04 8.71441953e-04 1.00990504e-03\n 6.86924004e-04 2.18705977e-04 3.58890039e-05 1.15853398e-03\n 2.17014000e-03 2.96811297e-03]\nnot close tol = [1.1855831e-06 1.2228737e-06 1.2599469e-06 1.4079133e-06 1.5008698e-06\n 1.5936050e-06 1.6302452e-06 1.7788620e-06 1.9272652e-06 1.8523560e-06\n 2.0564271e-06 2.2602692e-06 2.0733871e-06 2.3331145e-06 2.5926283e-06\n 2.2974548e-06 2.6132811e-06 2.9288940e-06]\ndtype = float64, shape = (18,)\nMismatched elements: 18 / 18 (100%)\nMax absolute difference: 0.00296811\nMax relative difference: 0.00292304\n x: array([0.185185, 0.222222, 0.259259, 0.407407, 0.5     , 0.592593,\n       0.62963 , 0.777778, 0.925926, 0.851852, 1.055556, 1.259259,\n       1.074074, 1.333333, 1.592593, 1.296296, 1.611111, 1.925926])\n y: array([0.185583, 0.222874, 0.259947, 0.407913, 0.50087 , 0.593605,\n       0.630245, 0.778862, 0.927265, 0.852356, 1.056427, 1.260269,\n       1.073387, 1.333115, 1.592628, 1.297455, 1.613281, 1.928894],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 275,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D1x1x1Filter>\n\n    def testConv3D1x1x1Filter(self):\n      expected_output = [\n          0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5, 0.59259259,\n          0.62962963, 0.77777778, 0.92592593, 0.85185185, 1.05555556, 1.25925926,\n          1.07407407, 1.33333333, 1.59259259, 1.2962963, 1.61111111, 1.92592593\n      ]\n    \n      # These are equivalent to the Conv2D1x1 case.\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 2, 3, 1, 3],\n          filter_in_sizes=[1, 1, 1, 3, 3],\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:275: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D1x1x1Filter>\na = array([0.18518519, 0.22222222, 0.25925926, 0.40740741, 0.5       ,\n       0.59259259, 0.62962963, 0.77777778, 0.925925...5185185,\n       1.05555556, 1.25925926, 1.07407407, 1.33333333, 1.59259259,\n       1.2962963 , 1.61111111, 1.92592593])\nb = array([0.18558311, 0.22287369, 0.25994682, 0.4079132 , 0.50086975,\n       0.59360504, 0.6302452 , 0.778862  , 0.927265... 1.056427  , 1.2602692 , 1.0733871 , 1.3331146 , 1.5926285 ,\n       1.2974548 , 1.6132812 , 1.928894  ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17]),)\nE       not close lhs = [0.18518519 0.22222222 0.25925926 0.40740741 0.5        0.59259259\nE        0.62962963 0.77777778 0.92592593 0.85185185 1.05555556 1.25925926\nE        1.07407407 1.33333333 1.59259259 1.2962963  1.61111111 1.92592593]\nE       not close rhs = [0.18558311 0.22287369 0.25994682 0.4079132  0.50086975 0.59360504\nE        0.6302452  0.778862   0.92726517 0.85235596 1.056427   1.2602692\nE        1.0733871  1.3331146  1.5926285  1.2974548  1.6132812  1.928894  ]\nE       not close dif = [3.97924624e-04 6.51467744e-04 6.87563120e-04 5.05798008e-04\nE        8.69750977e-04 1.01245150e-03 6.15578740e-04 1.08421951e-03\nE        1.33923724e-03 5.04107031e-04 8.71441953e-04 1.00990504e-03\nE        6.86924004e-04 2.18705977e-04 3.58890039e-05 1.15853398e-03\nE        2.17014000e-03 2.96811297e-03]\nE       not close tol = [1.1855831e-06 1.2228737e-06 1.2599469e-06 1.4079133e-06 1.5008698e-06\nE        1.5936050e-06 1.6302452e-06 1.7788620e-06 1.9272652e-06 1.8523560e-06\nE        2.0564271e-06 2.2602692e-06 2.0733871e-06 2.3331145e-06 2.5926283e-06\nE        2.2974548e-06 2.6132811e-06 2.9288940e-06]\nE       dtype = float64, shape = (18,)\nE       Mismatched elements: 18 / 18 (100%)\nE       Max absolute difference: 0.00296811\nE       Max relative difference: 0.00292304\nE        x: array([0.185185, 0.222222, 0.259259, 0.407407, 0.5     , 0.592593,\nE              0.62963 , 0.777778, 0.925926, 0.851852, 1.055556, 1.259259,\nE              1.074074, 1.333333, 1.592593, 1.296296, 1.611111, 1.925926])\nE        y: array([0.185583, 0.222874, 0.259947, 0.407913, 0.50087 , 0.593605,\nE              0.630245, 0.778862, 0.927265, 0.852356, 1.056427, 1.260269,\nE              1.073387, 1.333115, 1.592628, 1.297455, 1.613281, 1.928894],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003571890000557687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2Filter",
            "lineno": 294,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005738240000709993,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1435224240000252,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  4.2650463   4.35763889  4.45023148\n  6.73032407  6.89236111  7.05439815  7.22337963  7.39930556  7.57523148\n  9.68865741  9.93402778 10.17939815 10.18171296 10.44097222 10.70023148]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  4.269069   4.3580117  4.452488\n  6.734431   6.89104    7.055836   7.22305    7.393152   7.5719604\n  9.693895   9.931797  10.181059  10.180401  10.431629  10.694742 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00402289 0.00037283 0.00225647\n 0.00410672 0.00132126 0.00143805 0.00032951 0.00615332 0.00327103\n 0.00523793 0.00223075 0.00166073 0.00131211 0.00934304 0.00548928]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 5.2690689e-06 5.3580115e-06\n 5.4524880e-06 7.7344312e-06 7.8910398e-06 8.0558366e-06 8.2230499e-06\n 8.3931527e-06 8.5719603e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05\n 1.1180401e-05 1.1431630e-05 1.1694742e-05]\ndtype = float64, shape = (18,)\nMismatched elements: 18 / 18 (100%)\nMax absolute difference: 0.00934304\nMax relative difference: 0.00094234\n x: array([ 3.771991,  3.850694,  3.929398,  4.265046,  4.357639,  4.450231,\n        6.730324,  6.892361,  7.054398,  7.22338 ,  7.399306,  7.575231,\n        9.688657,  9.934028, 10.179398, 10.181713, 10.440972, 10.700231])\n y: array([ 3.772795,  3.848132,  3.928471,  4.269069,  4.358012,  4.452488,\n        6.734431,  6.89104 ,  7.055836,  7.22305 ,  7.393152,  7.57196 ,\n        9.693895,  9.931797, 10.181059, 10.180401, 10.431629, 10.694742],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 303,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2Filter>\n\n    def testConv3D2x2x2Filter(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 4.2650463, 4.35763889, 4.45023148,\n          6.73032407, 6.89236111, 7.05439815, 7.22337963, 7.39930556, 7.57523148,\n          9.68865741, 9.93402778, 10.17939815, 10.18171296, 10.44097222,\n          10.70023148\n      ]\n      # expected_shape = [1, 3, 1, 2, 5]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],  # b, z, y, x, fin\n          filter_in_sizes=[2, 2, 2, 3, 3],  # z, y, x, fin, fout\n          stride=1,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2Filter>\na = array([ 3.77199074,  3.85069444,  3.92939815,  4.2650463 ,  4.35763889,\n        4.45023148,  6.73032407,  6.89236111, ...\n        7.39930556,  7.57523148,  9.68865741,  9.93402778, 10.17939815,\n       10.18171296, 10.44097222, 10.70023148])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  4.269069 ,  4.3580117,\n        4.452488 ,  6.734431 ,  6.89104  ,  7.05583...  7.393152 ,  7.5719604,  9.693895 ,  9.931797 , 10.181059 ,\n       10.180401 , 10.431629 , 10.694742 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  4.2650463   4.35763889  4.45023148\nE         6.73032407  6.89236111  7.05439815  7.22337963  7.39930556  7.57523148\nE         9.68865741  9.93402778 10.17939815 10.18171296 10.44097222 10.70023148]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  4.269069   4.3580117  4.452488\nE         6.734431   6.89104    7.055836   7.22305    7.393152   7.5719604\nE         9.693895   9.931797  10.181059  10.180401  10.431629  10.694742 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00402289 0.00037283 0.00225647\nE        0.00410672 0.00132126 0.00143805 0.00032951 0.00615332 0.00327103\nE        0.00523793 0.00223075 0.00166073 0.00131211 0.00934304 0.00548928]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 5.2690689e-06 5.3580115e-06\nE        5.4524880e-06 7.7344312e-06 7.8910398e-06 8.0558366e-06 8.2230499e-06\nE        8.3931527e-06 8.5719603e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05\nE        1.1180401e-05 1.1431630e-05 1.1694742e-05]\nE       dtype = float64, shape = (18,)\nE       Mismatched elements: 18 / 18 (100%)\nE       Max absolute difference: 0.00934304\nE       Max relative difference: 0.00094234\nE        x: array([ 3.771991,  3.850694,  3.929398,  4.265046,  4.357639,  4.450231,\nE               6.730324,  6.892361,  7.054398,  7.22338 ,  7.399306,  7.575231,\nE               9.688657,  9.934028, 10.179398, 10.181713, 10.440972, 10.700231])\nE        y: array([ 3.772795,  3.848132,  3.928471,  4.269069,  4.358012,  4.452488,\nE               6.734431,  6.89104 ,  7.055836,  7.22305 ,  7.393152,  7.57196 ,\nE               9.693895,  9.931797, 10.181059, 10.180401, 10.431629, 10.694742],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003615440000430681,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2",
            "lineno": 330,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005854100000988183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7868921949999503,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  9.68865741  9.93402778 10.17939815]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  9.693895   9.931797  10.181059 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00523793 0.00223075 0.00166073]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 1.0693896e-05 1.0931797e-05\n 1.1181060e-05]\ndtype = float64, shape = (6,)\nMismatched elements: 6 / 6 (100%)\nMax absolute difference: 0.00523793\nMax relative difference: 0.00066586\n x: array([ 3.771991,  3.850694,  3.929398,  9.688657,  9.934028, 10.179398])\n y: array([ 3.772795,  3.848132,  3.928471,  9.693895,  9.931797, 10.181059],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 335,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2>\n\n    def testConv3D2x2x2FilterStride2(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 9.68865741, 9.93402778, 10.17939815\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:335: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2>\na = array([ 3.77199074,  3.85069444,  3.92939815,  9.68865741,  9.93402778,\n       10.17939815])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  9.693895 ,  9.931797 ,\n       10.181059 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  9.68865741  9.93402778 10.17939815]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  9.693895   9.931797  10.181059 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00523793 0.00223075 0.00166073]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 1.0693896e-05 1.0931797e-05\nE        1.1181060e-05]\nE       dtype = float64, shape = (6,)\nE       Mismatched elements: 6 / 6 (100%)\nE       Max absolute difference: 0.00523793\nE       Max relative difference: 0.00066586\nE        x: array([ 3.771991,  3.850694,  3.929398,  9.688657,  9.934028, 10.179398])\nE        y: array([ 3.772795,  3.848132,  3.928471,  9.693895,  9.931797, 10.181059],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00034694600003604137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3D2x2x2FilterStride2Same",
            "lineno": 357,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005694039999752931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8100894010000275,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]),)\nnot close lhs = [ 3.77199074  3.85069444  3.92939815  2.0162037   2.06597222  2.11574074\n  9.68865741  9.93402778 10.17939815  4.59953704  4.73263889  4.86574074]\nnot close rhs = [ 3.772795   3.8481321  3.9284706  2.018177   2.0660875  2.1168408\n  9.693895   9.931797  10.181059   4.5991755  4.7283955  4.863406 ]\nnot close dif = [0.00080422 0.00256231 0.00092754 0.00197333 0.00011526 0.0011001\n 0.00523793 0.00223075 0.00166073 0.00036159 0.00424343 0.00233456]\nnot close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 3.0181768e-06 3.0660876e-06\n 3.1168406e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05 5.5991754e-06\n 5.7283955e-06 5.8634059e-06]\ndtype = float64, shape = (12,)\nMismatched elements: 12 / 12 (100%)\nMax absolute difference: 0.00523793\nMax relative difference: 0.00097778\n x: array([ 3.771991,  3.850694,  3.929398,  2.016204,  2.065972,  2.115741,\n        9.688657,  9.934028, 10.179398,  4.599537,  4.732639,  4.865741])\n y: array([ 3.772795,  3.848132,  3.928471,  2.018177,  2.066087,  2.116841,\n        9.693895,  9.931797, 10.181059,  4.599175,  4.728395,  4.863406],\n      dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 363,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2Same>\n\n    def testConv3D2x2x2FilterStride2Same(self):\n      expected_output = [\n          3.77199074, 3.85069444, 3.92939815, 2.0162037, 2.06597222, 2.11574074,\n          9.68865741, 9.93402778, 10.17939815, 4.59953704, 4.73263889, 4.86574074\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 4, 2, 3, 3],\n          filter_in_sizes=[2, 2, 2, 3, 3],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:363: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3D2x2x2FilterStride2Same>\na = array([ 3.77199074,  3.85069444,  3.92939815,  2.0162037 ,  2.06597222,\n        2.11574074,  9.68865741,  9.93402778, 10.17939815,  4.59953704,\n        4.73263889,  4.86574074])\nb = array([ 3.772795 ,  3.8481321,  3.9284706,  2.018177 ,  2.0660875,\n        2.1168408,  9.693895 ,  9.931797 , 10.181059 ,  4.5991755,\n        4.7283955,  4.863406 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11]),)\nE       not close lhs = [ 3.77199074  3.85069444  3.92939815  2.0162037   2.06597222  2.11574074\nE         9.68865741  9.93402778 10.17939815  4.59953704  4.73263889  4.86574074]\nE       not close rhs = [ 3.772795   3.8481321  3.9284706  2.018177   2.0660875  2.1168408\nE         9.693895   9.931797  10.181059   4.5991755  4.7283955  4.863406 ]\nE       not close dif = [0.00080422 0.00256231 0.00092754 0.00197333 0.00011526 0.0011001\nE        0.00523793 0.00223075 0.00166073 0.00036159 0.00424343 0.00233456]\nE       not close tol = [4.7727949e-06 4.8481320e-06 4.9284704e-06 3.0181768e-06 3.0660876e-06\nE        3.1168406e-06 1.0693896e-05 1.0931797e-05 1.1181060e-05 5.5991754e-06\nE        5.7283955e-06 5.8634059e-06]\nE       dtype = float64, shape = (12,)\nE       Mismatched elements: 12 / 12 (100%)\nE       Max absolute difference: 0.00523793\nE       Max relative difference: 0.00097778\nE        x: array([ 3.771991,  3.850694,  3.929398,  2.016204,  2.065972,  2.115741,\nE               9.688657,  9.934028, 10.179398,  4.599537,  4.732639,  4.865741])\nE        y: array([ 3.772795,  3.848132,  3.928471,  2.018177,  2.066087,  2.116841,\nE               9.693895,  9.931797, 10.181059,  4.599175,  4.728395,  4.863406],\nE             dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00035432699996817973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DExpandedBatch",
            "lineno": 202,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005788500000107888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.29187598800001524,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000300817000038478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStride3",
            "lineno": 341,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006628200000022844,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5703288029999385,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35]),)\nnot close lhs = [1.51140873 1.57167659 1.63194444 1.56349206 1.62673611 1.68998016\n 1.6155754  1.68179563 1.74801587 1.9280754  2.01215278 2.09623016\n 1.98015873 2.0672123  2.15426587 2.03224206 2.12227183 2.21230159\n 4.4280754  4.65500992 4.88194444 4.48015873 4.71006944 4.93998016\n 4.53224206 4.76512897 4.99801587 4.84474206 5.09548611 5.34623016\n 4.8968254  5.15054563 5.40426587 4.94890873 5.20560516 5.46230159]\nnot close rhs = [1.51026   1.5717468 1.631105  1.5631132 1.62763   1.6899709 1.6161865\n 1.6837463 1.7490752 1.9281542 2.0137792 2.0968578 1.9800482 2.0686655\n 2.1546855 2.0317478 2.1234112 2.2124262 4.4270706 4.657242  4.882351\n 4.475237  4.70837   4.936392  4.5309963 4.767193  4.998232  4.8397083\n 5.0939293 5.3426723 4.8954678 5.152752  5.4045124 4.948618  5.2089806\n 5.46377  ]\nnot close dif = [1.14874408e-03 7.02361719e-05 8.39493864e-04 3.78847415e-04\n 8.93885346e-04 9.30905548e-06 6.11099596e-04 1.95070789e-03\n 1.05930433e-03 7.88301178e-05 1.62638336e-03 6.27626179e-04\n 1.10550374e-04 1.45320446e-03 4.19627284e-04 4.94242007e-04\n 1.13934859e-03 1.24595608e-04 1.00478232e-03 2.23190129e-03\n 4.06481631e-04 4.92183730e-03 1.69923126e-03 3.58832956e-03\n 1.24573737e-03 2.06387058e-03 2.16017817e-04 5.03373175e-03\n 1.55681923e-03 3.55781198e-03 1.35764182e-03 2.20629261e-03\n 2.46535396e-04 2.90794819e-04 3.37540030e-03 1.46832272e-03]\nnot close tol = [2.5102599e-06 2.5717468e-06 2.6311050e-06 2.5631132e-06 2.6276300e-06\n 2.6899709e-06 2.6161865e-06 2.6837463e-06 2.7490751e-06 2.9281541e-06\n 3.0137790e-06 3.0968577e-06 2.9800481e-06 3.0686656e-06 3.1546856e-06\n 3.0317478e-06 3.1234113e-06 3.2124262e-06 5.4270704e-06 5.6572417e-06\n 5.8823507e-06 5.4752368e-06 5.7083703e-06 5.9363915e-06 5.5309961e-06\n 5.7671928e-06 5.9982317e-06 5.8397081e-06 6.0939292e-06 6.3426724e-06\n 5.8954674e-06 6.1527517e-06 6.4045121e-06 5.9486179e-06 6.2089803e-06\n 6.4637698e-06]\ndtype = float64, shape = (36,)\nMismatched elements: 36 / 36 (100%)\nMax absolute difference: 0.00503373\nMax relative difference: 0.00115855\n x: array([1.511409, 1.571677, 1.631944, 1.563492, 1.626736, 1.68998 ,\n       1.615575, 1.681796, 1.748016, 1.928075, 2.012153, 2.09623 ,\n       1.980159, 2.067212, 2.154266, 2.032242, 2.122272, 2.212302,...\n y: array([1.51026 , 1.571747, 1.631105, 1.563113, 1.62763 , 1.689971,\n       1.616186, 1.683746, 1.749075, 1.928154, 2.013779, 2.096858,\n       1.980048, 2.068666, 2.154685, 2.031748, 2.123411, 2.212426,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 351,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStride3>\n\n    def testConv3DStride3(self):\n      expected_output = [\n          1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611, 1.68998016,\n          1.6155754, 1.68179563, 1.74801587, 1.9280754, 2.01215278, 2.09623016,\n          1.98015873, 2.0672123, 2.15426587, 2.03224206, 2.12227183, 2.21230159,\n          4.4280754, 4.65500992, 4.88194444, 4.48015873, 4.71006944, 4.93998016,\n          4.53224206, 4.76512897, 4.99801587, 4.84474206, 5.09548611, 5.34623016,\n          4.8968254, 5.15054563, 5.40426587, 4.94890873, 5.20560516, 5.46230159\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 6, 7, 8, 2],\n          filter_in_sizes=[3, 2, 1, 2, 3],\n          stride=3,\n          padding=\"VALID\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStride3>\na = array([1.51140873, 1.57167659, 1.63194444, 1.56349206, 1.62673611,\n       1.68998016, 1.6155754 , 1.68179563, 1.748015...4474206, 5.09548611, 5.34623016,\n       4.8968254 , 5.15054563, 5.40426587, 4.94890873, 5.20560516,\n       5.46230159])\nb = array([1.51026  , 1.5717468, 1.631105 , 1.5631132, 1.62763  , 1.6899709,\n       1.6161865, 1.6837463, 1.7490752, 1.928...3, 5.0939293, 5.3426723,\n       4.8954678, 5.152752 , 5.4045124, 4.948618 , 5.2089806, 5.46377  ],\n      dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\nE              34, 35]),)\nE       not close lhs = [1.51140873 1.57167659 1.63194444 1.56349206 1.62673611 1.68998016\nE        1.6155754  1.68179563 1.74801587 1.9280754  2.01215278 2.09623016\nE        1.98015873 2.0672123  2.15426587 2.03224206 2.12227183 2.21230159\nE        4.4280754  4.65500992 4.88194444 4.48015873 4.71006944 4.93998016\nE        4.53224206 4.76512897 4.99801587 4.84474206 5.09548611 5.34623016\nE        4.8968254  5.15054563 5.40426587 4.94890873 5.20560516 5.46230159]\nE       not close rhs = [1.51026   1.5717468 1.631105  1.5631132 1.62763   1.6899709 1.6161865\nE        1.6837463 1.7490752 1.9281542 2.0137792 2.0968578 1.9800482 2.0686655\nE        2.1546855 2.0317478 2.1234112 2.2124262 4.4270706 4.657242  4.882351\nE        4.475237  4.70837   4.936392  4.5309963 4.767193  4.998232  4.8397083\nE        5.0939293 5.3426723 4.8954678 5.152752  5.4045124 4.948618  5.2089806\nE        5.46377  ]\nE       not close dif = [1.14874408e-03 7.02361719e-05 8.39493864e-04 3.78847415e-04\nE        8.93885346e-04 9.30905548e-06 6.11099596e-04 1.95070789e-03\nE        1.05930433e-03 7.88301178e-05 1.62638336e-03 6.27626179e-04\nE        1.10550374e-04 1.45320446e-03 4.19627284e-04 4.94242007e-04\nE        1.13934859e-03 1.24595608e-04 1.00478232e-03 2.23190129e-03\nE        4.06481631e-04 4.92183730e-03 1.69923126e-03 3.58832956e-03\nE        1.24573737e-03 2.06387058e-03 2.16017817e-04 5.03373175e-03\nE        1.55681923e-03 3.55781198e-03 1.35764182e-03 2.20629261e-03\nE        2.46535396e-04 2.90794819e-04 3.37540030e-03 1.46832272e-03]\nE       not close tol = [2.5102599e-06 2.5717468e-06 2.6311050e-06 2.5631132e-06 2.6276300e-06\nE        2.6899709e-06 2.6161865e-06 2.6837463e-06 2.7490751e-06 2.9281541e-06\nE        3.0137790e-06 3.0968577e-06 2.9800481e-06 3.0686656e-06 3.1546856e-06\nE        3.0317478e-06 3.1234113e-06 3.2124262e-06 5.4270704e-06 5.6572417e-06\nE        5.8823507e-06 5.4752368e-06 5.7083703e-06 5.9363915e-06 5.5309961e-06\nE        5.7671928e-06 5.9982317e-06 5.8397081e-06 6.0939292e-06 6.3426724e-06\nE        5.8954674e-06 6.1527517e-06 6.4045121e-06 5.9486179e-06 6.2089803e-06\nE        6.4637698e-06]\nE       dtype = float64, shape = (36,)\nE       Mismatched elements: 36 / 36 (100%)\nE       Max absolute difference: 0.00503373\nE       Max relative difference: 0.00115855\nE        x: array([1.511409, 1.571677, 1.631944, 1.563492, 1.626736, 1.68998 ,\nE              1.615575, 1.681796, 1.748016, 1.928075, 2.012153, 2.09623 ,\nE              1.980159, 2.067212, 2.154266, 2.032242, 2.122272, 2.212302,...\nE        y: array([1.51026 , 1.571747, 1.631105, 1.563113, 1.62763 , 1.689971,\nE              1.616186, 1.683746, 1.749075, 1.928154, 2.013779, 2.096858,\nE              1.980048, 2.068666, 2.154685, 2.031748, 2.123411, 2.212426,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.000350271000002067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConv3DStrides",
            "lineno": 309,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005952230000048075,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.5619489099999555,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\n       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\n       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]),)\nnot close lhs = [0.06071429 0.08988095 0.10238095 0.11488095 0.12738095 0.13988095\n 0.08452381 0.26071429 0.35238095 0.36488095 0.37738095 0.38988095\n 0.40238095 0.23452381 0.46071429 0.61488095 0.62738095 0.63988095\n 0.65238095 0.66488095 0.38452381 1.12738095 1.48988095 1.50238095\n 1.51488095 1.52738095 1.53988095 0.88452381 1.32738095 1.75238095\n 1.76488095 1.77738095 1.78988095 1.80238095 1.03452381 1.52738095\n 2.01488095 2.02738095 2.03988095 2.05238095 2.06488095 1.18452381\n 2.19404762 2.88988095 2.90238095 2.91488095 2.92738095 2.93988095\n 1.68452381 2.39404762 3.15238095 3.16488095 3.17738095 3.18988095\n 3.20238095 1.83452381 2.59404762 3.41488095 3.42738095 3.43988095\n 3.45238095 3.46488095 1.98452381]\nnot close rhs = [0.06075615 0.08989057 0.10241169 0.11495757 0.12747324 0.14000964\n 0.08457255 0.26033306 0.35245085 0.36498642 0.37736034 0.38981485\n 0.4024315  0.23471117 0.46113014 0.6155443  0.6279192  0.63963985\n 0.65233994 0.66487503 0.38476753 1.1256828  1.4886723  1.5020218\n 1.5156975  1.5293732  1.5410957  0.8851776  1.3281059  1.755022\n 1.7686977  1.7813969  1.790514   1.8006134  1.032383   1.5276031\n 2.0168152  2.0285378  2.0409088  2.0539322  2.0676079  1.1867523\n 2.194107   2.8920593  2.903782   2.916153   2.9291763  2.942852\n 1.6869965  2.3919754  3.1518974  3.1655731  3.1792488  3.1909714\n 3.2033424  1.8355064  2.5930939  3.4143448  3.4254112  3.439087\n 3.4527626  3.4664383  1.9859734 ]\nnot close dif = [4.18569078e-05 9.61944847e-06 3.07373741e-05 7.66210297e-05\n 9.22851303e-05 1.28691647e-04 4.87436346e-05 3.81228782e-04\n 6.98976257e-05 1.05469678e-04 2.06060669e-05 6.60963318e-05\n 5.05380371e-05 1.87360197e-04 4.15852212e-04 6.63369153e-04\n 5.38247083e-04 2.41095569e-04 4.10146973e-05 5.91948242e-06\n 2.43722349e-04 1.69811919e-03 1.20869353e-03 3.59160449e-04\n 8.16529248e-04 1.99221895e-03 1.21478364e-03 6.53802305e-04\n 7.24976514e-04 2.64109895e-03 3.81678865e-03 4.01591584e-03\n 6.33042310e-04 1.76754668e-03 2.14084491e-03 2.22199414e-04\n 1.93423555e-03 1.15680024e-03 1.02786348e-03 1.55123994e-03\n 2.72692964e-03 2.22850934e-03 5.94356641e-05 2.17837617e-03\n 1.40094087e-03 1.27200410e-03 1.79538057e-03 2.97107026e-03\n 2.47264996e-03 2.07221717e-03 4.83519580e-04 6.92170117e-04\n 1.86785981e-03 1.09042451e-03 9.61487744e-04 9.82629209e-04\n 9.53747930e-04 5.36162402e-04 1.96972563e-03 7.94035938e-04\n 3.81653760e-04 1.55734346e-03 1.44954815e-03]\nnot close tol = [1.0607562e-06 1.0898906e-06 1.1024117e-06 1.1149575e-06 1.1274732e-06\n 1.1400097e-06 1.0845725e-06 1.2603331e-06 1.3524509e-06 1.3649865e-06\n 1.3773604e-06 1.3898149e-06 1.4024315e-06 1.2347111e-06 1.4611301e-06\n 1.6155443e-06 1.6279191e-06 1.6396398e-06 1.6523400e-06 1.6648751e-06\n 1.3847675e-06 2.1256828e-06 2.4886722e-06 2.5020217e-06 2.5156974e-06\n 2.5293732e-06 2.5410957e-06 1.8851777e-06 2.3281059e-06 2.7550220e-06\n 2.7686979e-06 2.7813969e-06 2.7905139e-06 2.8006134e-06 2.0323830e-06\n 2.5276031e-06 3.0168153e-06 3.0285378e-06 3.0409087e-06 3.0539322e-06\n 3.0676078e-06 2.1867522e-06 3.1941072e-06 3.8920593e-06 3.9037818e-06\n 3.9161528e-06 3.9291763e-06 3.9428519e-06 2.6869966e-06 3.3919755e-06\n 4.1518974e-06 4.1655730e-06 4.1792487e-06 4.1909711e-06 4.2033425e-06\n 2.8355064e-06 3.5930939e-06 4.4143449e-06 4.4254111e-06 4.4390868e-06\n 4.4527624e-06 4.4664384e-06 2.9859734e-06]\ndtype = float64, shape = (63,)\nMismatched elements: 63 / 63 (100%)\nMax absolute difference: 0.00401592\nMax relative difference: 0.00225436\n x: array([0.060714, 0.089881, 0.102381, 0.114881, 0.127381, 0.139881,\n       0.084524, 0.260714, 0.352381, 0.364881, 0.377381, 0.389881,\n       0.402381, 0.234524, 0.460714, 0.614881, 0.627381, 0.639881,...\n y: array([0.060756, 0.089891, 0.102412, 0.114958, 0.127473, 0.14001 ,\n       0.084573, 0.260333, 0.352451, 0.364986, 0.37736 , 0.389815,\n       0.402431, 0.234711, 0.46113 , 0.615544, 0.627919, 0.63964 ,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 324,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStrides>\n\n    def testConv3DStrides(self):\n      expected_output = [\n          0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095, 0.13988095,\n          0.08452381, 0.26071429, 0.35238095, 0.36488095, 0.37738095, 0.38988095,\n          0.40238095, 0.23452381, 0.46071429, 0.61488095, 0.62738095, 0.63988095,\n          0.65238095, 0.66488095, 0.38452381, 1.12738095, 1.48988095, 1.50238095,\n          1.51488095, 1.52738095, 1.53988095, 0.88452381, 1.32738095, 1.75238095,\n          1.76488095, 1.77738095, 1.78988095, 1.80238095, 1.03452381, 1.52738095,\n          2.01488095, 2.02738095, 2.03988095, 2.05238095, 2.06488095, 1.18452381,\n          2.19404762, 2.88988095, 2.90238095, 2.91488095, 2.92738095, 2.93988095,\n          1.68452381, 2.39404762, 3.15238095, 3.16488095, 3.17738095, 3.18988095,\n          3.20238095, 1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n          3.45238095, 3.46488095, 1.98452381\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 5, 8, 7, 1],\n          filter_in_sizes=[1, 2, 3, 1, 1],\n          stride=[2, 3, 1],  # different stride for each spatial dimension\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:324: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testConv3DStrides>\na = array([0.06071429, 0.08988095, 0.10238095, 0.11488095, 0.12738095,\n       0.13988095, 0.08452381, 0.26071429, 0.352380...0238095,\n       1.83452381, 2.59404762, 3.41488095, 3.42738095, 3.43988095,\n       3.45238095, 3.46488095, 1.98452381])\nb = array([0.06075615, 0.08989057, 0.10241169, 0.11495757, 0.12747324,\n       0.14000964, 0.08457255, 0.26033306, 0.352450... 1.8355064 , 2.5930939 , 3.4143448 , 3.4254112 , 3.439087  ,\n       3.4527626 , 3.4664383 , 1.9859734 ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,\nE              17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\nE              34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\nE              51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]),)\nE       not close lhs = [0.06071429 0.08988095 0.10238095 0.11488095 0.12738095 0.13988095\nE        0.08452381 0.26071429 0.35238095 0.36488095 0.37738095 0.38988095\nE        0.40238095 0.23452381 0.46071429 0.61488095 0.62738095 0.63988095\nE        0.65238095 0.66488095 0.38452381 1.12738095 1.48988095 1.50238095\nE        1.51488095 1.52738095 1.53988095 0.88452381 1.32738095 1.75238095\nE        1.76488095 1.77738095 1.78988095 1.80238095 1.03452381 1.52738095\nE        2.01488095 2.02738095 2.03988095 2.05238095 2.06488095 1.18452381\nE        2.19404762 2.88988095 2.90238095 2.91488095 2.92738095 2.93988095\nE        1.68452381 2.39404762 3.15238095 3.16488095 3.17738095 3.18988095\nE        3.20238095 1.83452381 2.59404762 3.41488095 3.42738095 3.43988095\nE        3.45238095 3.46488095 1.98452381]\nE       not close rhs = [0.06075615 0.08989057 0.10241169 0.11495757 0.12747324 0.14000964\nE        0.08457255 0.26033306 0.35245085 0.36498642 0.37736034 0.38981485\nE        0.4024315  0.23471117 0.46113014 0.6155443  0.6279192  0.63963985\nE        0.65233994 0.66487503 0.38476753 1.1256828  1.4886723  1.5020218\nE        1.5156975  1.5293732  1.5410957  0.8851776  1.3281059  1.755022\nE        1.7686977  1.7813969  1.790514   1.8006134  1.032383   1.5276031\nE        2.0168152  2.0285378  2.0409088  2.0539322  2.0676079  1.1867523\nE        2.194107   2.8920593  2.903782   2.916153   2.9291763  2.942852\nE        1.6869965  2.3919754  3.1518974  3.1655731  3.1792488  3.1909714\nE        3.2033424  1.8355064  2.5930939  3.4143448  3.4254112  3.439087\nE        3.4527626  3.4664383  1.9859734 ]\nE       not close dif = [4.18569078e-05 9.61944847e-06 3.07373741e-05 7.66210297e-05\nE        9.22851303e-05 1.28691647e-04 4.87436346e-05 3.81228782e-04\nE        6.98976257e-05 1.05469678e-04 2.06060669e-05 6.60963318e-05\nE        5.05380371e-05 1.87360197e-04 4.15852212e-04 6.63369153e-04\nE        5.38247083e-04 2.41095569e-04 4.10146973e-05 5.91948242e-06\nE        2.43722349e-04 1.69811919e-03 1.20869353e-03 3.59160449e-04\nE        8.16529248e-04 1.99221895e-03 1.21478364e-03 6.53802305e-04\nE        7.24976514e-04 2.64109895e-03 3.81678865e-03 4.01591584e-03\nE        6.33042310e-04 1.76754668e-03 2.14084491e-03 2.22199414e-04\nE        1.93423555e-03 1.15680024e-03 1.02786348e-03 1.55123994e-03\nE        2.72692964e-03 2.22850934e-03 5.94356641e-05 2.17837617e-03\nE        1.40094087e-03 1.27200410e-03 1.79538057e-03 2.97107026e-03\nE        2.47264996e-03 2.07221717e-03 4.83519580e-04 6.92170117e-04\nE        1.86785981e-03 1.09042451e-03 9.61487744e-04 9.82629209e-04\nE        9.53747930e-04 5.36162402e-04 1.96972563e-03 7.94035938e-04\nE        3.81653760e-04 1.55734346e-03 1.44954815e-03]\nE       not close tol = [1.0607562e-06 1.0898906e-06 1.1024117e-06 1.1149575e-06 1.1274732e-06\nE        1.1400097e-06 1.0845725e-06 1.2603331e-06 1.3524509e-06 1.3649865e-06\nE        1.3773604e-06 1.3898149e-06 1.4024315e-06 1.2347111e-06 1.4611301e-06\nE        1.6155443e-06 1.6279191e-06 1.6396398e-06 1.6523400e-06 1.6648751e-06\nE        1.3847675e-06 2.1256828e-06 2.4886722e-06 2.5020217e-06 2.5156974e-06\nE        2.5293732e-06 2.5410957e-06 1.8851777e-06 2.3281059e-06 2.7550220e-06\nE        2.7686979e-06 2.7813969e-06 2.7905139e-06 2.8006134e-06 2.0323830e-06\nE        2.5276031e-06 3.0168153e-06 3.0285378e-06 3.0409087e-06 3.0539322e-06\nE        3.0676078e-06 2.1867522e-06 3.1941072e-06 3.8920593e-06 3.9037818e-06\nE        3.9161528e-06 3.9291763e-06 3.9428519e-06 2.6869966e-06 3.3919755e-06\nE        4.1518974e-06 4.1655730e-06 4.1792487e-06 4.1909711e-06 4.2033425e-06\nE        2.8355064e-06 3.5930939e-06 4.4143449e-06 4.4254111e-06 4.4390868e-06\nE        4.4527624e-06 4.4664384e-06 2.9859734e-06]\nE       dtype = float64, shape = (63,)\nE       Mismatched elements: 63 / 63 (100%)\nE       Max absolute difference: 0.00401592\nE       Max relative difference: 0.00225436\nE        x: array([0.060714, 0.089881, 0.102381, 0.114881, 0.127381, 0.139881,\nE              0.084524, 0.260714, 0.352381, 0.364881, 0.377381, 0.389881,\nE              0.402381, 0.234524, 0.460714, 0.614881, 0.627381, 0.639881,...\nE        y: array([0.060756, 0.089891, 0.102412, 0.114958, 0.127473, 0.14001 ,\nE              0.084573, 0.260333, 0.352451, 0.364986, 0.37736 , 0.389815,\nE              0.402431, 0.234711, 0.46113 , 0.615544, 0.627919, 0.63964 ,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00035879300003216485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionClass3DExpandedBatch",
            "lineno": 224,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005907860000888832,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14211506300000565,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032770699999673525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testConvolutionWith2SpatialDimensionsAndExpandedBatch",
            "lineno": 250,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006120399999645088,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13593788299999687,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028892899990751175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006108960000119623,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.375542698999993,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 725,
                        "message": "in testFilterGradientKernelSizeMatchesInputSize"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientKernelSizeMatchesInputSize>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:725: in testFilterGradientKernelSizeMatchesInputSize\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003940830000601636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.000684027999909631,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.572282126000005,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 653,
                        "message": "in testFilterGradientSamePaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideOne>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:653: in testFilterGradientSamePaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0004805120000810348,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008038249999344771,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.40595108399998,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 701,
                        "message": "in testFilterGradientSamePaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideThree>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:701: in testFilterGradientSamePaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00036948699994354683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006142060000229321,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.7820862979999674,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 677,
                        "message": "in testFilterGradientSamePaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientSamePaddingStrideTwo>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:677: in testFilterGradientSamePaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0005524910000076488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0009026239999911922,
                "outcome": "passed"
            },
            "call": {
                "duration": 7.366732796000065,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 1.0 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 581,
                        "message": "in testFilterGradientValidPaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideOne>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:581: in testFilterGradientValidPaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 1.0 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00041656600001260813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006655290000026071,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.111359117999996,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 1.0 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 774,
                        "message": "in testFilterGradientValidPaddingStrideOneFastPath"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideOneFastPath>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:774: in testFilterGradientValidPaddingStrideOneFastPath\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 1.0 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00036610400002246024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006145700000388388,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.652465057999962,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.99609375 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 629,
                        "message": "in testFilterGradientValidPaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideThree>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:629: in testFilterGradientValidPaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.99609375 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003521900000578171,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testFilterGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005844510000088121,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.970447044000025,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.92578125 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 605,
                        "message": "in testFilterGradientValidPaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testFilterGradientValidPaddingStrideTwo>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:605: in testFilterGradientValidPaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.92578125 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003567040000689303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientKernelSizeMatchesInputSize",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006321079999906942,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.683534340999927,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.98828125 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 737,
                        "message": "in testInputGradientKernelSizeMatchesInputSize"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientKernelSizeMatchesInputSize>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:737: in testInputGradientKernelSizeMatchesInputSize\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.98828125 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003735520000418546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingDifferentStrides",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006106270000145742,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.709990763000064,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.97265625 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 713,
                        "message": "in testInputGradientSamePaddingDifferentStrides"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingDifferentStrides>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:713: in testInputGradientSamePaddingDifferentStrides\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.97265625 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003401709999479863,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005950560000655969,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.632720672000005,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.91796875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 641,
                        "message": "in testInputGradientSamePaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideOne>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:641: in testInputGradientSamePaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.91796875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0008973720000540197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0010066250000591026,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.8386387400000785,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 689,
                        "message": "in testInputGradientSamePaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideThree>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:689: in testInputGradientSamePaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00040056700004242884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientSamePaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006434809999973368,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.440511149999907,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 665,
                        "message": "in testInputGradientSamePaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientSamePaddingStrideTwo>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:665: in testInputGradientSamePaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003392969999822526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOne",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005731339999783813,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.0889119170000185,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 569,
                        "message": "in testInputGradientValidPaddingStrideOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideOne>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:569: in testInputGradientValidPaddingStrideOne\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003325139999788007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideOneFastPath",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006018349999976635,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.526305950000051,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 762,
                        "message": "in testInputGradientValidPaddingStrideOneFastPath"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideOneFastPath>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:762: in testInputGradientValidPaddingStrideOneFastPath\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003396810000140249,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideThree",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006117039999935514,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.680948083999965,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 617,
                        "message": "in testInputGradientValidPaddingStrideThree"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideThree>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:617: in testInputGradientValidPaddingStrideThree\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.00039688799995474255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testInputGradientValidPaddingStrideTwo",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006867390000024898,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.476811029000032,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/conv3d_test.py",
                    "lineno": 560,
                    "message": "AssertionError: 0.9921875 not less than 0.005"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 593,
                        "message": "in testInputGradientValidPaddingStrideTwo"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 564,
                        "message": "in ConstructAndTestGradient"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 560,
                        "message": "in _ConstructAndTestGradientForConfig"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testInputGradientValidPaddingStrideTwo>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:593: in testInputGradientValidPaddingStrideTwo\n    self.ConstructAndTestGradient(\nsrc/tensorflow_tests_reduced/conv3d_test.py:564: in ConstructAndTestGradient\n    self._ConstructAndTestGradientForConfig(data_format=data_format,\nsrc/tensorflow_tests_reduced/conv3d_test.py:560: in _ConstructAndTestGradientForConfig\n    self.assertLess(err, tolerance)\nE   AssertionError: 0.9921875 not less than 0.005"
            },
            "teardown": {
                "duration": 0.0003534740000077363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSizeMatchesInputSize",
            "lineno": 442,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005867390000275918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8758216530000027,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00037521100000503793,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testKernelSmallerThanStride",
            "lineno": 399,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006273889999874882,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9693808310000804,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 1, 2, 3, 4, 5, 6]),)\nnot close lhs = [0.03703704 0.11111111 0.25925926 0.33333333 0.7037037  0.77777778\n 0.92592593]\nnot close rhs = [0.03710938 0.11132812 0.25976562 0.33398438 0.703125   0.77734375\n 0.92578125]\nnot close dif = [7.23350e-05 2.17015e-04 5.06365e-04 6.51045e-04 5.78700e-04 4.34030e-04\n 1.44680e-04]\nnot close tol = [1.0371093e-06 1.1113282e-06 1.2597657e-06 1.3339843e-06 1.7031250e-06\n 1.7773438e-06 1.9257814e-06]\ndtype = float64, shape = (8,)\nMismatched elements: 7 / 8 (87.5%)\nMax absolute difference: 0.00065105\nMax relative difference: 0.00194933\n x: array([0.037037, 0.111111, 0.259259, 0.333333, 0.703704, 0.777778,\n       0.925926, 1.      ])\n y: array([0.037109, 0.111328, 0.259766, 0.333984, 0.703125, 0.777344,\n       0.925781, 1.      ], dtype=float32)"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 405,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/conv3d_test.py",
                        "lineno": 124,
                        "message": "in _VerifyValues"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3165,
                        "message": "in assertAllCloseAccordingToType"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSmallerThanStride>\n\n    def testKernelSmallerThanStride(self):\n      expected_output = [\n          0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037, 0.77777778,\n          0.92592593, 1.\n      ]\n>     self._VerifyValues(\n          tensor_in_sizes=[1, 3, 3, 3, 1],\n          filter_in_sizes=[1, 1, 1, 1, 1],\n          stride=2,\n          padding=\"SAME\",\n          expected=expected_output)\n\nsrc/tensorflow_tests_reduced/conv3d_test.py:405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/conv3d_test.py:124: in _VerifyValues\n    self.assertAllCloseAccordingToType(expected, value.flatten())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3165: in assertAllCloseAccordingToType\n    self.assertAllClose(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.conv3d_test.Conv3DTest testMethod=testKernelSmallerThanStride>\na = array([0.03703704, 0.11111111, 0.25925926, 0.33333333, 0.7037037 ,\n       0.77777778, 0.92592593, 1.        ])\nb = array([0.03710938, 0.11132812, 0.25976562, 0.33398438, 0.703125  ,\n       0.77734375, 0.92578125, 1.        ], dtype=float32)\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 1, 2, 3, 4, 5, 6]),)\nE       not close lhs = [0.03703704 0.11111111 0.25925926 0.33333333 0.7037037  0.77777778\nE        0.92592593]\nE       not close rhs = [0.03710938 0.11132812 0.25976562 0.33398438 0.703125   0.77734375\nE        0.92578125]\nE       not close dif = [7.23350e-05 2.17015e-04 5.06365e-04 6.51045e-04 5.78700e-04 4.34030e-04\nE        1.44680e-04]\nE       not close tol = [1.0371093e-06 1.1113282e-06 1.2597657e-06 1.3339843e-06 1.7031250e-06\nE        1.7773438e-06 1.9257814e-06]\nE       dtype = float64, shape = (8,)\nE       Mismatched elements: 7 / 8 (87.5%)\nE       Max absolute difference: 0.00065105\nE       Max relative difference: 0.00194933\nE        x: array([0.037037, 0.111111, 0.259259, 0.333333, 0.703704, 0.777778,\nE              0.925926, 1.      ])\nE        y: array([0.037109, 0.111328, 0.259766, 0.333984, 0.703125, 0.777344,\nE              0.925781, 1.      ], dtype=float32)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00035481999998410174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::testZeroSizedFilterThrowsIllegalArgument",
            "lineno": 450,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005771660000846168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04845550300001378,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003014139999777399,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/conv3d_test.py::Conv3DTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005637240000169186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006269230000270909,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000976368999999977,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::testToTensor",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006311419999747159,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15457728799992765,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034505099995385535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::IndexedSlicesTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006366129999832992,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010146690000283343,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003413089999639851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToInvalidTensorType",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006459200000108467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0035878350000757564,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002486729999873205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToLongLongTensorType",
            "lineno": 185,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005135659999950803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008643514000027608,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002550739999378493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorEager",
            "lineno": 99,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005089840000209733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026978399999961766,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002637889999732579,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorFromInvalidTensor",
            "lineno": 196,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005235990000755919,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006625972000051661,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002578690000518691,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedArray",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005135569999765721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027212488000031954,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002668839999842021,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedMix",
            "lineno": 142,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005287449999968885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11324469899989253,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003339869999763323,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTensors",
            "lineno": 124,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006023019999474855,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08981100500000139,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035794899997654284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorNestedTuple",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006062459999611747,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011980692000065574,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026521400002366136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorPreferred",
            "lineno": 152,
            "outcome": "passed",
            "setup": {
                "duration": 0.000577663999933975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07814083100004154,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002564100000199687,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testConvertToTensorProtocol",
            "lineno": 202,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005487660000653705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00911157899997761,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002545099999906597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::testNoConvert",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005358649999607223,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016996299999618714,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024742100004004897,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/convert_to_tensor_test.py::OperationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005226509999829432,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004873810000844969,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0006071859999110529,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::testCumProdAndSum",
            "lineno": 55,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006447569999181724,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044843199998467753,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002488129999846933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/cum_prod_test.py::ArrayMethodsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005228360000728571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004871449999654942,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003219890000991654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testBool",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006422919999522492,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025212450000026365,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002272939999556911,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testComplex",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047555499997997686,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13172701500002404,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_14' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_14'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_14}}]]\n\nOriginal stack trace for 'AsString_14':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 249, in testComplex\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.5812426,
                        "msecs": 581.242561340332,
                        "relativeCreated": 228079.3023109436,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00025976400002036826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testFloat",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005030029999488761,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.201993831999971,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_32' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n      output = string_ops.as_string(input_, scientific=True, shortest=True)\nNode: 'AsString_32'\nCannot select both scientific and shortest notation\n\t [[{{node AsString_32}}]]\n\nOriginal stack trace for 'AsString_32':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 82, in testFloat\n    output = string_ops.as_string(input_, scientific=True, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.7744808,
                        "msecs": 774.4808197021484,
                        "relativeCreated": 228272.54056930542,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_33' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n      output = string_ops.as_string(input_, fill=\"ab\")\nNode: 'AsString_33'\nFill string must be one or fewer characters\n\t [[{{node AsString_33}}]]\n\nOriginal stack trace for 'AsString_33':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 86, in testFloat\n    output = string_ops.as_string(input_, fill=\"ab\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.784216,
                        "msecs": 784.2159271240234,
                        "relativeCreated": 228282.2756767273,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002870700000130455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testHalfInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005641989999958241,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011810329000013553,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023900400003640243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000500083000019913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1518574730000637,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_9' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_9'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_9}}]]\n\nOriginal stack trace for 'AsString_9':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.8543112,
                        "msecs": 854.3112277984619,
                        "relativeCreated": 228352.37097740173,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_10' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_10'\nscientific and shortest format not supported for datatype int64\n\t [[{{node AsString_10}}]]\n\nOriginal stack trace for 'AsString_10':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.8628132,
                        "msecs": 862.8132343292236,
                        "relativeCreated": 228360.8729839325,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_11' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_11'\nprecision not supported for datatype int64\n\t [[{{node AsString_11}}]]\n\nOriginal stack trace for 'AsString_11':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.8709922,
                        "msecs": 870.9921836853027,
                        "relativeCreated": 228369.05193328857,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_21' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n      output = string_ops.as_string(input_, scientific=True)\nNode: 'AsString_21'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_21}}]]\n\nOriginal stack trace for 'AsString_21':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 121, in testInt\n    output = string_ops.as_string(input_, scientific=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.9335911,
                        "msecs": 933.5911273956299,
                        "relativeCreated": 228431.6508769989,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_22' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n      output = string_ops.as_string(input_, shortest=True)\nNode: 'AsString_22'\nscientific and shortest format not supported for datatype uint64\n\t [[{{node AsString_22}}]]\n\nOriginal stack trace for 'AsString_22':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 125, in testInt\n    output = string_ops.as_string(input_, shortest=True)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.9428542,
                        "msecs": 942.8541660308838,
                        "relativeCreated": 228440.91391563416,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'AsString_23' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n      output = string_ops.as_string(input_, precision=0)\nNode: 'AsString_23'\nprecision not supported for datatype uint64\n\t [[{{node AsString_23}}]]\n\nOriginal stack trace for 'AsString_23':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/decode_test.py\", line 129, in testInt\n    output = string_ops.as_string(input_, precision=0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_string_ops.py\", line 119, in as_string\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578535.952018,
                        "msecs": 952.0180225372314,
                        "relativeCreated": 228450.0777721405,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00029805400004079274,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::testLargeInt",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005412949999481498,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011930452999990848,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024717400003737566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/decode_test.py::AsStringOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005040539999754401,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004912250000188578,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00047893399994336505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006064909999849988,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005393610000510307,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023862000000463013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004754670000011174,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004891940000106842,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022144299998672068,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045727499991699005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046669400001064787,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022525200006384694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044969700002184254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048067500006254704,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022920300000350835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008526179999535088,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004908199999817953,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00024217099996803881,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045620899993537023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047804200005430175,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022409000007428403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004818620000150986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005069180000418783,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002217580000660746,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045115499995063146,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004774239999960628,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022859700004573824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046229299994138273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004874830000289876,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022129000001314125,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045793799995408335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004623670000682978,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002435000000104992,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045824100004665524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048248299992792454,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002235339999288044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048262999996495637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004711320000296837,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0005641290000539811,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004551739999669735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004652659999919706,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002257169999211328,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045322400001168717,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004788610000332483,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022529299997131602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004932269999926575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004760680000117645,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022031799994692847,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005398959999638464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048455999990437704,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023744599991459836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045016299998223985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047924099999363534,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021785299998100527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045869100006257213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004633850001027895,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002176120000285664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045529399994848063,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004794280000623985,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002248280000003433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044857299997147493,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002797286000031818,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002345630000490928,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004485639999529667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047505899999578105,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002180369999678078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004568639999433799,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047115600000324775,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000223392999942007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046192900003916293,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047913800005972007,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002270149999503701,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046939499998188694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048303400001259433,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002220159999524185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004462370000055671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048152300007586746,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023650500008898234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045049199991353817,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047674899997218745,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021954199996798707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045641899998827284,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004590270000335295,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00024349099999199098,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004550769999696058,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008238299999447918,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023295100004361302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044869199996355746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048318300002847536,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023544099997252488,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044361000004755624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046283099993615906,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022235800008729711,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045663100002002466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048451500003920955,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002322479999747884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004603109999834487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004736320000802152,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002214889999549996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046897100003207015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004885160000185351,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002405489999546262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044559200000549026,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046581200001583056,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022852900008274446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045398300005672354,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004686029999447783,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022170800002641045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045892100001765357,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007990210000343723,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021900000001551234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044818500009569107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000470169000095666,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000228450999998131,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044452500003444584,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004927449999740929,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002390270000205419,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004570419999936348,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047677700001713674,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021979299992835877,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046387300005790166,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004708879999952842,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002239189999500013,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004510850000087885,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048244100003103085,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022485099998448277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004746519999798693,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004860490000737627,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000219934000028843,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044698500005324604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047034400006396027,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023548900003333983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045023400002719427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008187579999230366,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002218700000184981,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044647100003203377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004732459999559069,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000221427999917978,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000446557000032044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004728999999770167,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022711799999797222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004514729999982592,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004987780000647035,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023049899994020961,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046349199999440316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004665620000423587,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002182839999704811,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004551500001070963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047157300002709235,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022470599992630014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004550319999907515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047925100000156817,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022070299996812537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004708970000137924,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004764840000461845,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002182819999916319,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007893380000041361,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047681499995633203,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002443390000053114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004612879999967845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000476584000011826,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021953200007374107,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004536569999800122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004711079999424328,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022099000000253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044984999999542197,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0041221180000547974,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4722fd700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4a5a52670>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4a5a52670>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036438799997995375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006447109999498934,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02466202499999781,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fd91160>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f23deb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f23deb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003517829999282185,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006401009999308371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024588086999983716,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c91f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f340460>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f340460>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034271900005933276,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006252430000586173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00416247900000144,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f65e820>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f40bee0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f40bee0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003609729999425326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000610923000067487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004264522999960718,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c9310>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f6efb20>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f6efb20>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004038240000454607,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006600530000469007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005014048000020921,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fd91160>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f76eeb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f76eeb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036811300003591896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006406500000366577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0040856619999658506,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4723090d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fa16a30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fa16a30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003618800000140254,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006529449999561621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004132779000087794,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4722fd8b0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e831f10>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e831f10>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003443919999881473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006583549999277238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004147494999983792,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc472309d30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc472419bb0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc472419bb0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003639000000248416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005883630000198536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004088941999953022,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c3940>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fa20370>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fa20370>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003557360000741028,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006685770000558477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004220242000087637,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc472309d30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc470653f10>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc470653f10>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003645330000381364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006457150000187539,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004150003999939145,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4703dc310>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e8ce8e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e8ce8e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036858099997516547,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006433429999788132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004083612000044923,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c3550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fc32580>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fc32580>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003607229999715855,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000660572000015236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00430299799995737,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc472411af0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc47240d940>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc47240d940>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003567009999869697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006489290000217807,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004307552000000214,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c3550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f1acc40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f1acc40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003739300000233925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000663330999941536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004129002000013315,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47241fd30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4701b6460>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4701b6460>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003549320000502121,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006447800000159987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0647213610000108,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc472411d30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e867f40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e867f40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036497500002496963,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006127809999725287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06506365100005951,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4707c3550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc470004310>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc470004310>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003524520000155462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005771630000026562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004047730000024785,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470243040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46ff88d30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46ff88d30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003831139999874722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005870239999694604,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004171426000084466,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470243550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46ff2eb20>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46ff2eb20>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038493399995331856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00060284899996077,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004620368999894708,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fd53af0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fa8ed60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fa8ed60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003644680000434164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006115429999908883,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0041255239999600235,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47024f8b0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e90fd30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e90fd30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034941599994908756,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005737510000471957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0041657369999938965,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4719891f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e867a00>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e867a00>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003509729999677802,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005829030000086277,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004198769000026914,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc471989dc0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46cd5d880>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46cd5d880>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035243499996795435,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005819129999053985,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0040601830000923655,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fd53af0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fcfc160>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fcfc160>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000349987000049623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005849489999718571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004257853000012801,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46e931f70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc470640df0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc470640df0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003456319999486368,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005752639999627718,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004292141999940213,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': False, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc471989a60>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4e2cffa60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4e2cffa60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036850699996193725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005941590000020369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004169348999994327,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47196baf0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e7a0a90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e7a0a90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003953919999730715,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005995720000555593,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004313200999945366,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47196db80>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f163220>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f163220>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035918300000048475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005962859999044667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004256473000054939,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 62,
                        "message": "in _make_5dtensor_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_5dtensor_ds at 0x7fc6f5c1e5e0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47196baf0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4721c14c0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4721c14c0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:62: in _make_5dtensor_ds\n    return _make_scalar_ds(nrows).map(\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003379810000296857,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005684600000677165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004108531000042603,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47196d790>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc47117f5e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc47117f5e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036899299993820023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000597158000005038,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004248828000072535,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470131b80>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc470178c70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc470178c70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003719240000918944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005927529999780745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005738962999998876,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 84,
                        "message": "in _make_dict_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_dict_ds at 0x7fc6f5c1e700>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f1780d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46de1cc40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46de1cc40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:84: in _make_dict_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003742740000234335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005807620000268798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004174492000061036,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47196d160>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4702a3b80>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4702a3b80>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003473659999144729,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005677330000253278,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004247556999985136,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47042e9d0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc47220d400>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc47220d400>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003674690000252667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000593781000020499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004382708999969509,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 47,
                        "message": "in _make_matrix_ds1"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds1 at 0x7fc6f5c1c8b0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47042e700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f76e520>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f76e520>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:47: in _make_matrix_ds1\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x, 2], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00041671100007079076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006138879999753044,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005451569999991079,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470131670>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e9d1040>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e9d1040>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036875799992230895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005786080000689253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004346909999981108,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470131700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f276c40>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f276c40>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003570989999843732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005826479999768708,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004337534999990567,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 52,
                        "message": "in _make_matrix_ds2"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds2 at 0x7fc6f5c1e4c0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f178b80>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f260550>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f260550>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:52: in _make_matrix_ds2\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00042928099992423085,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006677729999182702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0044157820000236825,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f277b80>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc470232a30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc470232a30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003667270000278222,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000608946000056676,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004340946999946027,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4704314c0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc47236fe20>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc47236fe20>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003636930000538996,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005979810000553698,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004265566999947623,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 57,
                        "message": "in _make_matrix_ds_fully_defined"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_matrix_ds_fully_defined at 0x7fc6f5c1e550>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc47042e700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4701ee3a0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4701ee3a0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:57: in _make_matrix_ds_fully_defined\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([2, 3], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039413800004695076,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006551019999960772,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004473463999943306,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f286040>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fa3cc70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fa3cc70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036146200000075623,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000581896999960918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008718821999991633,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f286940>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4722bdb50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4722bdb50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036291000003529916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000566077999906156,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00885272100003931,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 71,
                        "message": "in _make_ragged_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 35,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 369,
                        "message": "in to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 344,
                        "message": "in _to_tensor_list_helper"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 342,
                        "message": "in reduce_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py",
                        "lineno": 370,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2572,
                        "message": "in _to_batched_tensor_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py",
                        "lineno": 2049,
                        "message": "in _to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py",
                        "lineno": 396,
                        "message": "in ragged_tensor_to_variant"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_ragged_ds at 0x7fc6f5c1e670>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f277e50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fa92850>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fa92850>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:71: in _make_ragged_ds\n    return dataset_ops.Dataset.from_tensor_slices(rt)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:35: in __init__\n    self._tensors = structure.to_batched_tensor_list(batched_spec, element)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:369: in to_batched_tensor_list\n    return _to_tensor_list_helper(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:344: in _to_tensor_list_helper\n    return functools.reduce(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:342: in reduce_fn\n    return encode_fn(state, spec, component)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/util/structure.py:370: in <lambda>\n    lambda state, spec, component: state + spec._to_batched_tensor_list(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2572: in _to_batched_tensor_list\n    return [value._to_variant(batched_input=True)]\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/ragged/ragged_tensor.py:2049: in _to_variant\n    return gen_ragged_conversion_ops.ragged_tensor_to_variant(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_ragged_conversion_ops.py:396: in ragged_tensor_to_variant\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RaggedTensorToVariant]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003675220000332047,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005733469999995577,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004042489999960708,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f277f70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e95d2e0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e95d2e0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00042707500006144983,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006537880000223595,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004526389000034214,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470431820>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4e2f88490>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4e2f88490>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003695819999620653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005894760000728638,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004330385000002934,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_scalar_ds at 0x7fc6f5c0edc0>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f2864c0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f207910>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f207910>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035848000004534697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005869980000170472,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004101325999954497,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470431820>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4703efc70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4703efc70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003617009999743459,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000586863999956222,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004339244999982839,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f2865e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4702a3160>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4702a3160>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035845699994752067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000574339999957374,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0042152820000183056,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 93,
                        "message": "in _make_tuple_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_tuple_ds at 0x7fc6f5c1e790>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4701418b0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e787790>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e787790>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:93: in _make_tuple_ds\n    return _make_scalar_ds(nrows).map(transform)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003918400000202382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005938659999173979,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0049946319999207844,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 0}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f2865e0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f340430>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f340430>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038373299992144894,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006024499999739419,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004319398999996338,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 20}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f267e50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc47032ec70>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc47032ec70>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003592269999899145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006155439999702139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004222365000032369,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 115,
                        "message": "in testBasic"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 42,
                        "message": "in _make_vector_ds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 37,
                        "message": "in _make_scalar_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testBasic_test_mode_eager_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23>\nkwargs = {'batch_size': 4, 'drop_remainder': True, 'make_dataset': <function _make_vector_ds at 0x7fc6f5c1c040>, 'nrows': 23}\nreasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f27ce50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46dd6abe0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46dd6abe0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:115: in testBasic\n    dataset = make_dataset(nrows)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:42: in _make_vector_ds\n    return _make_scalar_ds(nrows).map(lambda x: array_ops.fill([x], x))\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:37: in _make_scalar_ds\n    return dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003639479999719697,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006023249999316249,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007948480000550262,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021816000003127556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004972410000618765,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004964180000115448,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020252399997389148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004648199999337521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004505990000325255,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002031689999739683,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004479769999079508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004694560000189085,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020771900005911448,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004493829999319132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044647400000030757,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020202400003199728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004567979999592353,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000453582999966784,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002006290000053923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007405599999401602,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044041000001016073,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020057799997630354,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047428000004856585,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044576899995263375,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020068000003448105,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004542960000435414,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044916300009845145,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002011500000662636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004654479999999239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044677200003206963,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020181000002139626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004488399999900139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004456469999922774,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020230400002674287,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004569610000544344,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004544479999140094,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020300699998188065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004471170000215352,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004412380000076155,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022209300004760735,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004567920000226877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044322600001578394,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0005405819999850792,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045933500007322436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045750000003863533,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020247500003733876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004513750000114669,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004444459999604078,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020100999995520397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004437710000502193,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046922399997129105,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.000200798000037139,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045089200000347773,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004435920000105398,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020648100007747416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004510219999929177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044889100001910265,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019951800004491815,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044861599997148005,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044882800000323186,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002066579999109308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004658599999629587,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043450999999095075,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020884200000637065,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007622059999903286,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044896500003233086,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020118799989177205,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004584539999541448,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045166600000356993,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002135019999514043,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004447649999974601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044434800008730235,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020000400002118113,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045082200006163475,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004492580000032831,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020085699998162454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004464879999659388,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004531530000804196,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022072700005537627,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000446966000026805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004509469999902649,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002264080000031754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045473499994841404,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044334099993648124,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021928000001025794,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004585839999435848,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043664700001500023,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020197900005314295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008170449999624907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004518469999084118,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002007320000529944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044935100004295236,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004541020000488061,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002198339999495147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045562099990092975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044882700001380726,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020834800000102405,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044739899999513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043307399994318985,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021066199997221702,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044751799998721253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043496500006767747,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020761599989782553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000455341000019871,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005153109999582739,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020231199994213966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045577700007015665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004382090000945027,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020097799995255627,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045638799997504975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004616129999703844,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020085400001335074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000799211999947147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004496400000562062,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002008690000820934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047073899997940316,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004493349999847851,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021049599990874412,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004467610000347122,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004352689999223003,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002020459999130253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000554037000028984,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044822899997143395,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019924599996556935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004524090001041259,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004317829999536116,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019873400003689312,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045816700003342703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004333729999643765,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020028599999477592,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004552030000013474,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044054900001810893,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020551399995838437,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004528790000222216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044376400001056027,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020058200004768878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.001066747999971085,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004798930000333712,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020256800007700804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004587519999859069,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004437750000079177,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020135899990236794,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004543310000144629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046344999998382264,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020232500003203313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044928399995569634,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004422719999865876,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002006309999842415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004496880000033343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044879600000058417,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020694500005902228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045335599997997633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044228599995221884,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00019962999999734166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004648199999337521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000435298000070361,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020681699993474467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000444450000031793,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004330890000119325,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020774500001152774,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_1_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0008249120000982657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045241099996928824,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020158600000286242,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044672199999240547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5771093319999636,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032197799998812116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006198479999284245,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4664475459999267,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032175800004097255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000607195000043248,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6717810029999782,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031638999996630446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006382029999940642,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5185365620000084,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003140799999528099,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006155759999728616,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.432056590000002,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031969399992703984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006289319999268628,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.8864358140000377,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003160190000244256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007767259999127418,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13138603000004423,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028396999994129146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005788769999526266,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22229362500002026,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002888950000397017,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005799250000109168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22759387100006734,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028654800007643644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005834260000483482,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21593040800007657,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003940789999887784,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006598849998908918,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.47584314200003064,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005063950000021578,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0009468810000043959,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.468539215000078,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031108099994980876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006182710000075531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12607340900001418,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002751099999613871,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005943970000998888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17341818400007014,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032391399997777626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006536419999747523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1592705189999606,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031272399996851163,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006726240000034522,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.062397852000003695,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025197600007231813,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005393190000404502,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1486278920000359,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002719659999002033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005762270000104763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12495487000001049,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000265801999944415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000584415000048466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05780803000004653,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024159299994153116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005411939999930837,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08761602099991705,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025635500003318157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005550330000687609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08804994799993437,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002923490000057427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00061410299997533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20638802400003442,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027896200003851845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005879670000012993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2990111550000165,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031508600000051956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006407979999494273,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31458194100002856,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030375000005733455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006201069999178799,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1262208450000344,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028430700001536025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006101710000621097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21479975299996568,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00035373699995489005,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_False_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006569549999539959,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22058938199995737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003509089999624848,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007103400000687543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.283291198000029,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029531999996379454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000590752999983124,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2789799319999702,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004600659999596246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmake5dtensordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006977580000011585,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.6367386339999257,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003325479999602976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006552140000621876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.43884842799991475,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003247540000756999,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007259449999992285,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4556026170000678,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032683699998869997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakedictdsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006287580000616799,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.678065241000013,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004613940000126604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007110880000027464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09679174500001864,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026016299989350955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005795380000108707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2376624639999818,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000363215999982458,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds1at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007791450000240729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23653362599998218,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00043684700005997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007779469999604771,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1751320170000099,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028282200003104663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005928330000415372,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4868146210000077,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030017400001725036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixds2at4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006093279999959123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.47489156799997545,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00036688900001990987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007192580000037196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08646535599996241,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028364799993596534,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006015579999711917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16002344799994717,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032928999996784114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakematrixdsfullydefinedat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006777390000252126,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17649153499996828,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028723499997340696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005928890000177489,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0603644920000761,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025765499992758123,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005739120000498588,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11988137700006973,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002940459999081213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakeraggeddsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006189659999336072,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1187443250000797,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026167499993334786,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005629440000802788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059041795999974056,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031092400001853093,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006240070000558262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08671110699992823,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029669200000626006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakescalardsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006681360000584391,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09397077699998135,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002668790000370791,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00057838299994728,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1434386230000655,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002966719999903944,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000621523000063462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3351266009999563,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002941399999372152,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmaketupledsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005903340000941171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31182081700001163,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002834300000813528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_0",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006382489999623431,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09155191399997875,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027073599994764663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_20",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005724779999809471,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2135255660000439,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029905499991400575,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testBasic_test_mode_graph_tfapiversion_2_batchsize_4_dropremainder_True_makedataset_functionmakevectordsat4_nrows_23",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006029389999184787,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21410980300004212,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002968129999771918,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006040189999794165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007149870000375813,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00024235000000771834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005038919999833524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004285611999989669,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py",
                        "lineno": 161,
                        "message": "in testWithStructuredElements"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.dense_to_ragged_batch_test.RaggedBatchTest testMethod=testWithStructuredElements_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f1b1670>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fb715b0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fb715b0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/dense_to_ragged_batch_test.py:161: in testWithStructuredElements\n    dataset = dataset_ops.Dataset.from_tensor_slices(np.arange(nrows))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036139500002718705,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005936890000839412,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007561659999737458,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021502499998860003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::testWithStructuredElements_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047134499993717327,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6804234889999634,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029835399993771716,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/dense_to_ragged_batch_test.py::RaggedBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006064120000246476,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004999450000013894,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.005183937999959198,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::testDiagFlat",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006044649999239482,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.321260352999957,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0009373999999979787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/diagflat_test.py::ArrayCreationTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.001260265000041727,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011252312000010534,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0012203869999893868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxGRY",
            "lineno": 114,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007766329999867594,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12475687599999219,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 118,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxGRY>\n\n    def testDrawBoundingBoxGRY(self):\n        \"\"\"Test if drawing bounding box on a GRY image works.\"\"\"\n        image = np.zeros([4, 4, 1], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038776300004883524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxHalf",
            "lineno": 133,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006079199999931006,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1150602740000295,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 139,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxHalf>\n\n    def testDrawBoundingBoxHalf(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(\n            image, dtype=dtypes.half, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00041773500004183006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCycling",
            "lineno": 109,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006266740000455684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04840950899995278,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 113,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCycling>\n\n    def testDrawBoundingBoxRGBAColorCycling(self):\n        \"\"\"Test if RGBA color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0008179210000207604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBAColorCyclingWithColors",
            "lineno": 126,
            "outcome": "failed",
            "setup": {
                "duration": 0.0009457400000201233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016131730999973115,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBAColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBAColorCyclingWithColors(self):\n        \"\"\"Test if RGBA color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 4], \"float32\")\n        colors = np.asarray([[0.5, 0, 0.5, 1], [0.5, 0.5, 0, 1], [0.5, 0, 0, 1],\n                             [0, 0, 0.5, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003754529999469014,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCycling",
            "lineno": 104,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006296940000538598,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06018762400003652,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 108,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5789,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1375,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCycling>\n\n    def testDrawBoundingBoxRGBColorCycling(self):\n        \"\"\"Test if RGB color cycling works correctly.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n>       self._testDrawBoundingBoxColorCycling(image)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5789: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes(images, boxes, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1375: in draw_bounding_boxes\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxes]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038034700003208854,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::testDrawBoundingBoxRGBColorCyclingWithColors",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.00059755999996014,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03504377999990993,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 125,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py",
                        "lineno": 99,
                        "message": "in _testDrawBoundingBoxColorCycling"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5843,
                        "message": "in draw_bounding_boxes"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py",
                        "lineno": 5790,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py",
                        "lineno": 1448,
                        "message": "in draw_bounding_boxes_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.draw_bounding_boxes_test.DrawBoundingBoxOpTest testMethod=testDrawBoundingBoxRGBColorCyclingWithColors>\n\n    def testDrawBoundingBoxRGBColorCyclingWithColors(self):\n        \"\"\"Test if RGB color cycling works correctly with provided colors.\"\"\"\n        image = np.zeros([10, 10, 3], \"float32\")\n        colors = np.asarray([[1, 1, 0, 1], [0, 0, 1, 1], [0.5, 0, 0.5, 1],\n                             [0.5, 0.5, 0, 1], [0, 1, 1, 1], [1, 0, 1, 1]])\n>       self._testDrawBoundingBoxColorCycling(image, colors=colors)\n\nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/draw_bounding_boxes_test.py:99: in _testDrawBoundingBoxColorCycling\n    image = image_ops.draw_bounding_boxes(image, bboxes, colors=colors)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5843: in draw_bounding_boxes\n    return draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/image_ops_impl.py:5790: in draw_bounding_boxes_v2\n    return gen_image_ops.draw_bounding_boxes_v2(images, boxes, colors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_image_ops.py:1448: in draw_bounding_boxes_v2\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:DrawBoundingBoxesV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003370330000507238,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/draw_bounding_boxes_test.py::DrawBoundingBoxOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000562316000014107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010125899999593457,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00041193999993538455,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testCreate",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005890109999882043,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014129206000006889,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023496900007557997,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseDefaultGraph",
            "lineno": 96,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005306059999838908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08859106299996711,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002591970001049049,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::testUseExistingGraph",
            "lineno": 83,
            "outcome": "passed",
            "setup": {
                "duration": 0.000564381999993202,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008227040000065244,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023276000001715147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/eval_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005317210000157502,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000473639999995612,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003611299999874973,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesDeviceAssignment",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006344960000888022,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059369474000050104,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002535859999852619,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00052582600005735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09195795200002976,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002415920000657934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005278810000390877,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0713339010000027,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002743680000776294,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScope",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005996779999577484,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08864272900007109,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002811990000282094,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNamesRespectScopeNoDebias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005037999999331078,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.065977461999978,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022685599992655625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005117079999763519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28578264999998737,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032285100007811707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006383009999808564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.266268316000037,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00037350599995988887,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007057000000258995,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2326477789999899,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005226299999776529,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010297659999878306,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19186698900000465,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027846700004374725,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005751399999098794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15801181600011205,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002841599999783284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000599823000015931,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18708034199994472,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028251999992789933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005884649999643443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24250597599996127,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032214200007274485,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNoNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006663489999709782,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1924298279999448,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028512500000488217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000585863000083009,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22602478999999676,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031551099993976095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006270879999874523,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19668053400005192,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030519500000991684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006649129999232173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23065257999996902,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003218440000409828,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Scalar_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006448060000820988,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20060950700008107,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030531099992003874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005991319999338884,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17487899999991896,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002548310000065612,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005636949999825447,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19575919299995803,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002783159999353302,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_Debias_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005742619999864473,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24360209500002838,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032499100007044035,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesNumUpdates_Vector_DynamicDecay",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006665829999974449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21111882299999252,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003983600000765364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testAverageVariablesWithControlDeps",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007096299999602707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13442760700002054,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002723819999346233,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testBasicEager",
            "lineno": 293,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005956869999863557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06253300599996692,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002512340000748736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testCopyXlaSharding",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005921760000546783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03925852000008945,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024329300003955723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testImportedGraphVariablesToRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005648190000329123,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020645418000071913,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022697400004290103,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNames",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000552618000028815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0706997599999113,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024184800008697493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::testSubsetAverageVariablesNamesEager",
            "lineno": 449,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005561590000979777,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.025867400000038288,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024407399996562162,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/exponentialmovingaverage_test.py::ExponentialMovingAverageTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005389689999901748,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011356630000136647,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0011349149999659858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::testArrayFill",
            "lineno": 44,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006548180000436332,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0727326250000715,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002637909999521071,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/fill_test.py::RunEagerOpAsFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005610709999928076,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008497709999346625,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000358634000008351,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testDictInputs",
            "lineno": 67,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006321509999906993,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023460753999984263,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 78,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testDictInputs>\n\n    def testDictInputs(self):\n      elements = [{\n          \"foo\": [1, 2, 3],\n          \"bar\": [[4.0], [5.0], [6.0]]\n      }, {\n          \"foo\": [4, 5, 6],\n          \"bar\": [[7.0], [8.0], [9.0]]\n      }]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00048758200000520446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_emptyinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007160699999531062,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012531570000646752,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_emptyinput>\nkwargs = {'elements': empty_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4701e63a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.00023192300000118848,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testInvalidInputs_test_elements_nonlistinput",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000500075999980254,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006063190000986651,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 334,
                    "message": "ValueError: The test does not take parameters that were passed : {'elements'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 334,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testInvalidInputs_test_elements_nonlistinput>\nkwargs = {'elements': non-list_input}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc4701e6820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n        raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\n      missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n          set(requested_parameters))\n      if missing_arguments:\n>       raise ValueError(\"The test does not take parameters that were passed \"\n                         \": {} .\".format(missing_arguments))\nE       ValueError: The test does not take parameters that were passed : {'elements'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:334: ValueError"
            },
            "teardown": {
                "duration": 0.00022818299999016745,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testLargeNInputs",
            "lineno": 37,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048486200000752433,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.028668933999938417,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 40,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 818,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 25,
                        "message": "in from_tensor_slices"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py",
                        "lineno": 49,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 7859,
                        "message": "in tensor_slice_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testLargeNInputs>\n\n    def testLargeNInputs(self):\n      elements = list(range(1000))\n>     dataset = dataset_ops.Dataset.from_tensor_slices(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:818: in from_tensor_slices\n    return from_tensor_slices_op.from_tensor_slices(tensors, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:25: in from_tensor_slices\n    return TensorSliceDataset(tensors, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/from_tensor_slices_op.py:49: in __init__\n    variant_tensor = gen_dataset_ops.tensor_slice_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:7859: in tensor_slice_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorSliceDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003950280000708517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testNonRectangularInputs",
            "lineno": 55,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006283609999400142,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026196060999950532,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 60,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testNonRectangularInputs>\n\n    def testNonRectangularInputs(self):\n      elements = [[[1]], [[2, 3]], [[4, 5, 6]]]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003640150000592257,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testTupleInputs",
            "lineno": 43,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005972349999865401,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004562889999988329,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 48,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testTupleInputs>\n\n    def testTupleInputs(self):\n      elements = [(1, 2), (3, 4)]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034645799996724236,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::testUintInputs",
            "lineno": 89,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006120499999724416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08533160700005737,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListTest testMethod=testUintInputs>\n\n    def testUintInputs(self):\n      elements = [(np.tile(np.array([[0], [1]], dtype=np.uint8), 2),\n                   np.tile(np.array([[2], [256]], dtype=np.uint16), 2),\n                   np.tile(np.array([[4], [65536]], dtype=np.uint32), 2),\n                   np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2))]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038452900002994284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006069769999612618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008678880000161371,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00042061700003159785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testDictionary",
            "lineno": 149,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005923369999436545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015415389999589024,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 153,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testDictionary>\n\n    def testDictionary(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([{\"a\": 1, \"b\": 3}, {\"a\": 2, \"b\": 4}])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003559320000476873,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testInvalidIndex",
            "lineno": 108,
            "outcome": "failed",
            "setup": {
                "duration": 0.000582495999992716,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0018996270000570803,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 112,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testInvalidIndex>\n\n    def testInvalidIndex(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([1, 2, 3])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:112: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004123630000094636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testMultipleElements",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006758850000778693,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009054961999936495,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 142,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testMultipleElements>\n\n    def testMultipleElements(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([[1, 2], [3, 4], [5, 6]])\n\nsrc/tensorflow_tests_reduced/from_list_test.py:142: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0008640369999284303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testName",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0009755309999945894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0058180470000479545,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 184,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testName>\n\n    def testName(self):\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list([42], name=\"from_list\")\n\nsrc/tensorflow_tests_reduced/from_list_test.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003621750000775137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testNumpy",
            "lineno": 164,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005906400000412759,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006654026999967755,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 174,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testNumpy>\n\n    def testNumpy(self):\n      elements = [\n          np.tile(np.array([[0], [1]], dtype=np.uint64), 2),\n          np.tile(np.array([[2], [256]], dtype=np.uint64), 2),\n          np.tile(np.array([[4], [65536]], dtype=np.uint64), 2),\n          np.tile(np.array([[8], [4294967296]], dtype=np.uint64), 2),\n      ]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(elements)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003654610000012326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testOneDimensionalArray",
            "lineno": 119,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005822559999160148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016143589999728647,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 124,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testOneDimensionalArray>\n\n    def testOneDimensionalArray(self):\n      tensor = [1, 2, 3]\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = from_list.from_list(tensor)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:124: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003325350000977778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::testTwoDimensionalArray",
            "lineno": 130,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005743390000816362,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005402688999993188,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 133,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListRandomAccessTest testMethod=testTwoDimensionalArray>\n\n    def testTwoDimensionalArray(self):\n      tensor = [[1, 2], [3, 4]]\n>     dataset = from_list.from_list(tensor)\n\nsrc/tensorflow_tests_reduced/from_list_test.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003499609999835229,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005813569999872925,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006757679999509492,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00044169299997065536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005949030000920175,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.030526754999982586,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f20a700>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003621339999426709,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005899330000147529,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0026286419999905775,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd57160>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035745200000292243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005771099999947182,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030015720000164947,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd57ca0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003693699999303135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006146000000626373,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012480700000878642,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.00022425299994210945,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::testDict_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00048540199998114986,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0022626579999496244,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 225,
                        "message": "in testDict"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 226,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=testDict_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470215a60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:225: in testDict\n    verify_fn(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:226: in <lambda>\n    self, lambda: self._build_list_dataset(dict_elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003883380001070691,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006025820000559179,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009485029999041217,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002228150000291862,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005074840000816039,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0633951759999718,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470215f70>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0008711189999530689,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0009442440000384522,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008331923000014285,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fa893a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003576189999421331,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006098449999853983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006838297999934184,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc470215f70>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000444596999955138,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005848519999744894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014623270000129196,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.0002198530000896426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/from_list_test.py::FromListCheckpointTest::test_test_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004967999999507811,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005919628000015109,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 209,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/from_list_test.py",
                        "lineno": 195,
                        "message": "in _build_list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 119,
                        "message": "in from_list"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py",
                        "lineno": 63,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py",
                        "lineno": 6422,
                        "message": "in list_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.from_list_test.FromListCheckpointTest testMethod=test_test_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f311ca0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in test\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/from_list_test.py:209: in <lambda>\n    verify_fn(self, lambda: self._build_list_dataset(elements), num_outputs=3)\nsrc/tensorflow_tests_reduced/from_list_test.py:195: in _build_list_dataset\n    test =from_list.from_list(elements)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:119: in from_list\n    return _ListDataset(elements, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/from_list.py:63: in __init__\n    variant_tensor = gen_experimental_dataset_ops.list_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_experimental_dataset_ops.py:6422: in list_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ListDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0006542119999721763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testCPUGPUMatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006813609999198889,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6156872120000116,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002982859999747234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testDistinct",
            "lineno": 136,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006124910000835371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0362162310000258,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 140,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testDistinct>\n\n    def testDistinct(self):\n      for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n        sampler = self._Sampler(1000, 2.0, 1.0, dt)\n>       x = sampler()\n\nsrc/tensorflow_tests_reduced/gamma_test.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003238890000147876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testEmptySamplingNoError",
            "lineno": 57,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005693289999726403,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12057087100004082,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 59,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testEmptySamplingNoError>\n\n    def testEmptySamplingNoError(self):\n>     self.evaluate(random_ops.random_gamma(\n          [5], alpha=np.ones([2, 0, 3]), beta=np.ones([3]), dtype=dtypes.float32))\n\nsrc/tensorflow_tests_reduced/gamma_test.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003472749999673397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005845470000167552,
                "outcome": "passed"
            },
            "call": {
                "duration": 35.41728328900001,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007671539999591914,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testMomentsFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0012352640000017345,
                "outcome": "passed"
            },
            "call": {
                "duration": 53.556758213999956,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007989770000449425,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNoCSE",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0012338689999751296,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.35386950199995226,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002985339999668213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallShape",
            "lineno": 127,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005985319999126659,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02053694800008543,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 129,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 121,
                        "message": "in _testZeroDensity"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNonZeroSmallShape>\n\n    def testNonZeroSmallShape(self):\n>     self._testZeroDensity(0.01)\n\nsrc/tensorflow_tests_reduced/gamma_test.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:121: in _testZeroDensity\n    x = sampler()\nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003283239999518628,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNonZeroSmallishShape",
            "lineno": 130,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005657479999854331,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018581717000074605,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 132,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 121,
                        "message": "in _testZeroDensity"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNonZeroSmallishShape>\n\n    def testNonZeroSmallishShape(self):\n>     self._testZeroDensity(0.35)\n\nsrc/tensorflow_tests_reduced/gamma_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:121: in _testZeroDensity\n    x = sampler()\nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003616300000430783,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testNpDtypes",
            "lineno": 53,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005753560000130165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07075311400001283,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testNpDtypes>\n\n    def testNpDtypes(self):\n>     self.evaluate(random_ops.random_gamma(\n          [5], alpha=np.ones([2, 1, 3]), beta=np.ones([3]), dtype=np.float32))\n\nsrc/tensorflow_tests_reduced/gamma_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003872669999509526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testPositive",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005830809999451958,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4804352180000251,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/gamma_test.py",
                    "lineno": 219,
                    "message": "AssertionError: 0 != 9128"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 219,
                        "message": "in testPositive"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testPositive>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:219: in testPositive\n    self.assertEqual(0, math_ops.reduce_sum(math_ops.cast(\nE   AssertionError: 0 != 9128"
            },
            "teardown": {
                "duration": 0.0003335190000370858,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSeed",
            "lineno": 160,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006080790000169145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01263315699998202,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 165,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 45,
                        "message": "in func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 648,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 241,
                        "message": "in random_gamma"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testSeed>\n\n    def testSeed(self):\n      for dt in dtypes.float16, dtypes.float32, dtypes.float64:\n        sx = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n        sy = self._Sampler(1000, 0.0, 1.0, dt, seed=345)\n>       self.assertAllEqual(sx(), sy())\n\nsrc/tensorflow_tests_reduced/gamma_test.py:165: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/gamma_test.py:45: in func\n    rng = random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:648: in random_gamma\n    gen_random_ops.random_gamma(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:241: in random_gamma\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003330270000105884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005804180000268389,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07030518199997005,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002528510000274764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::testSizeTooLarge",
            "lineno": 221,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006007389999922452,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08400244699998893,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/gamma_test.py",
                    "lineno": 229,
                    "message": "AssertionError: \"overflow\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\""
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/gamma_test.py",
                        "lineno": 229,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.gamma_test.RandomGammaTest testMethod=testSizeTooLarge>\n\n    def testSizeTooLarge(self):\n      # Grappler asserts on size overflow, so this error is only caught when\n      # running eagerly.\n      if context.executing_eagerly():\n        with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                    \"overflow\"):\n          rate = constant_op.constant(1.0, shape=(4, 4, 4, 4, 4))\n>         self.evaluate(\n              random_ops.random_gamma(\n                  shape=[46902, 51188, 34063, 59195], alpha=rate))\nE         AssertionError: \"overflow\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RandomGamma]\"\n\nsrc/tensorflow_tests_reduced/gamma_test.py:229: AssertionError"
            },
            "teardown": {
                "duration": 0.0002877360000184126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/gamma_test.py::RandomGammaTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005525230000102965,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008600669999623278,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00059178999993037,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collection",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005866310000328667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011536260000184484,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019875100008448499,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_generator",
            "lineno": 206,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047920800000156305,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000579770999934226,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020296399998187553,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_list",
            "lineno": 178,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045537099992998264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005539210000051753,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019270400002824317,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_set",
            "lineno": 225,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004736700000194105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005505889999994906,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019315099996219942,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_string",
            "lineno": 240,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045134100002997,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005213700000012977,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019290099999125232,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_from_tuple",
            "lineno": 192,
            "outcome": "passed",
            "setup": {
                "duration": 0.000475528000038139,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005475859999251043,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019555999995191087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_add_to_collections_uniquify",
            "lineno": 168,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004539809999641875,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005247010000175578,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002026049999130919,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_default_graph",
            "lineno": 249,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047554800005400466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006945829999267517,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001952780000920029,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_get_collections",
            "lineno": 62,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044344699995235715,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005160169999953723,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019288099997538666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_collection_test.py::CollectionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046682799995778623,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041984699998920405,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004425089999813281,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_create_global_step",
            "lineno": 67,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005439309999246689,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011559975999944072,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019876199996815558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_global_step",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047678399994310894,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0047972009999739385,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001997080000819551,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_get_or_create_global_step",
            "lineno": 100,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004505860000563189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005366643999991538,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020089800000278046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_dtype",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004582990000017162,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004975596999997833,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020255099991572934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_invalid_shape",
            "lineno": 49,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045153400003528077,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005544310000004771,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020849199995609524,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_global_step_test.py::GlobalStepTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045343199997205375,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003912690000333896,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003789260000530703,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testPerReplicaBatchSize",
            "lineno": 32,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005650319999404019,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004322739999906844,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001879610000514731,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testProperties",
            "lineno": 25,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004500560000906262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037570200004211074,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020758200003001548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::testStr",
            "lineno": 43,
            "outcome": "passed",
            "setup": {
                "duration": 0.000448866000056114,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038313000004563946,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019587199994930415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_per_replica_batch_size_test.py::InputContextTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004394540000021152,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003788200000371944,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003450949999432851,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testAddShape",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005462079999460911,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04819566200001191,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002262399999608533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testScalarShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004960950000167941,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005213412999978573,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021696200008136657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testShape",
            "lineno": 69,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004664980000370633,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008517329999904177,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019909100001314073,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000480656000036106,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004850439999927403,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020041699997364049,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044960000002447487,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004341148999969846,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020144699999491422,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/get_shape_test.py::TensorAndShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004725019999796132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042213799997625756,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003544770000871722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignDifferentShapesAllowed",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.000539398999990226,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.051111082000034,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023158800001965574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005200909999985015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08930972400003157,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002684600000293358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitialization",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005960519999916869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005429300000514559,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00023254500001712586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializationOrder",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005791620000081821,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005047690000310467,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00023242500003561872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testInitializerFunction",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005082630000288191,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047027699997670425,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022777399999540648,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testLoad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005094169999892983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024973081999974056,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py:360: Variable.load (from tensorflow.python.ops.variables) is deprecated and will be removed in a future version.\nInstructions for updating:\nPrefer Variable.assign which has equivalent behavior in 2.X.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578725.431965,
                        "msecs": 431.9651126861572,
                        "relativeCreated": 417930.0248622894,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00023721600007320376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testNoRefDataRace",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005213989999219848,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005967629999759083,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002242540000452209,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testOperators",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004959510000617229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7614874610000015,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002914960000452993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testResourceAssignments",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006047399999715708,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08675249800000984,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028536499996789644,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testSession",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006147870000177136,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020247859000050994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002465979999897172,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testUseVariableAsTensor",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005753119999098999,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.061776710999993156,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000249410000037642,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::testZeroSizeVarSameAsConst",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005786680000028355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06725959099992451,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002684600000293358,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::VariablesTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005916740000202481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005101009999179951,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0006106489998956022,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::testAssertVariablesInitialized",
            "lineno": 366,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006125769999698605,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09778923600003964,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002457130000266261,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::IsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005307479999601128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004577419999804988,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002741989999321959,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testPartitionedVariableAssignments",
            "lineno": 414,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005520589999150616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003301179999652959,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 415, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0001998170000661048,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::testVariables",
            "lineno": 399,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004536840000355369,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030172399999628396,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/global_variables_initializer_test.py', 400, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0001981350000050952,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/global_variables_initializer_test.py::ObsoleteIsInitializedTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044843199998467753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003114370000503186,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00028719400006593787,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random0",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000555146000010609,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.119721917999982,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030583399995975924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random1",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000622939999971095,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07757753699991099,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random1>, dct_type = 1\nnorm = None, shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003484110000044893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random10",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000578637999979037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011652519999643118,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002101649999985966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random11",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004884459999630053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041411699999116536,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019154300002810487,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random12",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044885400006933196,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038736299995889567,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019864299997607304,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random13",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004467940000267845,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00037788200006616535,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018576600007236266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random14",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043757000003097346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00040483299994775734,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018822599997747602,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random15",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044027600006302237,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003920380000863588,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0001864890000433661,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random16",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.00043664700001500023,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038637499994820246,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019082800008618506,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random17",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004449930000873792,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003854009999031405,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018770199994833092,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random18",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004592289999436616,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00038126899994495034,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019741599999179016,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random19",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000448033999987274,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003784379999842713,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00018608499999572814,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random2",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004394850000153383,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0436091589999705,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003048110000918314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random20",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006689100000585313,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2939084419999745,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003048789999411383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random21",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000652629999990495,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1648406319999367,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random21>, dct_type = 2\nnorm = None, shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035211399995205284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random22",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005854609999005334,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2270575979999876,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003084569999600717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random23",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006533880000461068,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16967500700002347,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random23>, dct_type = 2\nnorm = None, shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003734869999334478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random24",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006138429999964501,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.319924167999943,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00044426199997360527,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random25",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007990909999762152,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18644226599997182,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random25>, dct_type = 2\nnorm = None, shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038123499996345345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random26",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005897920000279555,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.15934989699997,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003305660000023636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random27",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007015620000174749,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18262041000002682,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random27>, dct_type = 2\nnorm = None, shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003563159999657728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random28",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006060509999770147,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2194456370000353,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00047353500008284755,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random29",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008729590000484677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18160971899999367,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random29>, dct_type = 2\nnorm = None, shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000347254999951474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random3",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005781940000133545,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06784706499990989,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random3>, dct_type = 1\nnorm = None, shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003533919999654245,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random30",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005762529999628896,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19412021599998752,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002969750000829663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random31",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006199070001002838,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017892156000016257,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random31>, dct_type = 2\nnorm = 'ortho', shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003709080000362519,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random32",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006280749998950341,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15039066899998943,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029098100003466243,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random33",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006275440000536037,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01757837999991807,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random33>, dct_type = 2\nnorm = 'ortho', shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035411600003953936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random34",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005927099999780694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14679848299999776,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028416899999683665,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random35",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006163509999623784,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.017112963999920794,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random35>, dct_type = 2\nnorm = 'ortho', shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035496700002113357,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random36",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005927529999780745,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15302459100007582,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029933099995105295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random37",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006195589999151707,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018192336000083742,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random37>, dct_type = 2\nnorm = 'ortho', shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003640070000301421,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random38",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006112269999221098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.15210092300003453,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030814600006578985,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random39",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006260430000111228,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018664016999991873,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random39>, dct_type = 2\nnorm = 'ortho', shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036522300001706753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random4",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005943460000708001,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9856921670000247,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003224239999326528,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random40",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000631254999916564,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08639319799999612,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026142599995182536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random41",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005982339999945907,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015421703000015441,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random41>, dct_type = 3\nnorm = None, shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035702800005310564,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random42",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000603620999982013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09008427200001279,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025713599995924596,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random43",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006057429999373198,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015408092000029683,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random43>, dct_type = 3\nnorm = None, shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003705589999754011,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random44",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005965149999838104,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08933260000003429,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026957099998980993,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random45",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006167430000232343,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016223797000066043,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random45>, dct_type = 3\nnorm = None, shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003557609999234046,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random46",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005917560000625599,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09225620999995954,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030093999998825893,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random47",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006275660000483185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.058409980999954314,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random47>, dct_type = 3\nnorm = None, shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037817999998424057,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random48",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005791290000161098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09308619900002668,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033520599993153155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random49",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006344639999724677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.060879607999936525,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random49>, dct_type = 3\nnorm = None, shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003706699999384,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random5",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006557939999538576,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06774951199997759,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random5>, dct_type = 1\nnorm = None, shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003443319999405503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random50",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006292299999586248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10858707500005949,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003090510000447466,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random51",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006307339999693795,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18664401900002758,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random51>, dct_type = 3\nnorm = 'ortho', shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003499430000601933,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random52",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006519460000617983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1084334110000782,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030734500001017295,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random53",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006345340000279975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08504561100005503,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random53>, dct_type = 3\nnorm = 'ortho', shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035098099999686383,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random54",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006460170000082144,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11076830899992274,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033423600007154164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random55",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000653074999945602,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08585965599991141,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random55>, dct_type = 3\nnorm = 'ortho', shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035872000000836124,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random56",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006317439999747876,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11076481299994612,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003107340000951808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random57",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006281080000007933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09149157399997421,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random57>, dct_type = 3\nnorm = 'ortho', shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003809910000427408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random58",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006474639999396459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11071336100008011,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002629219999334964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random59",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000587452999980087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0962216069999613,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 188,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random59>, dct_type = 3\nnorm = 'ortho', shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:188: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033509399997910805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random6",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005725620000021081,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.9196769549999999,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003057360000866538,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random60",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006527130000222314,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2465897649999533,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030199800005448196,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random61",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006288349999294951,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19102274599993052,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random61>, dct_type = 4\nnorm = None, shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003633720000379981,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random62",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006126739999672282,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2473530739999887,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030632100003913365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random63",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006220010000106413,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1857689629999868,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random63>, dct_type = 4\nnorm = None, shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003361569999924541,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random64",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.000570056000015029,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1416135330000543,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031015299998671253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random65",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006251930000189532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04362347599999339,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random65>, dct_type = 4\nnorm = None, shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003485759999648508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random66",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005968210000446561,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.1813272709999865,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030121600002530613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random67",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006445200000371187,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1867421119999335,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random67>, dct_type = 4\nnorm = None, shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003498099999887927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random68",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005978709999681087,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.2269665829999212,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031667499990817305,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random69",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006288200000881261,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1303421839999146,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random69>, dct_type = 4\nnorm = None, shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037975500003994966,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random7",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005813379999608514,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06959083200001714,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random7>, dct_type = 1\nnorm = None, shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034203900008833443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random70",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005782329999419744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10659889900000508,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000284379999925477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random71",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006226499999684165,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022238291000007848,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random71>, dct_type = 4\nnorm = 'ortho', shape = [2], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003592079999634734,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random72",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005920080000123562,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.108507024000005,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027330799991887034,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random73",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000596446000031392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022144787000001998,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random73>, dct_type = 4\nnorm = 'ortho', shape = [3], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003643379999402896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random74",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005909000000201559,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10946494600000278,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027144699993186805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random75",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006150130000150966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022331767999958174,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random75>, dct_type = 4\nnorm = 'ortho', shape = [10], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035545699995509494,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random76",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005800080000426533,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11019987999998193,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002667800000608622,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random77",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.000611041000070145,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.022821401999976842,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random77>, dct_type = 4\nnorm = 'ortho', shape = [2, 20], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036779399999886664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random78",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006033160000242788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11258394099991165,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002874150000025111,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random79",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006461299999500625,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.023148880999997345,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 201,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 155,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 743,
                        "message": "in complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py",
                        "lineno": 2204,
                        "message": "in _complex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random79>, dct_type = 4\nnorm = 'ortho', shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:201: in _dct_internal\n    dct2 = _dct_internal(input, type=2, n=2*axis_dim, axis=axis, norm=None)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:155: in _dct_internal\n    _math_ops.complex(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:743: in complex\n    return gen_math_ops._complex(real, imag, Tout=Tout, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_math_ops.py:2204: in _complex\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Complex]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036604499996428785,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random8",
            "lineno": 188,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006143389999806459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8987668429999758,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003051539999887609,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_random9",
            "lineno": 188,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006377009999596339,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07273177299998679,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 205,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/idct_test.py",
                        "lineno": 155,
                        "message": "in _compare"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 97,
                        "message": "in dct"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py",
                        "lineno": 150,
                        "message": "in _dct_internal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py",
                        "lineno": 139,
                        "message": "in _rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py",
                        "lineno": 1145,
                        "message": "in rfft"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.idct_test.DCTOpsTest testMethod=test_random9>, dct_type = 1\nnorm = None, shape = [2, 3, 25], dtype = <class 'numpy.float64'>\n\n    @parameterized.parameters(itertools.product(\n        [1, 2, 3, 4],\n        [None, \"ortho\"],\n        [[2], [3], [10], [2, 20], [2, 3, 25]],\n        [np.float32, np.float64]))\n    def test_random(self, dct_type, norm, shape, dtype):\n      \"\"\"Test randomly generated batches of data.\"\"\"\n      # \"ortho\" normalization is not implemented for type I.\n    \n      if dct_type == 1 and norm == \"ortho\":\n        return\n      with self.session():\n        tol = 5e-4 if dtype == np.float32 else 1e-7\n        signals = np.random.rand(*shape).astype(dtype)\n        n = np.random.randint(1, 2 * signals.shape[-1])\n        n = np.random.choice([None, n])\n>       self._compare(signals, n, norm=norm, dct_type=dct_type,\n                      rtol=tol, atol=tol)\n\nsrc/tensorflow_tests_reduced/idct_test.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/idct_test.py:155: in _compare\n    tf_dct = dct_ops.dct(signals, n=n, type=dct_type, norm=norm)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:97: in dct\n    return _dct_internal(input, type, n, axis, norm, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/dct_ops.py:150: in _dct_internal\n    dct1 = _math_ops.real(fft_ops.rfft(dct1_input))\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/signal/fft_ops.py:139: in _rfft\n    return fft_fn(input_tensor, fft_length, Tcomplex=complex_dtype, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_spectral_ops.py:1145: in rfft\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:RFFT]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034525800003848417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/idct_test.py::DCTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005761370000527677,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010622600000260718,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00217004299997825,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA0",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005862790000037421,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.34665763499992863,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029816699998264085,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testLargeXSmallA1",
            "lineno": 75,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006060350000325343,
                "outcome": "passed"
            },
            "call": {
                "duration": 10.531626354000082,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003987669999787613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues0",
            "lineno": 86,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007082290001108049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04896798300001137,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=0.01, atol=1e-11\nMismatched value: a is different from b. \nnot close where = (array([418]),)\nnot close lhs = [0.0047655]\nnot close rhs = [0.00470656]\nnot close dif = [5.893642e-05]\nnot close tol = [4.7065627e-05]\ndtype = float32, shape = (1000,)\nMismatched elements: 1 / 1000 (0.1%)\nMax absolute difference: 0.00011635\nMax relative difference: 0.01252218\n x: array([6.157359e-01, 1.035406e-01, 4.434267e-01, 4.795118e-01,\n       2.433577e-02, 2.681143e-01, 8.596003e-01, 6.771227e-01,\n       1.646579e-01, 7.134295e-01, 2.083564e-02, 1.703571e-01,...\n y: array([6.157417e-01, 1.035485e-01, 4.434308e-01, 4.795133e-01,\n       2.430058e-02, 2.680984e-01, 8.595904e-01, 6.771321e-01,\n       1.646430e-01, 7.134306e-01, 2.083021e-02, 1.703041e-01,..."
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/igammac_test.py",
                        "lineno": 100,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.igammac_test.IgammacTest testMethod=testSmallValues0>\ndtype = <class 'numpy.float32'>, rtol = 0.01, atol = 1e-11\n\n    @parameterized.parameters((np.float32, 1e-2, 1e-11), (np.float64, 1e-4, 1e-30))\n    def testSmallValues(self, dtype, rtol, atol):\n        # rtol, atol = self.adjust_tolerance_for_tpu(dtype, rtol, atol)\n        # Test values near zero.\n        x = np.random.uniform(\n            low=np.finfo(dtype).tiny, high=1.0, size=[NUM_SAMPLES]\n        ).astype(dtype)\n        a = np.random.uniform(\n            low=np.finfo(dtype).tiny, high=1.0, size=[NUM_SAMPLES]\n        ).astype(dtype)\n    \n        expected_values = sps.gammaincc(a, x)\n        actual = _igammac(a, x)\n>       self.assertAllClose(expected_values, actual, atol=atol, rtol=rtol)\n\nsrc/tensorflow_tests_reduced/igammac_test.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.igammac_test.IgammacTest testMethod=testSmallValues0>\na = array([6.15735888e-01, 1.03540607e-01, 4.43426728e-01, 4.79511768e-01,\n       2.43357718e-02, 2.68114299e-01, 8.596003...67325e-01, 7.05970228e-01,\n       1.91320166e-01, 6.28332019e-01, 2.49883998e-02, 5.06186038e-02],\n      dtype=float32)\nb = array([6.15741730e-01, 1.03548527e-01, 4.43430781e-01, 4.79513288e-01,\n       2.43005753e-02, 2.68098354e-01, 8.595904...79886e-01, 7.05982208e-01,\n       1.91285551e-01, 6.28366590e-01, 2.49571204e-02, 5.06570339e-02],\n      dtype=float32)\nrtol = 0.01, atol = 1e-11, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=0.01, atol=1e-11\nE       Mismatched value: a is different from b. \nE       not close where = (array([418]),)\nE       not close lhs = [0.0047655]\nE       not close rhs = [0.00470656]\nE       not close dif = [5.893642e-05]\nE       not close tol = [4.7065627e-05]\nE       dtype = float32, shape = (1000,)\nE       Mismatched elements: 1 / 1000 (0.1%)\nE       Max absolute difference: 0.00011635\nE       Max relative difference: 0.01252218\nE        x: array([6.157359e-01, 1.035406e-01, 4.434267e-01, 4.795118e-01,\nE              2.433577e-02, 2.681143e-01, 8.596003e-01, 6.771227e-01,\nE              1.646579e-01, 7.134295e-01, 2.083564e-02, 1.703571e-01,...\nE        y: array([6.157417e-01, 1.035485e-01, 4.434308e-01, 4.795133e-01,\nE              2.430058e-02, 2.680984e-01, 8.595904e-01, 6.771321e-01,\nE              1.646430e-01, 7.134306e-01, 2.083021e-02, 1.703041e-01,...\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.0003472680000413675,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::testSmallValues1",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005699369999092596,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013966277999998056,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023187200008578657,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/igammac_test.py::IgammacTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004889669999101898,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005550229998334544,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003629259999797796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005793169998469239,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00041460700003881357,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00019824900005005475,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_difference_multirow_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045361100001173327,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.2166618090000156,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003718929999649845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006048739999187092,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3519532590000836,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: sparse_to_dense (from tensorflow.python.ops.sparse_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nCreate a `tf.sparse.SparseTensor` and use `tf.sparse.to_dense` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578794.2748795,
                        "msecs": 274.87945556640625,
                        "relativeCreated": 486772.9392051697,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00031850800019128656,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_intersection_3d_invalid_indices",
            "lineno": 91,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006480490001194994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04853389899994909,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/intersection_test.py",
                    "lineno": 180,
                    "message": "AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\""
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 94,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/intersection_test.py",
                        "lineno": 180,
                        "message": "in _test_set_intersection_3d"
                    }
                ],
                "longrepr": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.intersection_test.SetOpsTest testMethod=test_set_intersection_3d_invalid_indices>\n\n    def test_set_intersection_3d_invalid_indices(self):\n        for dtype in _DTYPES:\n>           self._test_set_intersection_3d(dtype=dtype, invalid_indices=True)\n\nsrc/tensorflow_tests_reduced/intersection_test.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/intersection_test.py:180: in _test_set_intersection_3d\n    self._set_intersection(sp_a, sp_b)\nE   AssertionError: \"out of order\" does not match \"Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:SparseToSparseSetOperation]\""
            },
            "teardown": {
                "duration": 0.0002601870000944473,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/intersection_test.py::SetOpsTest::test_set_size_2d",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005530250000447268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4240954269998838,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0008991690001494135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::testIsVariableInitialized",
            "lineno": 1620,
            "outcome": "failed",
            "setup": {
                "duration": 0.000762010000016744,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019254556000078082,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                    "lineno": 1397,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\n\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nCannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nAssign: CPU \nIsVariableInitialized: CPU TPU TPU_SYSTEM \nVariable: CPU TPU TPU_SYSTEM \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\n  IsVariableInitialized (IsVariableInitialized) /device:TPU:0\n  IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\n  Assign (Assign) /device:TPU:0\n\n\t [[{{node IsVariableInitialized}}]]\n\nOriginal stack trace for 'IsVariableInitialized':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n    test = variables.is_variable_initialized(v0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\n    return state_ops.is_variable_initialized(variable)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\n    return gen_state_ops.is_variable_initialized(ref=ref, name=name)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation("
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1624,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/is_variable_initialized_test.py",
                        "lineno": 37,
                        "message": "in testIsVariableInitialized"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 991,
                        "message": "in eval"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 5798,
                        "message": "in _eval_using_default_session"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 2054,
                        "message": "in run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 968,
                        "message": "in run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1191,
                        "message": "in _run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1371,
                        "message": "in _do_run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1397,
                        "message": "InvalidArgumentError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nDetected at node 'IsVariableInitialized' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n      test = variables.is_variable_initialized(v0)\nNode: 'IsVariableInitialized'\nCannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nAssign: CPU \nIsVariableInitialized: CPU TPU TPU_SYSTEM \nVariable: CPU TPU TPU_SYSTEM \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\n  IsVariableInitialized (IsVariableInitialized) /device:TPU:0\n  IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\n  Assign (Assign) /device:TPU:0\n\n\t [[{{node IsVariableInitialized}}]]\n\nOriginal stack trace for 'IsVariableInitialized':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\n    test = variables.is_variable_initialized(v0)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\n    return state_ops.is_variable_initialized(variable)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\n    return gen_state_ops.is_variable_initialized(ref=ref, name=name)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683578796.0944316,
                        "msecs": 94.43163871765137,
                        "relativeCreated": 488592.4913883209,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ],
                "longrepr": "self = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7fc46cc67ac0>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7fc46f30f160>\nargs = ({}, [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7fc46dd25d30>], [], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'IsVariableInitialized\\' defined at (most recent call last):\\n    File \"s...ized_1 (IsVariableInitialized) /device:TPU:0\\n  Assign (Assign) /device:TPU:0\\n\\n\\t [[{{node IsVariableInitialized}}]]'\nm = <re.Match object; span=(1621, 1653), match='[[{{node IsVariableInitialized}}'>\n\n    def _do_call(self, fn, *args):\n      try:\n>       return fn(*args)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfeed_dict = {}\nfetch_list = [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7fc46dd25d30>]\ntarget_list = [], options = None, run_metadata = None\n\n    def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):\n      # Ensure any changes to the graph are reflected in the runtime.\n>     self._extend_graph()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7fc46cc67ac0>\n\n    def _extend_graph(self):\n      with self._graph._session_run_lock():  # pylint: disable=protected-access\n>       tf_session.ExtendSession(self._session)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Assign: CPU \nE       IsVariableInitialized: CPU TPU TPU_SYSTEM \nE       Variable: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\nE         IsVariableInitialized (IsVariableInitialized) /device:TPU:0\nE         IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\nE         Assign (Assign) /device:TPU:0\nE       \nE       \t [[{{node IsVariableInitialized}}]]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1401: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.is_variable_initialized_test.VariableOpTest testMethod=testIsVariableInitialized>\nargs = (), kwargs = {}\n\n    def decorated(self, *args, **kwargs):\n      if context.executing_eagerly():\n        with context.graph_mode():\n>         return f(self, *args, **kwargs)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1624: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/is_variable_initialized_test.py:37: in testIsVariableInitialized\n    state_ops.assign(v0, [[2.0, 3.0]]).eval()\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:991: in eval\n    return _eval_using_default_session(self, feed_dict, self.graph, session)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:5798: in _eval_using_default_session\n    return session.run(tensors, feed_dict)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:2054: in run\n    return super().run(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:968: in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1191: in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1371: in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.framework.test_util.ErrorLoggingSession object at 0x7fc46cc67ac0>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7fc46f30f160>\nargs = ({}, [<tensorflow.python.client._pywrap_tf_session.TF_Output object at 0x7fc46dd25d30>], [], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'IsVariableInitialized\\' defined at (most recent call last):\\n    File \"s...ized_1 (IsVariableInitialized) /device:TPU:0\\n  Assign (Assign) /device:TPU:0\\n\\n\\t [[{{node IsVariableInitialized}}]]'\nm = <re.Match object; span=(1621, 1653), match='[[{{node IsVariableInitialized}}'>\n\n    def _do_call(self, fn, *args):\n      try:\n        return fn(*args)\n      except errors.OpError as e:\n        message = compat.as_text(e.message)\n        m = BaseSession._NODEDEF_NAME_RE.search(message)\n        node_def = None\n        op = None\n        if m is not None:\n          node_name = m.group(3)\n          try:\n            op = self._graph.get_operation_by_name(node_name)\n            node_def = op.node_def\n          except KeyError:\n            pass\n        message = error_interpolation.interpolate(message, self._graph)\n        if 'only supports NHWC tensor format' in message:\n          message += ('\\nA possible workaround: Try disabling Grappler optimizer'\n                      '\\nby modifying the config for creating the session eg.'\n                      '\\nsession_config.graph_options.rewrite_options.'\n                      'disable_meta_optimizer = True')\n>       raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\nE       \nE       Detected at node 'IsVariableInitialized' defined at (most recent call last):\nE           File \"src/tensorflow_test.py\", line 96, in <module>\nE             retcode = pytest.main([sys.argv[1], \"-s\"])\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE             return wrap_session(config, _main)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE             session.exitstatus = doit(config, session) or 0\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE             config.hook.pytest_runtestloop(session=session)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE             runtestprotocol(item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE             reports.append(call_and_report(item, \"call\", log))\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE             call = call_runtest_hook(item, when, **kwds)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE             return CallInfo.from_call(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE             result: Optional[TResult] = func()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE             item.runtest()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE             self._testcase(result=self)  # type: ignore[arg-type]\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE             return self.run(*args, **kwds)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE             self._callTestMethod(testMethod)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE             method()\nE           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE             test = variables.is_variable_initialized(v0)\nE       Node: 'IsVariableInitialized'\nE       Detected at node 'IsVariableInitialized' defined at (most recent call last):\nE           File \"src/tensorflow_test.py\", line 96, in <module>\nE             retcode = pytest.main([sys.argv[1], \"-s\"])\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE             return wrap_session(config, _main)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE             session.exitstatus = doit(config, session) or 0\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE             config.hook.pytest_runtestloop(session=session)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE             runtestprotocol(item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE             reports.append(call_and_report(item, \"call\", log))\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE             call = call_runtest_hook(item, when, **kwds)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE             return CallInfo.from_call(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE             result: Optional[TResult] = func()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE             item.runtest()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE             self._testcase(result=self)  # type: ignore[arg-type]\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE             return self.run(*args, **kwds)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE             self._callTestMethod(testMethod)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE             method()\nE           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE             test = variables.is_variable_initialized(v0)\nE       Node: 'IsVariableInitialized'\nE       Cannot assign a device for operation IsVariableInitialized: Could not satisfy explicit device specification '/device:TPU:0' because the node {{colocation_node IsVariableInitialized}} was colocated with a group of nodes that required incompatible device '/job:localhost/replica:0/task:0/device:TPU:0'. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7]. \nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' resource_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Assign: CPU \nE       IsVariableInitialized: CPU TPU TPU_SYSTEM \nE       Variable: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         Variable (Variable) /device:TPU:0 framework assigned device=/job:localhost/replica:0/task:0/device:TPU:0\nE         IsVariableInitialized (IsVariableInitialized) /device:TPU:0\nE         IsVariableInitialized_1 (IsVariableInitialized) /device:TPU:0\nE         Assign (Assign) /device:TPU:0\nE       \nE       \t [[{{node IsVariableInitialized}}]]\nE       \nE       Original stack trace for 'IsVariableInitialized':\nE         File \"src/tensorflow_test.py\", line 96, in <module>\nE           retcode = pytest.main([sys.argv[1], \"-s\"])\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE           ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE           return wrap_session(config, _main)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE           session.exitstatus = doit(config, session) or 0\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE           config.hook.pytest_runtestloop(session=session)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE           item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE           runtestprotocol(item, nextitem=nextitem)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE           reports.append(call_and_report(item, \"call\", log))\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE           call = call_runtest_hook(item, when, **kwds)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE           return CallInfo.from_call(\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE           result: Optional[TResult] = func()\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE           lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE           return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE           return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE           res = hook_impl.function(*args)\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE           item.runtest()\nE         File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE           self._testcase(result=self)  # type: ignore[arg-type]\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE           return self.run(*args, **kwds)\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE           self._callTestMethod(testMethod)\nE         File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE           method()\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\nE           return f(self, *args, **kwargs)\nE         File \"/home/frasermince/portability/src/tensorflow_tests_reduced/is_variable_initialized_test.py\", line 34, in testIsVariableInitialized\nE           test = variables.is_variable_initialized(v0)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\nE           return _add_should_use_warning(fn(*args, **kwargs),\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/variables.py\", line 3381, in is_variable_initialized\nE           return state_ops.is_variable_initialized(variable)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/state_ops.py\", line 127, in is_variable_initialized\nE           return gen_state_ops.is_variable_initialized(ref=ref, name=name)\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_state_ops.py\", line 269, in is_variable_initialized\nE           _, _, _op, _outputs = _op_def_library._apply_op_helper(\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\nE           op = g._create_op_internal(op_type_name, inputs, dtypes=None,\nE         File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\nE           ret = Operation(\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1397: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000353217000110817,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/is_variable_initialized_test.py::VariableOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005824269999266107,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005131909999818163,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028622099989661365,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testFSPath",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006104530000357045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2580140149998442,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002750140001808177,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::testGetAllVariables",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005936980001024494,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2038247919999776,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028638799994951114,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/list_variables_test.py::CheckpointsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000583145000064178,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005035359999965294,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00035524200006875617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::testLaplaceLogSurvivalFunction",
            "lineno": 46,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005791269998098869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21307212000010622,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                    "lineno": 3009,
                    "message": "AssertionError: \nNot equal to tolerance rtol=1e-06, atol=1e-06\nMismatched value: a is different from b. \nnot close where = (array([0, 2, 3, 4]),)\nnot close lhs = [-0.1182904  -0.07006288 -0.30843028 -0.4436405 ]\nnot close rhs = [-0.11829388 -0.07006592 -0.30844239 -0.44358085]\nnot close dif = [3.47920406e-06 3.04441260e-06 1.21031736e-05 5.96516431e-05]\nnot close tol = [1.11829388e-06 1.07006592e-06 1.30844239e-06 1.44358085e-06]\ndtype = float32, shape = (6,)\nMismatched elements: 4 / 6 (66.7%)\nMax absolute difference: 5.96516431e-05\nMax relative difference: 0.00013448\n x: array([-0.11829 , -0.859814, -0.070063, -0.30843 , -0.443641, -0.693147],\n      dtype=float32)\n y: array([-0.118294, -0.859814, -0.070066, -0.308442, -0.443581, -0.693147])"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/log_survival_function_test.py",
                        "lineno": 64,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 1532,
                        "message": "in decorated"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3116,
                        "message": "in assertAllClose"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3072,
                        "message": "in _assertAllCloseRecursive"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "lineno": 3009,
                        "message": "AssertionError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/log_survival_function_test.py:55: Laplace.__init__ (from tensorflow.python.ops.distributions.laplace) is deprecated and will be removed after 2019-01-01.\nInstructions for updating:\nThe TensorFlow Distributions library has moved to TensorFlow Probability (https://github.com/tensorflow/probability). You should update all references to use `tfp.distributions` instead of `tf.distributions`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683578797.0548127,
                        "msecs": 54.81266975402832,
                        "relativeCreated": 489552.8724193573,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.log_survival_function_test.LaplaceTest testMethod=testLaplaceLogSurvivalFunction>\n\n    def testLaplaceLogSurvivalFunction(self):\n      batch_size = 6\n      loc = constant_op.constant([2.0] * batch_size)\n      scale = constant_op.constant([3.0] * batch_size)\n      loc_v = 2.0\n      scale_v = 3.0\n      x = np.array([-2.5, 2.5, -4.0, 0.1, 1.0, 2.0], dtype=np.float32)\n    \n      laplace = laplace_lib.Laplace(loc=loc, scale=scale)\n      timer = tensorflow_op_timer()\n      with timer:\n          sf = laplace.log_survival_function(x)\n          timer.gen.send(sf)\n      self.assertEqual(sf.get_shape(), (6,))\n      if not stats:\n        return\n      expected_sf = stats.laplace.logsf(x, loc_v, scale=scale_v)\n>     self.assertAllClose(self.evaluate(sf), expected_sf)\n\nsrc/tensorflow_tests_reduced/log_survival_function_test.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:1532: in decorated\n    return f(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3116: in assertAllClose\n    self._assertAllCloseRecursive(a, b, rtol=rtol, atol=atol, msg=msg)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3072: in _assertAllCloseRecursive\n    self._assertArrayLikeAllClose(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <src.tensorflow_tests_reduced.log_survival_function_test.LaplaceTest testMethod=testLaplaceLogSurvivalFunction>\na = array([-0.1182904 , -0.85981387, -0.07006288, -0.30843028, -0.4436405 ,\n       -0.6931472 ], dtype=float32)\nb = array([-0.11829388, -0.85981385, -0.07006592, -0.30844239, -0.44358085,\n       -0.69314718])\nrtol = 1e-06, atol = 1e-06, msg = 'Mismatched value: a is different from b. '\n\n    def _assertArrayLikeAllClose(self, a, b, rtol=1e-6, atol=1e-6, msg=None):\n      (a, b) = self.evaluate_if_both_tensors(a, b)\n      a = self._GetNdArray(a)\n      b = self._GetNdArray(b)\n      # When the array rank is small, print its contents. Numpy array printing is\n      # implemented using inefficient recursion so prints can cause tests to\n      # time out.\n      if a.shape != b.shape and (b.ndim <= 3 or b.size < 500):\n        shape_mismatch_msg = (\"Shape mismatch: expected %s, got %s with contents \"\n                              \"%s.\") % (a.shape, b.shape, b)\n      else:\n        shape_mismatch_msg = \"Shape mismatch: expected %s, got %s.\" % (a.shape,\n                                                                       b.shape)\n      self.assertEqual(a.shape, b.shape, shape_mismatch_msg)\n    \n      msgs = [msg]\n      # np.allclose does not always work for our custom bfloat16 extension type\n      # when type promotions are involved, so we first cast any bfloat16 arrays\n      # to float32.\n      a_dtype = a.dtype\n      a = a.astype(np.float32) if a.dtype == dtypes.bfloat16.as_numpy_dtype else a\n      b = b.astype(np.float32) if b.dtype == dtypes.bfloat16.as_numpy_dtype else b\n      if not np.allclose(a, b, rtol=rtol, atol=atol):\n        # Adds more details to np.testing.assert_allclose.\n        #\n        # NOTE: numpy.allclose (and numpy.testing.assert_allclose)\n        # checks whether two arrays are element-wise equal within a\n        # tolerance. The relative difference (rtol * abs(b)) and the\n        # absolute difference atol are added together to compare against\n        # the absolute difference between a and b.  Here, we want to\n        # tell user which elements violate such conditions.\n        cond = np.logical_or(\n            np.abs(a - b) > atol + rtol * np.abs(b),\n            np.isnan(a) != np.isnan(b))\n        if a.ndim:\n          x = a[np.where(cond)]\n          y = b[np.where(cond)]\n          msgs.append(\"not close where = {}\".format(np.where(cond)))\n        else:\n          # np.where is broken for scalars\n          x, y = a, b\n        msgs.append(\"not close lhs = {}\".format(x))\n        msgs.append(\"not close rhs = {}\".format(y))\n        msgs.append(\"not close dif = {}\".format(np.abs(x - y)))\n        msgs.append(\"not close tol = {}\".format(atol + rtol * np.abs(y)))\n        msgs.append(\"dtype = {}, shape = {}\".format(a_dtype, a.shape))\n        # TODO(xpan): There seems to be a bug:\n        # tensorflow/compiler/tests:binary_ops_test pass with float32\n        # nan even though the equal_nan is False by default internally.\n>       np.testing.assert_allclose(\n            a, b, rtol=rtol, atol=atol, err_msg=\"\\n\".join(msgs), equal_nan=True)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-06, atol=1e-06\nE       Mismatched value: a is different from b. \nE       not close where = (array([0, 2, 3, 4]),)\nE       not close lhs = [-0.1182904  -0.07006288 -0.30843028 -0.4436405 ]\nE       not close rhs = [-0.11829388 -0.07006592 -0.30844239 -0.44358085]\nE       not close dif = [3.47920406e-06 3.04441260e-06 1.21031736e-05 5.96516431e-05]\nE       not close tol = [1.11829388e-06 1.07006592e-06 1.30844239e-06 1.44358085e-06]\nE       dtype = float32, shape = (6,)\nE       Mismatched elements: 4 / 6 (66.7%)\nE       Max absolute difference: 5.96516431e-05\nE       Max relative difference: 0.00013448\nE        x: array([-0.11829 , -0.859814, -0.070063, -0.30843 , -0.443641, -0.693147],\nE             dtype=float32)\nE        y: array([-0.118294, -0.859814, -0.070066, -0.308442, -0.443581, -0.693147])\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py:3009: AssertionError"
            },
            "teardown": {
                "duration": 0.00034606500003064866,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/log_survival_function_test.py::LaplaceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005809050001062133,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005064380000021629,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002825960000336636,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005754420001267135,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005532399998173787,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020278499982850917,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004686489999130572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0027075689999946917,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002485249999608641,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005014910000227246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005497330000707734,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023223499988489493,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::testMapStructure_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005223810001098173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0019699150000178633,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002215269998941949,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004959899999903428,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004448340000635653,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00037867099990762654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::testMapStructureUpTo",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006149040000309469,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004302313999914986,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022352100017997145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/map_structure_up_to_test.py::NestTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005228099998930702,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044857400007458637,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002995820000251115,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_numpy_arguments",
            "lineno": 31,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007951580000735703,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02131436200011194,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002030989999184385,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047187399991344137,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005991339999127376,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00020190700001876394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateful",
            "lineno": 73,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045986999998604006,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3690607630001068,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateful_52486[_XlaMustCompile=true,config_proto=9528431670410229334,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFunc (No registered 'PyFunc' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateful_52481}}{{node PyFunc}}){{function_node __inference_numpy_func_stateful_52481}}{{node PyFunc}}\nOne approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\n\nThe op is created at: \nFile \"src/tensorflow_test.py\", line 96, in <module>\n  retcode = pytest.main([sys.argv[1], \"-s\"])\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n  ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n  return wrap_session(config, _main)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n  session.exitstatus = doit(config, session) or 0\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n  config.hook.pytest_runtestloop(session=session)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n  item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n  runtestprotocol(item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n  reports.append(call_and_report(item, \"call\", log))\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n  call = call_runtest_hook(item, when, **kwds)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n  return CallInfo.from_call(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n  result: Optional[TResult] = func()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n  lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n  item.runtest()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n  self._testcase(result=self)  # type: ignore[arg-type]\nFile \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n  return self.run(*args, **kwds)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n  self._callTestMethod(testMethod)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n  method()\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 96, in test_stateful\n  self.evaluate(func_stateful(\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 92, in func_stateful\n  sum1 = numpy_func_stateful(a, b)\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 86, in numpy_func_stateful\n  test = numpy_function(plus, [a, b], dtypes.int32, stateful=True) [Op:__inference_func_stateful_52486]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/numpy_function_test.py",
                        "lineno": 96,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 880,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 952,
                        "message": "in _call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 1745,
                        "message": "in _call_flat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 378,
                        "message": "in call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.numpy_function_test.NumpyFunctionTest testMethod=test_stateful>\n\n    def test_stateful(self):\n        call_count = 0\n    \n        def plus(a, b):\n            nonlocal call_count\n            call_count += 1\n            return a + b\n    \n        @def_function.function\n        def numpy_func_stateful(a, b):\n            timer = tensorflow_op_timer()\n            with timer:\n                test = numpy_function(plus, [a, b], dtypes.int32, stateful=True)\n                timer.gen.send(test)\n            return test\n    \n        @def_function.function\n        def func_stateful(a, b):\n            sum1 = numpy_func_stateful(a, b)\n            sum2 = numpy_func_stateful(a, b)\n            return sum1 + sum2\n    \n>       self.evaluate(func_stateful(\n            constant_op.constant(1),\n            constant_op.constant(2),\n        ))\n\nsrc/tensorflow_tests_reduced/numpy_function_test.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:880: in __call__\n    result = self._call(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:952: in _call\n    return self._concrete_variable_creation_fn._call_flat(   # pylint: disable=protected-access\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1745: in _call_flat\n    return self._build_call_outputs(self._inference_function.call(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:378: in call\n    outputs = execute.execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = '__inference_func_stateful_52486', num_outputs = 1\ninputs = [<tf.Tensor: shape=(), dtype=int32, numpy=1>, <tf.Tensor: shape=(), dtype=int32, numpy=2>]\nattrs = ('executor_type', '', 'config_proto', b'\\n\\x07\\n\\x03CPU\\x10\\x01\\n\\x07\\n\\x03GPU\\x10\\x00\\n\\x07\\n\\x03TPU\\x10\\x08\\n\\x0e\\n\\nTPU_SYSTEM\\x10\\x012\\x02J\\x00\\x82\\x01\\x00')\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateful_52486[_XlaMustCompile=true,config_proto=9528431670410229334,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFunc (No registered 'PyFunc' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateful_52481}}{{node PyFunc}}){{function_node __inference_numpy_func_stateful_52481}}{{node PyFunc}}\nE                                           One approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\nE                                           \nE                                           The op is created at: \nE                                           File \"src/tensorflow_test.py\", line 96, in <module>\nE                                             retcode = pytest.main([sys.argv[1], \"-s\"])\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE                                             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE                                             return wrap_session(config, _main)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE                                             session.exitstatus = doit(config, session) or 0\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE                                             config.hook.pytest_runtestloop(session=session)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE                                             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE                                             runtestprotocol(item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE                                             reports.append(call_and_report(item, \"call\", log))\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE                                             call = call_runtest_hook(item, when, **kwds)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE                                             return CallInfo.from_call(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE                                             result: Optional[TResult] = func()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE                                             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE                                             item.runtest()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE                                             self._testcase(result=self)  # type: ignore[arg-type]\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE                                             return self.run(*args, **kwds)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE                                             self._callTestMethod(testMethod)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE                                             method()\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 96, in test_stateful\nE                                             self.evaluate(func_stateful(\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 92, in func_stateful\nE                                             sum1 = numpy_func_stateful(a, b)\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 86, in numpy_func_stateful\nE                                             test = numpy_function(plus, [a, b], dtypes.int32, stateful=True) [Op:__inference_func_stateful_52486]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033501600000818144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/numpy_function_test.py::NumpyFunctionTest::test_stateless",
            "lineno": 43,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005680530000518047,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.3452957020001577,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateless_52506[_XlaMustCompile=true,config_proto=9528431670410229334,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFuncStateless (No registered 'PyFuncStateless' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateless_52501}}{{node PyFuncStateless_1}}){{function_node __inference_numpy_func_stateless_52501}}{{node PyFuncStateless_1}}\nOne approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\n\nThe op is created at: \nFile \"src/tensorflow_test.py\", line 96, in <module>\n  retcode = pytest.main([sys.argv[1], \"-s\"])\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n  ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n  return wrap_session(config, _main)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n  session.exitstatus = doit(config, session) or 0\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n  config.hook.pytest_runtestloop(session=session)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n  item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n  runtestprotocol(item, nextitem=nextitem)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n  reports.append(call_and_report(item, \"call\", log))\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n  call = call_runtest_hook(item, when, **kwds)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n  return CallInfo.from_call(\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n  result: Optional[TResult] = func()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n  lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n  return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n  return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n  res = hook_impl.function(*args)\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n  item.runtest()\nFile \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n  self._testcase(result=self)  # type: ignore[arg-type]\nFile \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n  return self.run(*args, **kwds)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n  self._callTestMethod(testMethod)\nFile \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n  method()\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 66, in test_stateless\n  self.evaluate(func_stateless(\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 62, in func_stateless\n  sum1 = numpy_func_stateless(a, b)\nFile \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 58, in numpy_func_stateless\n  return numpy_function(plus, [a, b], dtypes.int32, stateful=False) [Op:__inference_func_stateless_52506]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/numpy_function_test.py",
                        "lineno": 66,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 880,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py",
                        "lineno": 952,
                        "message": "in _call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 1745,
                        "message": "in _call_flat"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py",
                        "lineno": 378,
                        "message": "in call"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.numpy_function_test.NumpyFunctionTest testMethod=test_stateless>\n\n    def test_stateless(self):\n        call_count = 0\n    \n        def plus(a, b):\n            nonlocal call_count\n            call_count += 1\n            return a + b\n    \n        @def_function.function\n        def numpy_func_stateless(a, b):\n            timer = tensorflow_op_timer()\n            with timer:\n                test = numpy_function(plus, [a, b], dtypes.int32, stateful=False)\n                timer.gen.send(test)\n            return numpy_function(plus, [a, b], dtypes.int32, stateful=False)\n    \n        @def_function.function\n        def func_stateless(a, b):\n            sum1 = numpy_func_stateless(a, b)\n            sum2 = numpy_func_stateless(a, b)\n            return sum1 + sum2\n    \n>       self.evaluate(func_stateless(\n            constant_op.constant(1),\n            constant_op.constant(2),\n        ))\n\nsrc/tensorflow_tests_reduced/numpy_function_test.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:880: in __call__\n    result = self._call(*args, **kwds)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:952: in _call\n    return self._concrete_variable_creation_fn._call_flat(   # pylint: disable=protected-access\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:1745: in _call_flat\n    return self._build_call_outputs(self._inference_function.call(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/polymorphic_function/monomorphic_function.py:378: in call\n    outputs = execute.execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = '__inference_func_stateless_52506', num_outputs = 1\ninputs = [<tf.Tensor: shape=(), dtype=int32, numpy=1>, <tf.Tensor: shape=(), dtype=int32, numpy=2>]\nattrs = ('executor_type', '', 'config_proto', b'\\n\\x07\\n\\x03CPU\\x10\\x01\\n\\x07\\n\\x03GPU\\x10\\x00\\n\\x07\\n\\x03TPU\\x10\\x08\\n\\x0e\\n\\nTPU_SYSTEM\\x10\\x012\\x02J\\x00\\x82\\x01\\x00')\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Detected unsupported operations when trying to compile graph __inference_func_stateless_52506[_XlaMustCompile=true,config_proto=9528431670410229334,executor_type=11160318154034397263] on XLA_TPU_JIT: PyFuncStateless (No registered 'PyFuncStateless' OpKernel for XLA_TPU_JIT devices compatible with node {{function_node __inference_numpy_func_stateless_52501}}{{node PyFuncStateless_1}}){{function_node __inference_numpy_func_stateless_52501}}{{node PyFuncStateless_1}}\nE                                           One approach is to outside compile the unsupported ops to run on CPUs by enabling soft placement `tf.config.set_soft_device_placement(True)`. This has a potential performance penalty.\nE                                           \nE                                           The op is created at: \nE                                           File \"src/tensorflow_test.py\", line 96, in <module>\nE                                             retcode = pytest.main([sys.argv[1], \"-s\"])\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE                                             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE                                             return wrap_session(config, _main)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE                                             session.exitstatus = doit(config, session) or 0\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE                                             config.hook.pytest_runtestloop(session=session)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE                                             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE                                             runtestprotocol(item, nextitem=nextitem)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE                                             reports.append(call_and_report(item, \"call\", log))\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE                                             call = call_runtest_hook(item, when, **kwds)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE                                             return CallInfo.from_call(\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE                                             result: Optional[TResult] = func()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE                                             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE                                             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE                                             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE                                             res = hook_impl.function(*args)\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE                                             item.runtest()\nE                                           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE                                             self._testcase(result=self)  # type: ignore[arg-type]\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE                                             return self.run(*args, **kwds)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE                                             self._callTestMethod(testMethod)\nE                                           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE                                             method()\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 66, in test_stateless\nE                                             self.evaluate(func_stateless(\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 62, in func_stateless\nE                                             sum1 = numpy_func_stateless(a, b)\nE                                           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/numpy_function_test.py\", line 58, in numpy_func_stateless\nE                                             return numpy_function(plus, [a, b], dtypes.int32, stateful=False) [Op:__inference_func_stateless_52506]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0005221169999458652,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::testParamShapes",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006847320000815671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18287004600006185,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029533699989769957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/param_shapes_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.000625895999974091,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010534779999034072,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000319657000090956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_hash_bucket",
            "lineno": 37,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006428530000448518,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03040944600002149,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 39,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_hash_bucket>\n\n    def test_seq_ex_in_sequence_categorical_column_with_hash_bucket(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_hash_bucket,\n          10, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x10\\n\\x07int_ctx\\x12\\x05\\x1a\\x03\\n\\x01\\x05\\n\\x15\\n\\tfloat_ctx\\x12\\x...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033800300002440054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_identity",
            "lineno": 32,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005793329999050911,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0113719849998688,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_identity>\n\n    def test_seq_ex_in_sequence_categorical_column_with_identity(self):\n>     self._test_parsed_sequence_example(\n          'int_list', sfc.sequence_categorical_column_with_identity,\n          10, [3, 6], [2, 4, 6])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1..., numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'int_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003107370000634546,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_file",
            "lineno": 48,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005656809998981771,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011706609999919237,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 53,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_file>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_file(self):\n      _, fname = tempfile.mkstemp()\n      with open(fname, 'w') as f:\n        f.write(string.ascii_lowercase)\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_file,\n          fname, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00033494800004518765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_seq_ex_in_sequence_categorical_column_with_vocabulary_list",
            "lineno": 42,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005708539999886852,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011117158999923049,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py",
                        "lineno": 80,
                        "message": "in _test_parsed_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 795,
                        "message": "in parse_single_sequence_example"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 838,
                        "message": "in _parse_single_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py",
                        "lineno": 622,
                        "message": "in _parse_sequence_example_raw"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1345,
                        "message": "in parse_sequence_example_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py",
                        "lineno": 1603,
                        "message": "in parse_sequence_example_v2_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.parse_single_sequence_example_test.SequenceExampleParsingTest testMethod=test_seq_ex_in_sequence_categorical_column_with_vocabulary_list>\n\n    def test_seq_ex_in_sequence_categorical_column_with_vocabulary_list(self):\n>     self._test_parsed_sequence_example(\n          'bytes_list', sfc.sequence_categorical_column_with_vocabulary_list,\n          list(string.ascii_lowercase), [3, 4],\n          [compat.as_bytes(x) for x in 'acg'])\n\nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/parse_single_sequence_example_test.py:80: in _test_parsed_sequence_example\n    context, seq_features = parsing_ops.parse_single_sequence_example(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:795: in parse_single_sequence_example\n    _parse_single_sequence_example_raw(serialized, context_params,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:838: in _parse_single_sequence_example_raw\n    return _parse_sequence_example_raw(serialized, debug_name, context,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/parsing_ops.py:622: in _parse_sequence_example_raw\n    outputs = gen_parsing_ops.parse_sequence_example_v2(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1345: in parse_sequence_example_v2\n    return parse_sequence_example_v2_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_parsing_ops.py:1603: in parse_sequence_example_v2_eager_fallback\n    _result = _execute.execute(b\"ParseSequenceExampleV2\", Ncontext_sparse +\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'ParseSequenceExampleV2', num_outputs = 7\ninputs = [<tf.Tensor: shape=(), dtype=string, numpy=b'\\n)\\n\\x15\\n\\tfloat_ctx\\x12\\x08\\x12\\x06\\n\\x0433\\xf7B\\n\\x10\\n\\x07int_ctx\\x1...numpy=array([], dtype=object)>, <tf.Tensor: shape=(1,), dtype=string, numpy=array([b'bytes_list'], dtype=object)>, ...]\nattrs = ('Ncontext_sparse', 1, 'Tcontext_dense', [1], 'context_sparse_types', [9], ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ParseSequenceExampleV2]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00032882300001801923,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/parse_single_sequence_example_test.py::SequenceExampleParsingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005715739998777281,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008764829999563517,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003567720000319241,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::BaseFFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005776999998943211,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043114200002492,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002518900000723079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder0",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005652820000250358,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6472993700001552,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000303777999988597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder1",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005936290001500311,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5726871749998281,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029959100015730655,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_placeholder2",
            "lineno": 208,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006165329998566449,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7350976489999539,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030482399984066433,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/placeholder_test.py::FFTOpsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005958149999969464,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00048588200002086523,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00034126499986086856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_lone_print",
            "lineno": 76,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006061770000087563,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05305545899977915,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 167,
                    "message": "AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nEagerPyFunc: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\n\nOp: EagerPyFunc\nNode attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_4\"\nRegistered kernels:\n  device='CPU'\n  device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\n\n\t [[{{node EagerPyFunc}}]] [Op:__inference_lone_print_52737]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 79,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 167,
                        "message": "in assertFunctionMatchesEager"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_lone_print>\n\n    def test_lone_print(self):\n        self.assertFunctionMatchesEager(lone_print, 1)\n>       self.assertFunctionMatchesEager(lone_print, np.array([1, 2, 3]))\n\nsrc/tensorflow_tests_reduced/print_test.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:167: in assertFunctionMatchesEager\n    self.fail(str(compiled_err))\nE   AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nE   Colocation Debug Info:\nE   Colocation group had the following types and supported devices: \nE   Root Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nE   EagerPyFunc: CPU \nE   \nE   Colocation members, user-requested devices, and framework assigned devices, if any:\nE     EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\nE   \nE   Op: EagerPyFunc\nE   Node attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_4\"\nE   Registered kernels:\nE     device='CPU'\nE     device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\nE   \nE   \t [[{{node EagerPyFunc}}]] [Op:__inference_lone_print_52737]"
            },
            "teardown": {
                "duration": 0.00025672200013104884,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_multiple_prints",
            "lineno": 85,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005151000000296335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.13538973499998974,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 167,
                    "message": "AssertionError: Cannot assign a device for operation PrintV2: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nPrintV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  PrintV2 (PrintV2) /device:TPU:0\n\nOp: PrintV2\nNode attrs: end=\"\\n\", output_stream=\"stderr\", _xla_inferred_shapes=[]\nRegistered kernels:\n  device='CPU'\n\n\t [[{{node PrintV2}}]] [Op:__inference_multiple_prints_52744]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 87,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 167,
                        "message": "in assertFunctionMatchesEager"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_multiple_prints>\n\n    def test_multiple_prints(self):\n>       self.assertFunctionMatchesEager(multiple_prints, 1, 2)\n\nsrc/tensorflow_tests_reduced/print_test.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:167: in assertFunctionMatchesEager\n    self.fail(str(compiled_err))\nE   AssertionError: Cannot assign a device for operation PrintV2: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nE   Colocation Debug Info:\nE   Colocation group had the following types and supported devices: \nE   Root Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nE   PrintV2: CPU \nE   \nE   Colocation members, user-requested devices, and framework assigned devices, if any:\nE     PrintV2 (PrintV2) /device:TPU:0\nE   \nE   Op: PrintV2\nE   Node attrs: end=\"\\n\", output_stream=\"stderr\", _xla_inferred_shapes=[]\nE   Registered kernels:\nE     device='CPU'\nE   \nE   \t [[{{node PrintV2}}]] [Op:__inference_multiple_prints_52744]"
            },
            "teardown": {
                "duration": 0.0002655400001003727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_print_multiple_values",
            "lineno": 80,
            "outcome": "failed",
            "setup": {
                "duration": 0.000517030999844792,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04499703400006183,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 167,
                    "message": "AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nEagerPyFunc: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\n\nOp: EagerPyFunc\nNode attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_5\"\nRegistered kernels:\n  device='CPU'\n  device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\n\n\t [[{{node EagerPyFunc}}]] [Op:__inference_print_multiple_values_52754]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 83,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 167,
                        "message": "in assertFunctionMatchesEager"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_print_multiple_values>\n\n    def test_print_multiple_values(self):\n        self.assertFunctionMatchesEager(print_multiple_values, 1)\n>       self.assertFunctionMatchesEager(\n            print_multiple_values, np.array([1, 2, 3]))\n\nsrc/tensorflow_tests_reduced/print_test.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:167: in assertFunctionMatchesEager\n    self.fail(str(compiled_err))\nE   AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nE   Colocation Debug Info:\nE   Colocation group had the following types and supported devices: \nE   Root Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nE   EagerPyFunc: CPU \nE   \nE   Colocation members, user-requested devices, and framework assigned devices, if any:\nE     EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\nE   \nE   Op: EagerPyFunc\nE   Node attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_5\"\nE   Registered kernels:\nE     device='CPU'\nE     device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\nE   \nE   \t [[{{node EagerPyFunc}}]] [Op:__inference_print_multiple_values_52754]"
            },
            "teardown": {
                "duration": 0.00024637199999233417,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_print_with_nontf_values",
            "lineno": 90,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005040439998538204,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04634432200009542,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 167,
                    "message": "AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nEagerPyFunc: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\n\nOp: EagerPyFunc\nNode attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_6\"\nRegistered kernels:\n  device='CPU'\n  device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\n\n\t [[{{node EagerPyFunc}}]] [Op:__inference_print_with_nontf_values_52765]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 93,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 167,
                        "message": "in assertFunctionMatchesEager"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_print_with_nontf_values>\n\n    def test_print_with_nontf_values(self):\n        self.assertFunctionMatchesEager(print_with_nontf_values, 1)\n>       self.assertFunctionMatchesEager(print_with_nontf_values, np.array([1, 2,\n                                                                           3]))\n\nsrc/tensorflow_tests_reduced/print_test.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:167: in assertFunctionMatchesEager\n    self.fail(str(compiled_err))\nE   AssertionError: Cannot assign a device for operation EagerPyFunc: Could not satisfy explicit device specification '/job:localhost/replica:0/task:0/device:TPU:0' because no supported kernel for TPU devices is available.\nE   Colocation Debug Info:\nE   Colocation group had the following types and supported devices: \nE   Root Member(assigned_device_name_index_=-1 requested_device_name_='/job:localhost/replica:0/task:0/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nE   EagerPyFunc: CPU \nE   \nE   Colocation members, user-requested devices, and framework assigned devices, if any:\nE     EagerPyFunc (EagerPyFunc) /job:localhost/replica:0/task:0/device:TPU:0\nE   \nE   Op: EagerPyFunc\nE   Node attrs: _xla_inferred_shapes=[<unknown>], is_async=false, Tin=[DT_INT64], Tout=[DT_INT32], token=\"pyfunc_6\"\nE   Registered kernels:\nE     device='CPU'\nE     device='DEFAULT'; Tin in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]; Tout in [DT_FLOAT, DT_DOUBLE, DT_UINT8, DT_INT16, DT_INT8, 2776470360332367237, DT_UINT16, DT_COMPLEX128, DT_HALF, DT_UINT32, DT_UINT64]\nE   \nE   \t [[{{node EagerPyFunc}}]] [Op:__inference_print_with_nontf_values_52765]"
            },
            "teardown": {
                "duration": 0.000238454999816895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004945890000271902,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000502267000001666,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002027020000241464,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/print_test.py::ReferenceTest::test_tf_print",
            "lineno": 95,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004626669999652222,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05568013499987501,
                "outcome": "failed",
                "crash": {
                    "path": "/home/frasermince/portability/src/tensorflow_tests_reduced/reference_test_base.py",
                    "lineno": 167,
                    "message": "AssertionError: Cannot assign a device for operation PrintV2: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nPrintV2: CPU \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  PrintV2 (PrintV2) /device:TPU:0\n\nOp: PrintV2\nNode attrs: _xla_inferred_shapes=[], end=\"\\n\", output_stream=\"stderr\"\nRegistered kernels:\n  device='CPU'\n\n\t [[{{node PrintV2}}]] [Op:__inference_tf_print_52771]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/print_test.py",
                        "lineno": 97,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/reference_test_base.py",
                        "lineno": 167,
                        "message": "in assertFunctionMatchesEager"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.print_test.ReferenceTest testMethod=test_tf_print>\n\n    def test_tf_print(self):\n>       self.assertFunctionMatchesEager(tf_print, 0)\n\nsrc/tensorflow_tests_reduced/print_test.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/reference_test_base.py:167: in assertFunctionMatchesEager\n    self.fail(str(compiled_err))\nE   AssertionError: Cannot assign a device for operation PrintV2: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nE   Colocation Debug Info:\nE   Colocation group had the following types and supported devices: \nE   Root Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='' supported_device_types_=[CPU] possible_devices_=[]\nE   PrintV2: CPU \nE   \nE   Colocation members, user-requested devices, and framework assigned devices, if any:\nE     PrintV2 (PrintV2) /device:TPU:0\nE   \nE   Op: PrintV2\nE   Node attrs: _xla_inferred_shapes=[], end=\"\\n\", output_stream=\"stderr\"\nE   Registered kernels:\nE     device='CPU'\nE   \nE   \t [[{{node PrintV2}}]] [Op:__inference_tf_print_52771]"
            },
            "teardown": {
                "duration": 0.0004070239999691694,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testBasic",
            "lineno": 41,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006322710000858933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032489699992765964,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 42, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019863400007125165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testExceptionsCaptured",
            "lineno": 90,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046617299994977657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002920609999819135,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 91, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020611500008271832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testGracePeriod",
            "lineno": 182,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047663600003033935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002853420000974438,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 183, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020705800011455722,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testIgnoreMultiStarts",
            "lineno": 220,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045300600004338776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028732100008710404,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 221, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00021030700008850545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testMultipleSessions",
            "lineno": 202,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004688139999871055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002865779999865481,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 203, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019818700002360856,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testName",
            "lineno": 269,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044798499993703444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002848030001132429,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 270, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019720000000233995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testQueueRunnerSerializationRoundTrip",
            "lineno": 358,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046954799995546637,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002929559998392506,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 359, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019606200021371478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRealDequeueEnqueue",
            "lineno": 109,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007667460001812287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002904850000504666,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 110, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020467099989218696,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRequestStopOnException",
            "lineno": 167,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004639039998437511,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028716299993902794,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 168, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0001982869998755632,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testRespectCoordShouldStop",
            "lineno": 140,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004505139997945662,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028576900012922124,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 141, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00020412799995028763,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunners",
            "lineno": 281,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046893700005057326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002949090001038712,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 282, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019946599991271796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersIgnoresMonitoredSession",
            "lineno": 318,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044417399999474583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002955390000352054,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 319, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019962800001849246,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersNonDefaultGraph",
            "lineno": 335,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044709000007969735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0002973670000301354,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 336, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00021286599985614885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testStartQueueRunnersRaisesIfNotASession",
            "lineno": 302,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044195800001034513,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028274599981159554,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 303, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019331799990141008,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testThreads",
            "lineno": 239,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004465110000637651,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030612199998358847,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 240, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019536400009201316,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::testTwoOps",
            "lineno": 64,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007962930001212953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00029900200001975463,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/queuerunner_test.py', 65, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.00019743699999708042,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/queuerunner_test.py::QueueRunnerTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004432430000633758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00030048899998291745,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: QueueRunner removed from v2')"
            },
            "teardown": {
                "duration": 0.0005930709999120154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_bfloat16",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.000543199000048844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014758930001335102,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022164699998938886,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/rad2deg_test.py::CustomFloatNumPyTest::testUnaryUfunc_float8_e4m3b11",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004983910000646574,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0014011619998655078,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002977689998715505,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testBasic",
            "lineno": 23,
            "outcome": "passed",
            "setup": {
                "duration": 0.000601206000055754,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11066537900001094,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002468330001192953,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testDType",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005177150001145492,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17833734099986032,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027299799990032625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testEmpty",
            "lineno": 50,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005546279999180115,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02404015799993431,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024003799990168773,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testLimitOnly",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005336199999419478,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.036316219999889654,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002691999998205574,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testMixedDType",
            "lineno": 160,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005910400000175287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03872982999996566,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025119800011452753,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNegativeDelta",
            "lineno": 70,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005716860000575252,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07260043800010862,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002477259999977832,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::testNonInteger",
            "lineno": 54,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005497059999015619,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10482797400004529,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025390099995092896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/range_test.py::RangeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005571120000240626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008908489999157609,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00043526599984033965,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testEmitDifferentStructureThanCellOutput",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005998229999022442,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00035193899998375855,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020338700005595456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopState",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0010211510000317503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003335960000185878,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0002023740000822727,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testLoopStateWithTensorArray",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004504230000748066,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00034104899987141835,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0002064189998236543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNN",
            "lineno": 175,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004503870000007737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032720500007599185,
                "outcome": "skipped",
                "longrepr": "('/home/frasermince/portability/src/tensorflow_tests_reduced/raw_rnn_test.py', 176, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020440499997675943,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNScope",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045399700002235477,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0003251299999647017,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00022731699982614373,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::testRawRNNZeroLength",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004502939998474176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00032554400013395934,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00019920399995498883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::RawRNNTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044786699982068967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00028194300011818996,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00038038299999243463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testInputOnGPUCellNotDeclared",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005339179999737098,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004685779999817896,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00020191399994473613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnCPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00046131100020829763,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043702500011022494,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.00021058599986645277,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::testRNNOnCPUCellOnGPU",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004556979999961186,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004212829999232781,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/124229375')"
            },
            "teardown": {
                "duration": 0.0002125569999407162,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/raw_rnn_test.py::TensorArrayOnCorrectDeviceTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0017203910001626355,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042060499981744215,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003134410001166543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::testReduceLogSumExp",
            "lineno": 29,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005449160000807751,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.7574640119999003,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005515199998171738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_logsumexp_test.py::LogSumExpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0011376449999715987,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002931209000053059,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003308080001716007,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testNegAxes",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006334520001018973,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004812700999991648,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022866499989504518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testSimple",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005202659999667958,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0035373109999454755,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002230759998838039,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::testZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005134089999501157,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0039145660000485805,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022962100001677754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReducedShapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005143969999608089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005820520000270335,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00036118499997428444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::testBasic",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000613537999925029,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008581232999858912,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022055299996281974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionUnknownShape::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005495860000337416,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046801799999229843,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00030860000015309197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::testBasic",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006182570000419219,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011109499998838146,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002167520001421508,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ReductionInvalidKeepdims::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005114309999498801,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00042417800000293937,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003094050000527204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::BaseReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006437459999233397,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00044323099996290694,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002743479999480769,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testAxesType",
            "lineno": 443,
            "outcome": "passed",
            "setup": {
                "duration": 0.0018658950000371988,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0638336409999738,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002391059999808931,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005058470001131354,
                "outcome": "passed"
            },
            "call": {
                "duration": 14.487805254000023,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006081810001887789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0011265169998750935,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14852829300002668,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003357350001351733,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006993899999088171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0843245549999665,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002640739999151265,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005924920001234568,
                "outcome": "passed"
            },
            "call": {
                "duration": 11.945620512999994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003956359998937842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000702908999983265,
                "outcome": "passed"
            },
            "call": {
                "duration": 23.28831255399996,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005883809999431833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0010876530000132334,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.481437060999951,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00036843599991698284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006909759999871312,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6734564739999769,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028383099993334326,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006651890000739513,
                "outcome": "passed"
            },
            "call": {
                "duration": 12.455716917000018,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032258199985335523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006417800000235729,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3546985179998501,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031116399986785837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowInt8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006100740001784288,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3071323730000586,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000287013000161096,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint16",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005883769999854849,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.7502221549998467,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032831299995450536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testSizeOverflowUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006879569998545776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.28899541299983866,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002771269998902426,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::testUint8",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005933219999860739,
                "outcome": "passed"
            },
            "call": {
                "duration": 12.741846112000076,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0006045239999821206,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MeanReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0011038239999834332,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009128070000770094,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000982475999990129,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testAxesType",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006359459998748207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07412082699988787,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024876499992387835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006339909998587245,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.805650934000141,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00038436399995589454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008702680001988483,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.411145490000081,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003235280000808416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007121710000319581,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.3769574180000745,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029595999990306154,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006514890001199092,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.159652708000067,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029931200015198556,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006190450001213321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.31790925500013145,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028820800002904434,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006727550000960036,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.4457901860000675,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029280300009304483,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::testSingleton",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005911670000386948,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08601917600003617,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002907640000557876,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::EuclideanNormReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006370880000758916,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005644639998081402,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005247500000677974,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testAxesType",
            "lineno": 649,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006456339999658667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12407504499992683,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026785199997902964,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testComplex64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005649099998663587,
                "outcome": "passed"
            },
            "call": {
                "duration": 11.190235475999998,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032504799992238986,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006228469999314257,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09869122200007041,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002956969999559078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000685499999917738,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2844906999998784,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002967660000194883,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006524850000459992,
                "outcome": "passed"
            },
            "call": {
                "duration": 8.533149847999994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003090870000050927,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testFloat64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006063769999400392,
                "outcome": "passed"
            },
            "call": {
                "duration": 18.929414716999872,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033311900006083306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testGradientWithZeros",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006177570001000277,
                "outcome": "passed"
            },
            "call": {
                "duration": 16.66669343600006,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003168270000060147,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInfinity",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000628760000154216,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5265929019999476,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029307899990271835,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt32",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005906810001761187,
                "outcome": "passed"
            },
            "call": {
                "duration": 5.805850064999959,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030307400015772146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::testInt64",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006023350001669314,
                "outcome": "passed"
            },
            "call": {
                "duration": 20.089065224000024,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032826200003910344,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::ProdReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006189749999521155,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005403279999427468,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005482029998802318,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testAxesType",
            "lineno": 766,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006285930001013185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06352078800000527,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002344480001283955,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testDoubleReduce3D",
            "lineno": 795,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005299259998992056,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0314408519998324,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003090350001002662,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00067056800003229,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.20911101800015786,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030546599987246736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testFloatReduce3D",
            "lineno": 781,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005941299998539762,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4057122789999994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003215960000488849,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006433249998281099,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5018662640000002,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029069699985484476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005895110000437853,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.463275688000067,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029256700008772896,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006290869998792914,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.772917193000012,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002880629999708617,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005945380000866862,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.45327435400008653,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002968740000142134,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::testSpecialValues",
            "lineno": 773,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005917890000546322,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.46166965600014,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003302229999917472,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MinReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006414300000869844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015876249999564607,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005494739998539444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testAxesType",
            "lineno": 883,
            "outcome": "passed",
            "setup": {
                "duration": 0.00066319100005785,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06200666099994123,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002562629999829369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testDoubleReduce3D",
            "lineno": 926,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005387750002228131,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0297154370000499,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032964799993351335,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testEmptyGradients",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000645892999955322,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1375107339999886,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028825699996559706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testFloatReduce3D",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006006739999975252,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4039967759999854,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003067079999254929,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006270170001698716,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4968744620000507,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000290679000045202,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006025519999184326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4728817099999105,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029512099990824936,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient3",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005953330000920687,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7521575169998869,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028405900002326234,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testGradient4",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006041929998445994,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4544209379998847,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002934960000402498,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testInt64Reduce3D",
            "lineno": 898,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006309020000117016,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.7749390429999039,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033595600007174653,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::testSpecialValues",
            "lineno": 890,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006261360001644789,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.4172697750000225,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030858599984640023,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::MaxReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006473600001299928,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015194269999483367,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004983219998848654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAll3D",
            "lineno": 1024,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005957979999493546,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.46077661699996497,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003050079999411537,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testAxesType",
            "lineno": 1016,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006423999998332874,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07272741800011318,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026191200004177517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::testEmpty",
            "lineno": 1038,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005747569998675317,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0327017980000619,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022747599996364443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AllReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005381270000270888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007705479999913223,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00033428400001866976,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAll3D",
            "lineno": 1073,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005831859998579603,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4377412930000446,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031038299994179397,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testAxesType",
            "lineno": 1065,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006337040001653804,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.055901307999874916,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002871179999601736,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::testEmpty",
            "lineno": 1087,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005509120001079282,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0483028920000379,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022656999999526306,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::AnyReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005262489999040554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000798579000047539,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003419729998768162,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testBoolReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005770679999841377,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4934820270000273,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027797600000667444,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testDegenerate",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005939370000760391,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09391318200005117,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002982529999826511,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testExpand",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006092040000567067,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.24053168400018876,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002779489998374629,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005813020000005054,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.317767098999866,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002749420000327518,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testFloatReduce4D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005806359999951383,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.3327276779998556,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002910089999659249,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce",
            "lineno": 1167,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005870040001809684,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005630165999946257,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Fill]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reduce_mean_test.py",
                        "lineno": 1171,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "lineno": 561,
                        "message": "in new_func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "lineno": 561,
                        "message": "in new_func"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 2447,
                        "message": "in count_nonzero"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py",
                        "lineno": 2508,
                        "message": "in count_nonzero_v2"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 2969,
                        "message": "in wrapped"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 3030,
                        "message": "in zeros"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 243,
                        "message": "in fill"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 3505,
                        "message": "in fill"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.reduce_mean_test.CountNonzeroReductionTest testMethod=testStringReduce>\n\n    def testStringReduce(self):\n      # Test case for GitHub issue 18712\n      with self.cached_session() as sess:\n>       v = math_ops.count_nonzero(constant_op.constant([\"test\"]))\n\nsrc/tensorflow_tests_reduced/reduce_mean_test.py:1171: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py:561: in new_func\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py:561: in new_func\n    return func(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:2447: in count_nonzero\n    return count_nonzero_v2(input_tensor, axis, keepdims, dtype, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/math_ops.py:2508: in count_nonzero_v2\n    zero = array_ops.zeros([], dtype=input.dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:2969: in wrapped\n    tensor = fun(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:3030: in zeros\n    output = fill(shape, constant(zero, dtype=dtype), name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:243: in fill\n    result = gen_array_ops.fill(dims, value, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:3505: in fill\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:Fill]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003776440000820003,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce1D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006541079999351496,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27701415999990786,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000288312999828122,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::testStringReduce2D",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006014759999288799,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.39248968200013223,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002825940000548144,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reduce_mean_test.py::CountNonzeroReductionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005908319999434752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000505475000181832,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004803110000466404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testBoolBasic",
            "lineno": 79,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005837349999637809,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08408512200003315,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026774599996315374,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testComplex64Basic",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005732549998356262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09214786100005767,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029854900003556395,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testDoubleBasic",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006217750001269451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09174054699997214,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028046000011272554,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testErrors",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000596568999981173,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0066191610001169465,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024074299994936155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatBasic",
            "lineno": 86,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005365890001485241,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07770380300007673,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025610200009396067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatEmpty",
            "lineno": 153,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005599500000244007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.25901014199985184,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030746399988856865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeGradThreeDimensions",
            "lineno": 137,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006488199999239441,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.33887459200013836,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003266190001340874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatReshapeThreeDimensions",
            "lineno": 106,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005911679998007457,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08626641299997573,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032145099999070226,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimBegin",
            "lineno": 114,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006490140001460531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059506795000061175,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003005639998718834,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimEnd",
            "lineno": 118,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006285310000748723,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.05856136800002787,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002965969999877416,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testFloatUnspecifiedDimOnly",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.000655874000131007,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.050841429999991306,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002691350000532111,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt32Basic",
            "lineno": 94,
            "outcome": "passed",
            "setup": {
                "duration": 0.00056937299996207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.07469001799995567,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000319662000038079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testInt64Shape",
            "lineno": 250,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006223079999472247,
                "outcome": "passed"
            },
            "call": {
                "duration": 42.45870748099992,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.ResourceExhaustedError: {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:TPU:0}} XLA:TPU compile permanent error. Ran out of memory in memory space hbm. Used 23.28G of 15.48G hbm. Exceeded hbm capacity by 7.80G.\n\nTotal hbm usage >= 23.80G:\n    reserved        530.00M \n    program          23.28G \n    arguments            0B \n\nOutput size 0B; shares 0B with arguments.\n\nProgram hbm requirement 23.28G:\n    global             4.0K\n    HLO temp         23.28G (30.0% utilization: Unpadded (6.98G) Padded (23.28G), 0.0% fragmentation (29.0K))\n\n  Largest program allocations in hbm:\n\n  1. Size: 18.63G\n     Shape: pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 16.30G (8.0x expansion)\n     XLA label: reshape.3 = reshape(dynamic-slice)\n     Allocation type: HLO temp\n     ==========================\n\n  2. Size: 2.33G\n     Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 768B (1.0x expansion)\n     XLA label: reshape.1 = reshape(arg0.1)\n     Allocation type: HLO temp\n     ==========================\n\n  3. Size: 2.33G\n     Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\n     Unpadded size: 2.33G\n     Extra memory due to padding: 768B (1.0x expansion)\n     XLA label: dynamic-slice = dynamic-slice(get-tuple-element.22, add), dynamic_slice_sizes={2500000000}\n     Allocation type: HLO temp\n     ==========================\n\n  4. Size: 4.0K\n     Shape: (u32[]{:T(256)}, pred[2500000000]{0:T(1024)(128)(4,1)}, pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)})\n     Unpadded size: 4.0K\n     XLA label: tuple.5 = tuple(copy.8, reshape.1, broadcast)\n     Allocation type: HLO temp\n     ==========================\n\n  5. Size: 4.0K\n     Shape: u32[8,128]{1,0}\n     Unpadded size: 4.0K\n     XLA label: constant literal\n     Allocation type: global\n     ==========================\n\n\n\t [[{{node Reshape}}]]\nHint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\n [Op:Reshape]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/reshape_test.py",
                        "lineno": 263,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py",
                        "lineno": 199,
                        "message": "in reshape"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 8546,
                        "message": "in reshape"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 8571,
                        "message": "in reshape_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "ResourceExhaustedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.reshape_test.ReshapeTest testMethod=testInt64Shape>\n\n    def testInt64Shape(self):\n      # with ops.device(\"/device:CPU:0\"):\n      x = array_ops.zeros([50000, 50000], dtype=dtypes.bool)\n      # Provide dimension larger than int32\n      timer = tensorflow_op_timer()\n      with timer:\n        y = array_ops.reshape(x, [50000**2])\n        timer.gen.send(y)\n      self.assertEqual([50000**2], y.get_shape().as_list())\n      # Even if first dimension is within int32, ensure we correctly go to int64\n      timer = tensorflow_op_timer()\n      with timer:\n>       y = array_ops.reshape(x, [1, 50000**2])\n\nsrc/tensorflow_tests_reduced/reshape_test.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py:199: in reshape\n    result = gen_array_ops.reshape(tensor, shape, name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:8546: in reshape\n    return reshape_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:8571: in reshape_eager_fallback\n    _result = _execute.execute(b\"Reshape\", 1, inputs=_inputs_flat, attrs=_attrs,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'Reshape', num_outputs = 1\ninputs = [<tf.Tensor: shape=(50000, 50000), dtype=bool, numpy=\narray([[False, False, False, ..., False, False, False],\n       [...alse, False, ..., False, False, False]])>, <tf.Tensor: shape=(2,), dtype=int64, numpy=array([         1, 2500000000])>]\nattrs = ('T', 10, 'Tshape', 9)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.ResourceExhaustedError: {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:TPU:0}} XLA:TPU compile permanent error. Ran out of memory in memory space hbm. Used 23.28G of 15.48G hbm. Exceeded hbm capacity by 7.80G.\nE                                           \nE                                           Total hbm usage >= 23.80G:\nE                                               reserved        530.00M \nE                                               program          23.28G \nE                                               arguments            0B \nE                                           \nE                                           Output size 0B; shares 0B with arguments.\nE                                           \nE                                           Program hbm requirement 23.28G:\nE                                               global             4.0K\nE                                               HLO temp         23.28G (30.0% utilization: Unpadded (6.98G) Padded (23.28G), 0.0% fragmentation (29.0K))\nE                                           \nE                                             Largest program allocations in hbm:\nE                                           \nE                                             1. Size: 18.63G\nE                                                Shape: pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 16.30G (8.0x expansion)\nE                                                XLA label: reshape.3 = reshape(dynamic-slice)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             2. Size: 2.33G\nE                                                Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 768B (1.0x expansion)\nE                                                XLA label: reshape.1 = reshape(arg0.1)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             3. Size: 2.33G\nE                                                Shape: pred[2500000000]{0:T(1024)(128)(4,1)}\nE                                                Unpadded size: 2.33G\nE                                                Extra memory due to padding: 768B (1.0x expansion)\nE                                                XLA label: dynamic-slice = dynamic-slice(get-tuple-element.22, add), dynamic_slice_sizes={2500000000}\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             4. Size: 4.0K\nE                                                Shape: (u32[]{:T(256)}, pred[2500000000]{0:T(1024)(128)(4,1)}, pred[1,1,2500000000]{2,1,0:T(8,128)(4,1)})\nE                                                Unpadded size: 4.0K\nE                                                XLA label: tuple.5 = tuple(copy.8, reshape.1, broadcast)\nE                                                Allocation type: HLO temp\nE                                                ==========================\nE                                           \nE                                             5. Size: 4.0K\nE                                                Shape: u32[8,128]{1,0}\nE                                                Unpadded size: 4.0K\nE                                                XLA label: constant literal\nE                                                Allocation type: global\nE                                                ==========================\nE                                           \nE                                           \nE                                           \t [[{{node Reshape}}]]\nE                                           Hint: If you want to see a list of allocated tensors when OOM happens, add report_tensor_allocations_upon_oom to RunOptions for current allocation info. This isn't available when running in Eager mode.\nE                                            [Op:Reshape]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: ResourceExhaustedError"
            },
            "teardown": {
                "duration": 0.00039469200009989436,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testPartialShapes",
            "lineno": 179,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006187800001953292,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016933319999907326,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002274419998684607,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testTensorShape",
            "lineno": 235,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005122640000081446,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0543584650001776,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002367810000123427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimBasic",
            "lineno": 122,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005140349999237515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0662612490000356,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027703899991138314,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR1",
            "lineno": 126,
            "outcome": "passed",
            "setup": {
                "duration": 0.000582399000222722,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.047614735000024666,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022859800014884968,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimReshapeR3",
            "lineno": 130,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005110999998123589,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04948773099999926,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000257306999856155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::testZeroDimWithUnspecifiedDim",
            "lineno": 162,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005698400000255788,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04433495000012044,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022419299989451247,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/reshape_test.py::ReshapeTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005387799999425624,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007831390000774263,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0006971230000090145,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::TFCompressionTestCase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005737140002111119,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043844600008924317,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002600309999252204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::testSerializeRestore",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005437989998426929,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10633942100002969,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py:148: IdentityReader.__init__ (from tensorflow.python.ops.io_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nQueue-based input pipelines have been replaced by `tf.data`. Use `tf.data.Dataset.map(...)`.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579062.6648004,
                        "msecs": 664.8004055023193,
                        "relativeCreated": 755162.8601551056,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_4' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[1:]))\nNode: 'ReaderRestoreStateV2_4'\nCould not parse state for IdentityReader 'test_reader': \\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_4}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_4':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 187, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[1:]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579062.7325048,
                        "msecs": 732.5048446655273,
                        "relativeCreated": 755230.5645942688,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_5' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n      self.evaluate(reader.restore_state(state[:-1]))\nNode: 'ReaderRestoreStateV2_5'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001\n\t [[{{node ReaderRestoreStateV2_5}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_5':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 191, in testSerializeRestore\n    self.evaluate(reader.restore_state(state[:-1]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579062.7415757,
                        "msecs": 741.5757179260254,
                        "relativeCreated": 755239.6354675293,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_6' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n      self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\nNode: 'ReaderRestoreStateV2_6'\nCould not parse state for IdentityReader 'test_reader': \\010\\001\\020\\001\\030\\001\\\"\\001XExtraJunk\n\t [[{{node ReaderRestoreStateV2_6}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_6':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 195, in testSerializeRestore\n    self.evaluate(reader.restore_state(state + b\"ExtraJunk\"))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579062.7502434,
                        "msecs": 750.2434253692627,
                        "relativeCreated": 755248.3031749725,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_7' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"PREFIX\" + state))\nNode: 'ReaderRestoreStateV2_7'\nCould not parse state for IdentityReader 'test_reader': PREFIX\\010\\001\\020\\001\\030\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_7}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_7':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 199, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"PREFIX\" + state))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579062.7588816,
                        "msecs": 758.8815689086914,
                        "relativeCreated": 755256.941318512,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'ReaderRestoreStateV2_8' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n      self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\nNode: 'ReaderRestoreStateV2_8'\nCould not parse state for IdentityReader 'test_reader': BOGUS\\001\\\"\\001X\n\t [[{{node ReaderRestoreStateV2_8}}]]\n\nOriginal stack trace for 'ReaderRestoreStateV2_8':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/restore_state_test.py\", line 203, in testSerializeRestore\n    self.evaluate(reader.restore_state(b\"BOGUS\" + state[5:]))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/io_ops.py\", line 396, in restore_state\n    return gen_io_ops.reader_restore_state_v2(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_io_ops.py\", line 1168, in reader_restore_state_v2\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579062.7680845,
                        "msecs": 768.0845260620117,
                        "relativeCreated": 755266.1442756653,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00037120100000720413,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/restore_state_test.py::IdentityReaderTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005311910001637443,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045488300020224415,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028078200011805166,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testAutoConvertAndCheckData",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000571181999930559,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00046302999999170424,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020031600001857441,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildCostModel",
            "lineno": 1812,
            "outcome": "passed",
            "setup": {
                "duration": 0.00044864200003758015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19171394399995734,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027431200010141765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006033669999396807,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005460659999698692,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020682400008809054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testBuildGraphErrorDist",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048499600006834953,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00045932900002298993,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00020485800018832379,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultGraph",
            "lineno": 1200,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004507769999690936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03693433599983109,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025179599992952717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDefaultServerTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005309499999839318,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005382159999953728,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002251710000109597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testDuplicatedInputs",
            "lineno": 1496,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005029449998801283,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007863452000037796,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023683499989601842,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testErrorsReported",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.000515695000103733,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0030456599999979517,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002260639998894476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithGroupBy",
            "lineno": 1175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005328170000211685,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03375060000007579,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022775899992666382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatefulOperations",
            "lineno": 1147,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005270789999940462,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03643578100013656,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022867199982101738,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testExtendWithStatelessOperations",
            "lineno": 1127,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005158490000667371,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014843549000033818,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023570700000163924,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedAndFetch",
            "lineno": 1509,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005139410000083444,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6301534640001591,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028343200006020197,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedDictKeyException",
            "lineno": 1788,
            "outcome": "passed",
            "setup": {
                "duration": 0.000576251999973465,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003451626000014585,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002121540001098765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedError",
            "lineno": 1598,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004970179998053936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004775105000135227,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002060760000404116,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlices",
            "lineno": 988,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004531459999270737,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021292115000051126,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002518759999929898,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedIndexedSlicesWithoutDenseShape",
            "lineno": 1086,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005101179999655869,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.015774204000081227,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000227368000196293,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedPrecisionLossError",
            "lineno": 1611,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005146129999502591,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004703844999994544,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002314209998530714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedShapeCompatibility",
            "lineno": 1795,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005591039998762426,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.020146111000030942,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020450200008781394,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholder",
            "lineno": 823,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004640009999548056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01896790000000692,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023645999999644118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderConstantShape",
            "lineno": 912,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005167179999716609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.024340952000102334,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024899100003494823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparsePlaceholderPartialShape",
            "lineno": 867,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005270740000469232,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021745589000147447,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023037500000100408,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFeedSparseTensor",
            "lineno": 757,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005295670000577957,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02175675500006946,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023842899986448174,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005488650001552742,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000511211999992156,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002256709999528539,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchByNameDifferentStringTypes",
            "lineno": 1663,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004997510000066541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.027171189000000595,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020332799999778217,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchDict",
            "lineno": 241,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004621129999122786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007584746000020459,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023398899998028355,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlices",
            "lineno": 937,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004732499999136053,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.012071568000010302,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027537500000107684,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchIndexedSlicesWithoutDenseShape",
            "lineno": 1036,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005270139999993262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01139104200001384,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026475300001038704,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchList",
            "lineno": 181,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005256940000890609,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.02102626800001417,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002514000000246597,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNamedTuple",
            "lineno": 217,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048055199999907927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007767472999830716,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024044100018727477,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestedAttrs",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004621010000391834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005449509999380098,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022849300012239837,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingEmptyOneLevel",
            "lineno": 360,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045290200000636105,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005933069000093383,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000234067000064897,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNestingOneLevel",
            "lineno": 391,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004638320001504326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010516559000052439,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023781699997016403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchNone",
            "lineno": 132,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046014200006538886,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00293686300005902,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002413379997960874,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOperationObject",
            "lineno": 643,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046297700009745313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014938425000082134,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002614049999465351,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchOrderedDict",
            "lineno": 256,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005218230000991753,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007339551000086431,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00025522100008856796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchScalar",
            "lineno": 603,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005679000000782253,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06217442199999823,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00024987899996631313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingleton",
            "lineno": 145,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005729209999572049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007250948000091739,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002415970000129164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSingletonByName",
            "lineno": 166,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005509129998699791,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00681359700001849,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002403869998488517,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchSparseTensor",
            "lineno": 658,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004900229998838768,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.019795299999941562,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026624700012689573,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTensorObject",
            "lineno": 552,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005408470001384558,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01719017999994321,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022883099995851808,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testFetchTuple",
            "lineno": 200,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005233039998984168,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008402438999837614,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00026033399990410544,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testIncorrectGraph",
            "lineno": 1760,
            "outcome": "passed",
            "setup": {
                "duration": 0.000532584999973551,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011154027999964455,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002418209999177634,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testLocalMasterSessionTimeout",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004765490000409045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006187439998939226,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002473870001722389,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMakeCallableOnOperationWithRunOptions",
            "lineno": 1574,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005100280000078783,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0444589429998814,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032272199996441486,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testMultipleInteractiveSessionsWarning",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005359259998840571,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005632390000300802,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00028455899996515654,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDirect",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00048254800003633136,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004904320001060114,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00023035200001686462,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testOutputPartitionGraphsDistributed",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045532800004366436,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005183259997920686,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0008023770001273078,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRegisterFetchAndFeedConversionFunctions",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004649740001241298,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004715570000826119,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.00022840200017526513,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testRunFeedDict",
            "lineno": 1338,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004753989999244368,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06372421299988673,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030363399991983897,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testSessionInterOpThreadPool",
            "lineno": 84,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006073229999401519,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04761249000011958,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023995699984880048,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testStringFeed",
            "lineno": 1629,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005188559998714481,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08778773499989256,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002459629999975732,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testTimeoutWithShortOperations",
            "lineno": 1690,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005401030000484752,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000527137000062794,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 1691, 'Skipped: b/120545219')"
            },
            "teardown": {
                "duration": 0.0002142620000995521,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterClose",
            "lineno": 1372,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046469699987028434,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006150498000124571,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002308650000486523,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseAfterCloseConcurrent",
            "lineno": 1381,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005201680000936904,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11973456499981694,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002360129999487981,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::testUseEmptyGraph",
            "lineno": 1401,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005484029998115147,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002742679999983011,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000226834999921266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/run_test.py::SessionTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00047221899990290694,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00047568100012540526,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.001509554999984175,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testDtypes",
            "lineno": 101,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005651310000303056,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22964415000001281,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.002754489000153626,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testExceptions",
            "lineno": 41,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005859200000486453,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0050056520001362514,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023867000004429428,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalDtypeWithoutMaxlen",
            "lineno": 57,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005647529999350809,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10177797300002567,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002944879997812677,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithMaxlen",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006092579999403824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013889845999983663,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002469000000928645,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOneDimensionalWithoutMaxlen",
            "lineno": 68,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005820620001486532,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01814871800002038,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002394870000443916,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testOutputDtype",
            "lineno": 121,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005580700001246441,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16844123800001398,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030634000017926155,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::testTwoDimensional",
            "lineno": 78,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006334280001283332,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.18260601799988763,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003060470000946225,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/sequence_mask_test.py::SequenceMaskTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006228049999208451,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013078829999813024,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004932599999847298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGrad",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006411689998913062,
                "outcome": "passed"
            },
            "call": {
                "duration": 84.16680972000017,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00043530200014174625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testGradWithNoShapeInformation",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007074190000366798,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.30102856899998187,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00043182100012018054,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008428520000052231,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007454058999883273,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021268399996188236,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testInvalidShapeAtEval",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004910539998945751,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10735152899997047,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\nDetected at node 'set_diag' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\nNode: 'set_diag'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\n\t [[{{node set_diag}}]]\n\t [[set_diag]]\n\t [[set_diag/_5]]\n  (1) INVALID_ARGUMENT: input must be at least 2-dim, received shape: []\n\n\t [[{{node set_diag}}]]\n\t [[set_diag]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 485, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, [v]).eval(feed_dict={v: 0.0})\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579149.9117749,
                        "msecs": 911.7748737335205,
                        "relativeCreated": 842409.8346233368,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\nDetected at node 'set_diag_1' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\nNode: 'set_diag_1'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1]]\n\t [[set_diag_1/_11]]\n  (1) INVALID_ARGUMENT: diagonal must be at least 1-dim, received shape: []\n\n\t [[{{node set_diag_1}}]]\n\t [[set_diag_1]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_1':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 487, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag([[v]], v).eval(feed_dict={v: 0.0})\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579149.953817,
                        "msecs": 953.8168907165527,
                        "relativeCreated": 842451.8766403198,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\nDetected at node 'set_diag_2' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n      array_ops.matrix_set_diag(v, d).eval(feed_dict={\nNode: 'set_diag_2'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2]]\n\t [[set_diag_2/_19]]\n  (1) INVALID_ARGUMENT: Either first dimensions of diagonal don't match input.shape[:-2], or diagonal.shape[:-1] is not equal to the longests diagonal in range [lower_diag_index:upper_diag_index].\nInput shape: [2,3,3]\nDiagonal shape: [2,4]\nExpected diagonal shape: [2,3]\n\n\t [[{{node set_diag_2}}]]\n\t [[set_diag_2]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'set_diag_2':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1624, in decorated\n    return f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/set_diag_test.py\", line 492, in testInvalidShapeAtEval\n    array_ops.matrix_set_diag(v, d).eval(feed_dict={\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/array_ops.py\", line 2945, in matrix_set_diag\n    return gen_array_ops.matrix_set_diag_v3(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 6085, in matrix_set_diag_v3\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579149.974613,
                        "msecs": 974.6129512786865,
                        "relativeCreated": 842472.672700882,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003985439998359652,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangular",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005456110000068293,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.392471548000003,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003121750000900647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testRectangularBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006211759998677735,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.9634046849998867,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00033361800001330266,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquare",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006079259999296482,
                "outcome": "passed"
            },
            "call": {
                "duration": 1.0723301549999178,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003996960001586558,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::testSquareBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0008352410000043164,
                "outcome": "passed"
            },
            "call": {
                "duration": 6.186147344999881,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003657400000065536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/set_diag_test.py::MatrixSetDiagTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007332899999710207,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006923240000560327,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004925920000005135,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards",
            "lineno": 74,
            "outcome": "failed",
            "setup": {
                "duration": 0.000637845000028392,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.03782307300002685,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 80,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards>\n\n    def testIndexEqualsNumShards(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 4)\n\nsrc/tensorflow_tests_reduced/shard_test.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037007400010224956,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIndexEqualsNumShards2",
            "lineno": 86,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005930700001499645,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006153555000082633,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 92,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIndexEqualsNumShards2>\n\n    def testIndexEqualsNumShards2(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(4, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003491439999834256,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testIteratorEndsBeforeFirstElem",
            "lineno": 49,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005846919998475641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0040061520001017925,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 55,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testIteratorEndsBeforeFirstElem>\n\n    def testIteratorEndsBeforeFirstElem(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(1)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003499780000311148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testLargerWorkerPool",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005827429999953893,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003957031999789251,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 68,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testLargerWorkerPool>\n\n    def testLargerWorkerPool(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(7, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000359543000058693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testName",
            "lineno": 110,
            "outcome": "failed",
            "setup": {
                "duration": 0.000587722999853213,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003938292999919213,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 116,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testName>\n\n    def testName(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(1, 0, name=\"shard\")\n\nsrc/tensorflow_tests_reduced/shard_test.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034756899981402967,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNestedData",
            "lineno": 27,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006109550001838215,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004668132999995578,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ZipDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 34,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1259,
                        "message": "in zip"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 4956,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 8383,
                        "message": "in zip_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNestedData>\n\n    def testNestedData(self):\n      with tf.device(\"cpu\"):\n          dataset_a = dataset_ops.Dataset.range(10)\n          dataset_b = dataset_ops.Dataset.range(10, 0, -1)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset_ops.Dataset.zip((dataset_a, dataset_b)).shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1259: in zip\n    return ZipDataset(datasets, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:4956: in __init__\n    variant_tensor = gen_dataset_ops.zip_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:8383: in zip_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ZipDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035542199998417345,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testNumShardsLargerThanDataset",
            "lineno": 98,
            "outcome": "failed",
            "setup": {
                "duration": 0.000589624999975058,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006159068999977535,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 104,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testNumShardsLargerThanDataset>\n\n    def testNumShardsLargerThanDataset(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(20, 5)\n\nsrc/tensorflow_tests_reduced/shard_test.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035321599989401875,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testOffsetZero",
            "lineno": 38,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005913259999488218,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0040019629998369055,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 44,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testOffsetZero>\n\n    def testOffsetZero(self):\n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035326300007909595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::testSimpleCase",
            "lineno": 16,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006138109999938024,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003937953000104244,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 23,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardTest testMethod=testSimpleCase>\n\n    def testSimpleCase(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>       dataset = dataset.shard(5, 2)\n\nsrc/tensorflow_tests_reduced/shard_test.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003614849999848957,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005872499998531566,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009321620000264375,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004737270000987337,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005696169998827827,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043547299992496846,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0001982260000659153,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044488399998954264,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011856389999138628,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_2>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46cad8ca0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00022288999980446533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00044752799999514536,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008896909998838964,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_0_numshards_5>\nkwargs = {'elems': 100, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46cacc040>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021567099997810146,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046966000013526354,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000829524999971909,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_2>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46cacc820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021829999991496152,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_100_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004456859999208973,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008234639999500359,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_100_index_1_numshards_5>\nkwargs = {'elems': 100, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46a72d670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021657299998878443,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045521000015469326,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008388650001052156,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_2>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46caccaf0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021651799988831044,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045455999998011976,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007981790001849731,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_0_numshards_5>\nkwargs = {'elems': 10, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46a72d940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021561799985647667,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000455920999911541,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007896600000094622,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_2>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00021712800003115262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardCheckpointTest::test_test_elems_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00045191999993221543,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000803998000037609,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                    "lineno": 329,
                    "message": "ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} ."
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 329,
                        "message": "ValueError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardCheckpointTest testMethod=test_test_elems_10_index_1_numshards_5>\nkwargs = {'elems': 10, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c8b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def execute_test_method():\n      requested_parameters = tf_inspect.getfullargspec(test_method).args\n      for customized_parameter in customized_parameters:\n        for argument, value in customized_parameter.modified_arguments(\n            original_kwargs.copy(), requested_parameters).items():\n          if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n            kwargs.pop(argument, None)\n          else:\n            kwargs[argument] = value\n    \n      omitted_arguments = set(requested_parameters).difference(\n          set(list(kwargs.keys()) + [\"self\"]))\n      if omitted_arguments:\n>       raise ValueError(\"The test requires parameters whose arguments \"\n                         \"were not passed: {} .\".format(omitted_arguments))\nE       ValueError: The test requires parameters whose arguments were not passed: {'verify_fn'} .\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:329: ValueError"
            },
            "teardown": {
                "duration": 0.00045660600017072284,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testEmptyDataset",
            "lineno": 163,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005262370000309602,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004181507999874157,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 170,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testEmptyDataset>\n\n    def testEmptyDataset(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.from_tensor_slices([])\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(\n          num_shards=2, index=1)\n\nsrc/tensorflow_tests_reduced/shard_test.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003493730000627693,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_1",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005839160000959964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004114037999897846,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_1>\nkwargs = {'index': -1}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1cd30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036007499988954805,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006141470000784466,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004727461999891602,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_2>\nkwargs = {'index': 2}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46a72d0d0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035785099998975056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_3",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005837960000008025,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004127755999888905,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_3>\nkwargs = {'index': 3}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db0d550>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037377700004981307,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testInvalidIndex_test_index_4",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005949399999281013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004508813000029477,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 155,
                        "message": "in testInvalidIndex"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testInvalidIndex_test_index_4>\nkwargs = {'index': 4}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1cd30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:155: in testInvalidIndex\n    dataset = dataset.shard(num_shards=2, index=0)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035908599988943024,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006126789999143512,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004181923000032839,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_10>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c1f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003670200001124613,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005894599999010097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004175220999968587,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_5>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1cd30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003686570000809297,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005775930001163943,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004775612000003093,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_0_numshards_7>\nkwargs = {'elements': 0, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82ba60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003680709999116516,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005875350000223989,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004385445000025356,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_10>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f02e1f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003694609999911336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005910759998641879,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005012115999988964,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_5>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f02eca0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036249000004318077,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005945849998170161,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00436284100010198,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_1_numshards_7>\nkwargs = {'elements': 0, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d808280>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003700629999912053,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006099570000515087,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0043723290000343695,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_10>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035006400003112503,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005956889999652049,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004394080000110989,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_5>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c1f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003686100001232262,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005914619998748094,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0042858970000452246,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_2_numshards_7>\nkwargs = {'elements': 0, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003640249999534717,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005882699999801844,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004333423000161929,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_10>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c1f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035161100004188484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000619067000116047,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0042833169998175435,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_5>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003821530001459905,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005844439999691531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004286984999907872,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_3_numshards_7>\nkwargs = {'elements': 0, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f01db80>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035386600006859226,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005796699999791599,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004234987000018009,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_10>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46db1c1f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000362905000201863,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005772209999577171,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004380258000082904,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_5>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ef99820>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003707149999172543,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_0_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006108000000040192,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004488089999995282,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_0_index_4_numshards_7>\nkwargs = {'elements': 0, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036846800003331737,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006005029999869294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004329955999992308,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_10>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f02e4c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003739199999017728,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007141500000216183,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004369709000002331,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_5>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f01d670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036799099984818895,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005865680000169959,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004333238999834066,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_0_numshards_7>\nkwargs = {'elements': 10, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037766000014016754,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005844989998422534,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004354209999974046,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_10>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca523a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003593850001379906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005798199999844655,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004313888999831761,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_5>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f01d670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003738809998594661,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006146769999304524,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004286073999992368,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_1_numshards_7>\nkwargs = {'elements': 10, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037886200016146176,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006084259998715424,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004386555999872144,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_10>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca523a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00037434699993355025,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005868460000328923,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004240488000050391,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_5>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f01d670>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003679569999803789,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000610752999818942,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004318470000043817,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_2_numshards_7>\nkwargs = {'elements': 10, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca3c4c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.000363134000053833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005871779999324644,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0042580399999678775,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_10>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d82b940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00091069600011906,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0010151460000997758,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.005525469000076555,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_5>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003765620001559,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006005909999657888,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004316036999853168,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_3_numshards_7>\nkwargs = {'elements': 10, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca2baf0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035742099998969934,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000590322999869386,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004297461000078329,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_10>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca41d30>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0005338660000688833,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0007026789999144967,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0051230589999704534,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_5>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003520150000895228,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_10_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006003890000556567,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004246613000077559,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_10_index_4_numshards_7>\nkwargs = {'elements': 10, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca3c4c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035924200005865714,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005961619999652612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004285248000087449,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_10>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003647910000381671,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005949190001501847,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004274312999996255,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_5>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca22a60>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035200499996790313,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_0_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006050129998129705,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00420464500007256,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_0_numshards_7>\nkwargs = {'elements': 50, 'index': 0, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca3c4c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003710539999701723,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005897149999327667,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004244547000098464,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_10>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46faa91f0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003853189998608286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005797670000902144,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004243884000061371,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_5>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca3c4c0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036621399999603454,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_1_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006015980000029231,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004219411000121909,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_1_numshards_7>\nkwargs = {'elements': 50, 'index': 1, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003510250000999804,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005841080001118826,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004206463999935295,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_10>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca223a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003720469999279885,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000599736999902234,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004296977000194602,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_5>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00039402100014740427,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_2_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005852990000221325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0042021760000352515,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_2_numshards_7>\nkwargs = {'elements': 50, 'index': 2, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca223a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003619929998421867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005804120000902913,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004244077000066682,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_10>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca418b0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003512910000154079,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005797100000108912,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0041740390001905325,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_5>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fac2790>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003491350000786042,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_3_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006130599999778497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0043369099998926686,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_3_numshards_7>\nkwargs = {'elements': 50, 'index': 3, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca223a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036682300014945213,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_10",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005993570000555337,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004231800999832558,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_10>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 10}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46da6d5e0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035847599997396173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_5",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005907150000439287,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004229102999943279,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_5>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 5}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46ca223a0>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003585270001167373,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testMultipleCombinations_test_elements_50_index_4_numshards_7",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005908489999910671,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004291573999807952,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 242,
                        "message": "in testMultipleCombinations"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testMultipleCombinations_test_elements_50_index_4_numshards_7>\nkwargs = {'elements': 50, 'index': 4, 'num_shards': 7}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46fab6940>\ncontext_managers = []\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shard_test.py:242: in testMultipleCombinations\n    dataset = dataset.shard(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035028100000999984,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexGreaterThanNumElements",
            "lineno": 213,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005771090000052936,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008406646999901568,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 220,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexGreaterThanNumElements>\n\n    def testNumShardsAndIndexGreaterThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(13)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(23, 21)\n\nsrc/tensorflow_tests_reduced/shard_test.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003527349999785656,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsAndIndexLessThanNumElements",
            "lineno": 180,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005764509999153233,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004080766000015501,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 187,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsAndIndexLessThanNumElements>\n\n    def testNumShardsAndIndexLessThanNumElements(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(10)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(5, 0)\n\nsrc/tensorflow_tests_reduced/shard_test.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003540049999628536,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::testNumShardsGreaterThanNumElementsIndexLess",
            "lineno": 197,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005867639999905805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006347347000200898,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/shard_test.py",
                        "lineno": 204,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 1786,
                        "message": "in shard"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 5177,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6767,
                        "message": "in shard_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shard_test.ShardRandomAccessTest testMethod=testNumShardsGreaterThanNumElementsIndexLess>\n\n    def testNumShardsGreaterThanNumElementsIndexLess(self):\n    \n      with tf.device(\"cpu\"):\n          dataset = dataset_ops.Dataset.range(7)\n      timer = tensorflow_op_timer()\n      with timer:\n>         dataset = dataset.shard(8, 3)\n\nsrc/tensorflow_tests_reduced/shard_test.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:1786: in shard\n    return ShardDataset(self, num_shards, index, name=name)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:5177: in __init__\n    variant_tensor = gen_dataset_ops.shard_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6767: in shard_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShardDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034972699995705625,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shard_test.py::ShardRandomAccessTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005854390001331922,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007946919999994861,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0014915720000772126,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005817009998736467,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005125820000557724,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0001983829999971931,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047216600000865583,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.09445137800003067,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 55,
                        "message": "in testCorrectOutput"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 55,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/shuffle_and_repeat_test.py:35: shuffle_and_repeat (from tensorflow.python.data.experimental.ops.shuffle_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.data.Dataset.shuffle(buffer_size, seed)` followed by `tf.data.Dataset.repeat(count)`. Static tf.data optimizations will take care of using the fused implementation.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579211.363151,
                        "msecs": 363.15107345581055,
                        "relativeCreated": 903861.2108230591,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testCorrectOutput_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d808280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4722e0dc0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4722e0dc0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:55: in testCorrectOutput\n    output = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:55: in <lambda>\n    output = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003521700000419514,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005713939999623108,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011624609999216773,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021466600014719006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCorrectOutput_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004906489998575125,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3173335839999254,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002902280000398605,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005900500000279862,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005815609999899607,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002091799999561772,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004924620000110735,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010274768000044787,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 96,
                        "message": "in testCountMinusOne"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 97,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testCountMinusOne_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46f012d30>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f6f5a60>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f6f5a60>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:96: in testCountMinusOne\n    output1 = self._gen_outputs(\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:97: in <lambda>\n    lambda: self._build_ds(10, count=-1), 100, verify_exhausted=False)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003625690001172188,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006081250000988803,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009640030000355182,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021450400004141557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountMinusOne_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048083200022119854,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16970739700013837,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027090000003227033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000562628999887238,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005454539998481778,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00022246999992603378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00046268799997051246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009893960999988849,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 87,
                        "message": "in testCountNone"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 88,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testCountNone_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46e79bc10>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4703efe50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4703efe50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:87: in testCountNone\n    output1 = self._gen_outputs(\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:88: in <lambda>\n    lambda: self._build_ds(10, count=None), 100, verify_exhausted=False)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003738800000974152,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006090869999297865,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0013596500000403466,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002123869999195449,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testCountNone_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046696599997630983,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16911843499997303,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027829200007545296,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005715939998935937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007440770000357588,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021143599997230922,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047945000005711336,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010382531000004747,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 80,
                        "message": "in testDifferentOrderForDifferentSeeds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 80,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testDifferentOrderForDifferentSeeds_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46e794f70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e892e50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e892e50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:80: in testDifferentOrderForDifferentSeeds\n    output1 = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:80: in <lambda>\n    output1 = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035138399994139036,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005787519999103097,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.001027650999958496,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021926399995209067,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testDifferentOrderForDifferentSeeds_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004752219999772933,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16779621399996358,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002589579999039415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005525490000763966,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005464000000756641,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002032620000136376,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004625139999916428,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00988896199987721,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 114,
                        "message": "in testInfiniteEmpty"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 114,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testInfiniteEmpty_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dda3e50>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46fef8700>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46fef8700>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:114: in testInfiniteEmpty\n    self._gen_outputs(lambda: self._build_ds(10, count=None, num_elements=0),\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:114: in <lambda>\n    self._gen_outputs(lambda: self._build_ds(10, count=None, num_elements=0),\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036019100002704363,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005837209998844628,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0016063040000062756,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021715700017921336,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteEmpty_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004910810000637866,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1198202539999329,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002873370001452713,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005675630000041565,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000573368000004848,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021052300007795566,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004654310000660189,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010895185999970636,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 107,
                        "message": "in testInfiniteOutputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 107,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testInfiniteOutputs_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dda3ca0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46d5d2460>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46d5d2460>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:107: in testInfiniteOutputs\n    self._gen_outputs(lambda: self._build_ds(10, count=None), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:107: in <lambda>\n    self._gen_outputs(lambda: self._build_ds(10, count=None), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003732560001026286,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005936970001130248,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010923889999503444,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023832099986975663,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testInfiniteOutputs_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000491554000063843,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16803396599993903,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029069300012452004,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005978379999760364,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008427550001215423,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021363800010476552,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004805999999462074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01239427399991655,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 129,
                        "message": "in testLargeBufferSize"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testLargeBufferSize_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd983a0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4723404f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4723404f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:129: in testLargeBufferSize\n    ds = dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0004351089999090618,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006862319999072497,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012147639999966486,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002421540000341338,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testLargeBufferSize_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005464799999117531,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.04760032799981673,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003687650000756548,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006876269999338547,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006907370000135415,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00029058900008749333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000581577000048128,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006291873999998643,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 170,
                        "message": "in testRerandomizeOnReplicate"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testRerandomizeOnReplicate_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd87f70>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc4a5a4b280>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc4a5a4b280>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:170: in testRerandomizeOnReplicate\n    ds = dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00038812200000393204,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005927320000864711,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011210160000700853,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002093380001042533,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testRerandomizeOnReplicate_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004750550001517695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2262360219999664,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029793700014124624,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006030809997810138,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005854620001173316,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021483499995156308,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004746369997974398,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010798008999927333,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 66,
                        "message": "in testReshuffling"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 66,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testReshuffling_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd98a60>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc467122a90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc467122a90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:66: in testReshuffling\n    output = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:66: in <lambda>\n    output = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003826859999662702,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00058376800006954,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010452729998178256,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021040799992988468,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testReshuffling_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047357600010400347,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.08593634999988353,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002504109997971682,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005570739999711805,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007100799998625007,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002085700000407087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.00047076600003492786,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.010049125000023196,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 74,
                        "message": "in testSameOrderForSameSeeds"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 44,
                        "message": "in _gen_outputs"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 74,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 40,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testSameOrderForSameSeeds_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dda5280>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46e8674f0>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46e8674f0>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:74: in testSameOrderForSameSeeds\n    output1 = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:44: in _gen_outputs\n    get_next = self.getNext(ds_fn())\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:74: in <lambda>\n    output1 = self._gen_outputs(lambda: self._build_ds(10), 100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:40: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00036748799993802095,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006072149999454268,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0010425119999126764,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002407120000498253,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testSameOrderForSameSeeds_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.00048747100004220556,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17505595800002993,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027841899986924545,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005680130000200734,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006057430000510067,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021855299996786925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_eager_tfapiversion_2",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.000501336000070296,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.014674768999839216,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 146,
                        "message": "in testVeryLargeBufferSize"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatTest testMethod=testVeryLargeBufferSize_test_mode_eager_tfapiversion_2>\nkwargs = {}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd71700>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46d7e5e50>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46d7e5e50>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:146: in testVeryLargeBufferSize\n    ds = dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00035117899983561074,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_1",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005985029999919789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0011462420000043494,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00021059400000922324,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::testVeryLargeBufferSize_test_mode_graph_tfapiversion_2",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.000477098999908776,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1746837250000226,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028669800008174207,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005795179999950051,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007142049998947186,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0012715830000615824,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005667000000357802,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004436359999999695,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.000202200000103403,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00045831700003873266,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008586159999595111,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020501399990280333,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000489969000000201,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000723105000133728,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020172699987597298,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.00044531300000016927,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007212780001282226,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00023283500013349112,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004656020000766148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007033930000943656,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020260900009816396,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_1_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000451343999884557,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007584929999211454,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002014829999552603,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0008321400000568246,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0108019219999278,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 86,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 193,
                        "message": "in verify_exhausted_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 192,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatCheckpointTest testMethod=test_test_mode_eager_tfapiversion_2_verifyfn_verifyexhaustediterator>\nkwargs = {'verify_fn': verify_exhausted_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd871f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46cff5250>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46cff5250>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in test\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:86: in verify_exhausted_iterator\n    obj.verify_exhausted_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:193: in verify_exhausted_iterator\n    self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in <lambda>\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:192: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003565509998679772,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005932560000019294,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011238372999969215,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 76,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 177,
                        "message": "in verify_fully_used_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 192,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatCheckpointTest testMethod=test_test_mode_eager_tfapiversion_2_verifyfn_verifyfullyusediterator>\nkwargs = {'verify_fn': verify_fully_used_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dda5550>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46f1bf550>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46f1bf550>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in test\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:76: in verify_fully_used_iterator\n    obj.verify_fully_used_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:177: in verify_fully_used_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in <lambda>\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:192: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003786299998864706,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005931850000706618,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.013054824000164444,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 96,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 226,
                        "message": "in verify_multiple_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 192,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatCheckpointTest testMethod=test_test_mode_eager_tfapiversion_2_verifyfn_verifymultiplebreaks>\nkwargs = {'verify_fn': verify_multiple_breaks}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46dd871f0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc471173a30>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc471173a30>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in test\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:96: in verify_multiple_breaks\n    obj.verify_multiple_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:226: in verify_multiple_breaks\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in <lambda>\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:192: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003721610000866349,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006295700000009674,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0017127109999819368,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped: Eager mode iteration do not support re-initialization.')"
            },
            "teardown": {
                "duration": 0.000212554999961867,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_eager_tfapiversion_2_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "failed",
            "setup": {
                "duration": 0.0004682669998601341,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01059751699995104,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]"
                },
                "traceback": [
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 360,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 343,
                        "message": "in execute_test_method"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py",
                        "lineno": 449,
                        "message": "in __call__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 66,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 152,
                        "message": "in verify_unused_iterator"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 360,
                        "message": "in verify_run_with_breaks"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 413,
                        "message": "in gen_outputs"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py",
                        "lineno": 61,
                        "message": "in ds_fn_no_opt"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 199,
                        "message": "in <lambda>"
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py",
                        "lineno": 192,
                        "message": "in _build_ds"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
                        "lineno": 2542,
                        "message": "in apply"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 103,
                        "message": "in _apply_fn"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py",
                        "lineno": 39,
                        "message": "in __init__"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py",
                        "lineno": 6887,
                        "message": "in shuffle_and_repeat_dataset"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.shuffle_and_repeat_test.ShuffleAndRepeatCheckpointTest testMethod=test_test_mode_eager_tfapiversion_2_verifyfn_verifyunusediterator>\nkwargs = {'verify_fn': verify_unused_iterator}, reasons_to_skip = []\ncombination = <tensorflow.python.framework.combinations.TFVersionCombination object at 0x7fc5b23e9430>\nshould_execute = True, reason = None\nexecute_test_method = <function _augment_with_special_arguments.<locals>.decorated.<locals>.execute_test_method at 0x7fc46d8b7dc0>\ncontext_managers = [<contextlib._GeneratorContextManager object at 0x7fc46eecea90>]\nmanager = <contextlib._GeneratorContextManager object at 0x7fc46eecea90>\n\n    def decorated(self, **kwargs):\n      \"\"\"A wrapped test method that can treat some arguments in a special way.\"\"\"\n      original_kwargs = kwargs.copy()\n    \n      # Skip combinations that are going to be executed in a different testing\n      # environment.\n      reasons_to_skip = []\n      for combination in test_combinations:\n        should_execute, reason = combination.should_execute_combination(\n            original_kwargs.copy())\n        if not should_execute:\n          reasons_to_skip.append(\" - \" + reason)\n    \n      if reasons_to_skip:\n        self.skipTest(\"\\n\".join(reasons_to_skip))\n    \n      customized_parameters = []\n      for combination in test_combinations:\n        customized_parameters.extend(combination.parameter_modifiers())\n      customized_parameters = set(customized_parameters)\n    \n      # The function for running the test under the total set of\n      # `context_managers`:\n      def execute_test_method():\n        requested_parameters = tf_inspect.getfullargspec(test_method).args\n        for customized_parameter in customized_parameters:\n          for argument, value in customized_parameter.modified_arguments(\n              original_kwargs.copy(), requested_parameters).items():\n            if value is ParameterModifier.DO_NOT_PASS_TO_THE_TEST:\n              kwargs.pop(argument, None)\n            else:\n              kwargs[argument] = value\n    \n        omitted_arguments = set(requested_parameters).difference(\n            set(list(kwargs.keys()) + [\"self\"]))\n        if omitted_arguments:\n          raise ValueError(\"The test requires parameters whose arguments \"\n                           \"were not passed: {} .\".format(omitted_arguments))\n        missing_arguments = set(list(kwargs.keys()) + [\"self\"]).difference(\n            set(requested_parameters))\n        if missing_arguments:\n          raise ValueError(\"The test does not take parameters that were passed \"\n                           \": {} .\".format(missing_arguments))\n    \n        kwargs_to_pass = {}\n        for parameter in requested_parameters:\n          if parameter == \"self\":\n            kwargs_to_pass[parameter] = self\n          else:\n            kwargs_to_pass[parameter] = kwargs[parameter]\n        test_method(**kwargs_to_pass)\n    \n      # Install `context_managers` before running the test:\n      context_managers = []\n      for combination in test_combinations:\n        for manager in combination.context_managers(\n            original_kwargs.copy()):\n          context_managers.append(manager)\n    \n      if hasattr(contextlib, \"nested\"):  # Python 2\n        # TODO(isaprykin): Switch to ExitStack when contextlib2 is available.\n        with contextlib.nested(*context_managers):\n          execute_test_method()\n      else:  # Python 3\n        with contextlib.ExitStack() as context_stack:\n          for manager in context_managers:\n            context_stack.enter_context(manager)\n>         execute_test_method()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:343: in execute_test_method\n    test_method(**kwargs_to_pass)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in test\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py:449: in __call__\n    return self._obj(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:66: in verify_unused_iterator\n    obj.verify_unused_iterator(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:152: in verify_unused_iterator\n    self.verify_run_with_breaks(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:360: in verify_run_with_breaks\n    expected = self.gen_outputs(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:413: in gen_outputs\n    iterator = iter(ds_fn())\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:61: in ds_fn_no_opt\n    return ds_fn().with_options(options)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:199: in <lambda>\n    verify_fn(self, lambda: self._build_ds(10), num_outputs=100)\nsrc/tensorflow_tests_reduced/shuffle_and_repeat_test.py:192: in _build_ds\n    return dataset_test.apply(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py:2542: in apply\n    dataset = transformation_func(self)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:103: in _apply_fn\n    return _ShuffleAndRepeatDataset(dataset, buffer_size, count, seed)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/experimental/ops/shuffle_ops.py:39: in __init__\n    variant_tensor = gen_dataset_ops.shuffle_and_repeat_dataset(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_dataset_ops.py:6887: in shuffle_and_repeat_dataset\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:ShuffleAndRepeatDataset]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003844930001832836,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006335089999538468,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015587150001010741,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002157010001155868,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000479381000104695,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008664829999815993,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020334300006652484,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004580060001444508,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007397629999559285,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002009390000239364,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004506059999584977,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007141030000639148,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.0002028000001246255,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_1_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0004574420001972612,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000754921999941871,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_combinations.py', 293, 'Skipped:  - Skipping a TF1.x test when TF2 is enabled.')"
            },
            "teardown": {
                "duration": 0.00020273199993425806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyexhaustediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004533730000275682,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4301646230001097,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/data/kernel_tests/checkpoint_test_base.py:514: make_saveable_from_iterator (from tensorflow.python.data.experimental.ops.iterator_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\n`make_saveable_from_iterator` is intended for use in TF1 with `tf.compat.v1.Saver`. In TF2, use `tf.train.Checkpoint` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579225.06029,
                        "msecs": 60.29009819030762,
                        "relativeCreated": 917558.3498477936,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00029671100014638796,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyfullyusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006119970000781905,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5827574459999596,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002942179999081418,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifymultiplebreaks",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005876110001281631,
                "outcome": "passed"
            },
            "call": {
                "duration": 2.416722130000153,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032017100011216826,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyresetrestorediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006027280001035251,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5905759550000766,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00029457400000865164,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/shuffle_and_repeat_test.py::ShuffleAndRepeatCheckpointTest::test_test_mode_graph_tfapiversion_2_verifyfn_verifyunusediterator",
            "lineno": 292,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005930889999490319,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5687195079999583,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0008455259999209375,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::testSimpleSave",
            "lineno": 36,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006983499999932974,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.12366699800008973,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:56: simple_save (from tensorflow.python.saved_model.simple_save) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579229.6788044,
                        "msecs": 678.8043975830078,
                        "relativeCreated": 922176.8641471863,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /usr/local/lib/python3.8/dist-packages/tensorflow/python/saved_model/signature_def_utils_impl.py:203: build_tensor_info (from tensorflow.python.saved_model.utils_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nThis API was designed for TensorFlow v1. See https://www.tensorflow.org/guide/migrate for instructions on how to migrate your code to TensorFlow v2.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579229.6790683,
                        "msecs": 679.0683269500732,
                        "relativeCreated": 922177.1280765533,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    },
                    {
                        "name": "tensorflow",
                        "msg": "From /home/frasermince/portability/src/tensorflow_tests_reduced/simple_save_test.py:62: load (from tensorflow.python.saved_model.loader_impl) is deprecated and will be removed in a future version.\nInstructions for updating:\nUse `tf.saved_model.load` instead.",
                        "args": null,
                        "levelname": "WARNING",
                        "levelno": 30,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/deprecation.py",
                        "filename": "deprecation.py",
                        "module": "deprecation",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 350,
                        "funcName": "new_func",
                        "created": 1683579229.7304027,
                        "msecs": 730.4027080535889,
                        "relativeCreated": 922228.4624576569,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002738910000061878,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/simple_save_test.py::SimpleSaveTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005758419999892794,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.000621402999968268,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028798199991797446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testEval",
            "lineno": 74,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005673220000517176,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059781189999966955,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002472200001193414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testFalse",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005477500001234148,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008104043999992427,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002216359998783446,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg1",
            "lineno": 102,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005143200000929937,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002626857999985077,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002020340000399301,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testMissingArg2",
            "lineno": 110,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046320100000230013,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.002647663000061584,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019813600010820664,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testPlaceholderWithDefault",
            "lineno": 89,
            "outcome": "passed",
            "setup": {
                "duration": 0.00045831500005988346,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06006202399998983,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002807629998642369,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testTrue",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005803050000849908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008443087000159721,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002122719999988476,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::testUnknown",
            "lineno": 61,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004973049999534851,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06633493599997564,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000281428999869604,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/smart_cond_test.py::SmartCondTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005762749999576045,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004897069998150982,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00042540000004009926,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::testSmallInput2x2Pad1x0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000580759000058606,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11467521700001271,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003036210000573192,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006079659999613796,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004999069999485073,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00028360999999677006,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testDirect",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00057399100001021,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.998034524000104,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028847499993389647,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000617398000031244,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.16171072299994194,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000286619000007704,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testOneBlockDimZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000590810999938185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.14566261400000258,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030237499981922156,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsOneRemainingDim",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006364880000546691,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.21332323999990876,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027537300002222764,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsTwoRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005761970001003647,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3133791390000624,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00028836299998147297,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::testZeroBlockDimsZeroRemainingDims",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.000579689000005601,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11631014899990078,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003194339999481599,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchNDTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006761649999589281,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005614579999928537,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0004565820001971588,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::testSpaceToDepthTranspose",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006274240001857834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.166155536000133,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003248590001021512,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchSpaceToDepth::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006607390000681335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005867660001968034,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003221290000965382,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSize0",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006316150002021459,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004124745000126495,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023469900020245404,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeLarger",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005262430001948815,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003478134000033606,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022535699986292457,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleBoth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00051175599992348,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003593086999899242,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022490999981528148,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleHeight",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005101230001400836,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004542863000096986,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003369109999766806,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeNotDivisibleWidth",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005204369999773917,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004160426999987976,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022475200012195273,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testBlockSizeOne",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00047491400005128526,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.003458001999888438,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022166700000525452,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testInputWrongDimMissingBatch",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004961370000273746,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0033926430000974506,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021724499993069912,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::testUnknownShape",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046771899997111177,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0034125439999570517,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021092099996167235,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchErrorHandlingTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000447557999905257,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004128820000914857,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00043088600000373845,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005405629999586381,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5006112850001045,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0004069629999321478,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmall2",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006992860000991641,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.8345580899999732,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000303768000094351,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::testSmallPad1x1",
            "lineno": 1620,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006260870000005525,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.6579893180000909,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030009300007804995,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/space_to_batch_test.py::SpaceToBatchGradientTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0006399689998488611,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0005489759998908994,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003572890000214102,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::RandomTestBase::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005874640000911313,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004346059999988938,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00025920400003087707,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test0",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.000551468000139721,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.018627361999961067,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test0>\nsize = None\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(0,), dtype=int32, numpy=array([], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.0003362569998444087,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test1",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005832370000007359,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006144549000055122,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test1>\nsize = ()\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(0,), dtype=int32, numpy=array([], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[] rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.0003142820000903157,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test2",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005412059999798657,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01713237100011611,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1]{0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test2>\nsize = (1,)\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(1,), dtype=int32, numpy=array([1], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1]{0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.00031911400014905666,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test3",
            "lineno": 62,
            "outcome": "failed",
            "setup": {
                "duration": 0.0005605730000297626,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.016154529999994338,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                    "lineno": 52,
                    "message": "tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1,2]{1,0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\n\t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 65,
                        "message": ""
                    },
                    {
                        "path": "src/tensorflow_tests_reduced/standard_normal_test.py",
                        "lineno": 44,
                        "message": "in _test"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py",
                        "lineno": 73,
                        "message": "in standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py",
                        "lineno": 141,
                        "message": "in error_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py",
                        "lineno": 1176,
                        "message": "in op_dispatch_handler"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py",
                        "lineno": 91,
                        "message": "in random_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 641,
                        "message": "in random_standard_normal"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py",
                        "lineno": 681,
                        "message": "in random_standard_normal_eager_fallback"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py",
                        "lineno": 52,
                        "message": "UnimplementedError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.standard_normal_test.StandardNormalTest testMethod=test3>\nsize = (1, 2)\n\n    @parameterized.parameters((None,), ((),), ((1,),), ((1, 2),))\n    def test(self, size):\n>       self._test(size)\n\nsrc/tensorflow_tests_reduced/standard_normal_test.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/tensorflow_tests_reduced/standard_normal_test.py:44: in _test\n    np_out = self.np_func(*args, **kw_args)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/numpy_ops/np_random.py:73: in standard_normal\n    return random_ops.random_normal(size, dtype=dtype)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py:141: in error_handler\n    return fn(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py:1176: in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/random_ops.py:91: in random_normal\n    rnd = gen_random_ops.random_standard_normal(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:641: in random_standard_normal\n    return random_standard_normal_eager_fallback(\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_random_ops.py:681: in random_standard_normal_eager_fallback\n    _result = _execute.execute(b\"RandomStandardNormal\", 1, inputs=_inputs_flat,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop_name = b'RandomStandardNormal', num_outputs = 1\ninputs = [<tf.Tensor: shape=(2,), dtype=int32, numpy=array([1, 2], dtype=int32)>]\nattrs = ('seed', 87654321, 'seed2', 1503137960, 'dtype', 2, ...)\nctx = <tensorflow.python.eager.context.Context object at 0x7fc5b1811ee0>, name = None\n\n    def quick_execute(op_name, num_outputs, inputs, attrs, ctx, name=None):\n      \"\"\"Execute a TensorFlow operation.\n    \n      Args:\n        op_name: Name of the TensorFlow operation (see REGISTER_OP in C++ code) to\n          execute.\n        num_outputs: The number of outputs of the operation to fetch. (Explicitly\n          provided instead of being inferred for performance reasons).\n        inputs: A list of inputs to the operation. Each entry should be a Tensor, or\n          a value which can be passed to the Tensor constructor to create one.\n        attrs: A tuple with alternating string attr names and attr values for this\n          operation.\n        ctx: The value of context.context().\n        name: Customized name for the operation.\n    \n      Returns:\n        List of output Tensor objects. The list is empty if there are no outputs\n    \n      Raises:\n        An exception on error.\n      \"\"\"\n      device_name = ctx.device_name\n      # pylint: disable=protected-access\n      try:\n        ctx.ensure_initialized()\n>       tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n                                            inputs, attrs, num_outputs)\nE                                           tensorflow.python.framework.errors_impl.UnimplementedError: {{function_node __wrapped__RandomStandardNormal_device_/job:localhost/replica:0/task:0/device:TPU:0}} While rewriting computation to not contain X64 element types, XLA encountered an HLO for which this rewriting is not implemented: %rng.4 = f64[1,2]{1,0} rng(f64[] %constant.3, f64[] %constant.2), distribution=rng_normal, metadata={op_type=\"RandomStandardNormal\" op_name=\"RandomStandardNormal\"}\nE                                           \t [[{{node RandomStandardNormal}}]] [Op:RandomStandardNormal]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py:52: UnimplementedError"
            },
            "teardown": {
                "duration": 0.00033527599998706137,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/standard_normal_test.py::StandardNormalTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005635619997974572,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009062870001343981,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003636839999217045,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testFiniteGradientAtDifficultPoints",
            "lineno": 90,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005821019999530108,
                "outcome": "passed"
            },
            "call": {
                "duration": 4.916716761999851,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030652600003122643,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testNormalSurvivalFunction",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006301549999534473,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.0981597580000653,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030352300018421374,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::testSampleLikeArgsGetDistDType",
            "lineno": 58,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006986479997976858,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4995176679999531,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00030042900016269414,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/survival_function_test.py::NormalTest::test_session",
            "lineno": 2753,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005983910000395554,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0009392249999109481,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00034875099981945823,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testDeterminism",
            "lineno": 73,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005893550001019321,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.17014513699996314,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002878039999814064,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testEmptyBatches",
            "lineno": 149,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005971739999495185,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.27997212600007515,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002826129998538818,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testExecuteMultipleWithoutError",
            "lineno": 112,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005887449999590899,
                "outcome": "passed"
            },
            "call": {
                "duration": 3.420576988999983,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003035470001577778,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::testThrowDeterminismError",
            "lineno": 60,
            "outcome": "passed",
            "setup": {
                "duration": 0.000635333999980503,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.11728576900009102,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00027338000018062303,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005709689999093825,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0008511749999797757,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00035421899997345463,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005659610001202964,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004462710001007508,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002561549999882118,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/svd_test.py::SvdGradGradOpTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005406269999639335,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00039475399989896687,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00026701699994191586,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005510319999757485,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3301721709999583,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003026919998774247,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006123299999671872,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021307914000090022,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.00034008000011453987,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005696159998933581,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.5123835039998994,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003087549998781469,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006245429999580665,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2594350790000135,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000310541999851921,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006207470000845206,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.4087489970002025,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032500499992238474,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006729180001912027,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.1352616990000115,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00032289399996443535,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006697390001590975,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.37326268900005743,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00040299600004800595,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000794978000158153,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0015764460001719272,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005219189999934315,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testDeterminism",
            "lineno": 203,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007177529998898535,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.639655583999911,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0005874469998161658,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithForwarding",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.001141220999897996,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.059618893000106254,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000298414000099001,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testTensorScatterUpdateWithStrings",
            "lineno": 138,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006238200001007499,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.021775520999881337,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                    "lineno": 7215,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py",
                        "lineno": 150,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py",
                        "lineno": 11518,
                        "message": "in tensor_scatter_update"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py",
                        "lineno": 7215,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <src.tensorflow_tests_reduced.tensor_scatter_update_test.ScatterNdTensorDeterminismTest testMethod=testTensorScatterUpdateWithStrings>\n\n    @test_util.run_in_graph_and_eager_modes\n    def testTensorScatterUpdateWithStrings(self):\n        indices = constant_op.constant([[4], [3], [1], [7]])\n        updates = constant_op.constant([\"there\", \"there\", \"there\", \"12\"],\n                                       dtype=dtypes.string)\n        tensor = constant_op.constant([\n            \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"\n        ],\n            dtype=dtypes.string)\n        timer = tensorflow_op_timer()\n        with timer:\n>           updated = array_ops.tensor_scatter_update(tensor, indices, updates)\n\nsrc/tensorflow_tests_reduced/tensor_scatter_update_test.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_array_ops.py:11518: in tensor_scatter_update\n    _ops.raise_from_not_ok_status(e, name)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ne = _NotOkStatusException(), name = None\n\n    def raise_from_not_ok_status(e, name):\n      e.message += (\" name: \" + name if name is not None else \"\")\n>     raise core._status_to_exception(e) from None  # pylint: disable=protected-access\nE     tensorflow.python.framework.errors_impl.InvalidArgumentError: Could not satisfy device specification '/job:localhost/replica:0/task:0/device:TPU:0'. enable_soft_placement=0. Supported device types [CPU]. All available devices [/job:localhost/replica:0/task:0/device:CPU:0, /job:localhost/replica:0/task:0/device:TPU:0, /job:localhost/replica:0/task:0/device:TPU:1, /job:localhost/replica:0/task:0/device:TPU:2, /job:localhost/replica:0/task:0/device:TPU:3, /job:localhost/replica:0/task:0/device:TPU:4, /job:localhost/replica:0/task:0/device:TPU:5, /job:localhost/replica:0/task:0/device:TPU:6, /job:localhost/replica:0/task:0/device:TPU:7, /job:localhost/replica:0/task:0/device:TPU_SYSTEM:0]. [Op:TensorScatterUpdate]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py:7215: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0003875840000091557,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSub",
            "lineno": 46,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006393149999439629,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.26765582899997753,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031774700005371415,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateAddSubGradients",
            "lineno": 66,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006939219999821944,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.10872647099995447,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00031182099996840407,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateMinMax",
            "lineno": 98,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006605259998195834,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2707522709999921,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0003119230000265816,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices1D",
            "lineno": 158,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006878250001136621,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.06521048600006907,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002852370000709925,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::testUpdateRepeatedIndices2D",
            "lineno": 173,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006453969999711262,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.19057318300019688,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000330435000023499,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/tensor_scatter_update_test.py::ScatterNdTensorDeterminismTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0007014759999037778,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0012639109997962805,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0005556930000238935,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::testInt32Basic",
            "lineno": 80,
            "outcome": "passed",
            "setup": {
                "duration": 0.0007384819998605963,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0063776429999506945,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023903200008135173,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/true_divide_test.py::TrueDivTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005730230000153824,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0006654920000528364,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0003216919999431411,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::testConvertSingleVariable",
            "lineno": 169,
            "outcome": "failed",
            "setup": {
                "duration": 0.0006762589998743351,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.01445597900010398,
                "outcome": "failed",
                "crash": {
                    "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                    "lineno": 1397,
                    "message": "tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\n\nDetected at node 'x' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/variable_scope_test.py\", line 177, in testConvertSingleVariable\n      _ = variable_scope.get_variable(\"x\", initializer=1.0)\nNode: 'x'\nCannot assign a device for operation x: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nColocation Debug Info:\nColocation group had the following types and supported devices: \nRoot Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nIdentity: CPU TPU TPU_SYSTEM \nAssign: CPU \nVariableV2: CPU TPU TPU_SYSTEM \n\nColocation members, user-requested devices, and framework assigned devices, if any:\n  x (VariableV2) /device:TPU:0\n  x/Assign (Assign) /device:TPU:0\n  x/read (Identity) /device:TPU:0\n\nOp: VariableV2\nNode attrs: _xla_inferred_shapes=[[]], dtype=DT_FLOAT, container=\"\", shape=[], shared_name=\"\"\nRegistered kernels:\n  device='DEFAULT'; dtype in [DT_BOOL]\n  device='DEFAULT'; dtype in [DT_COMPLEX128]\n  device='DEFAULT'; dtype in [DT_COMPLEX64]\n  device='DEFAULT'; dtype in [DT_DOUBLE]\n  device='DEFAULT'; dtype in [DT_FLOAT]\n  device='DEFAULT'; dtype in [DT_HALF]\n  device='DEFAULT'; dtype in [DT_UINT32]\n  device='DEFAULT'; dtype in [DT_INT64]\n  device='CPU'\n\n\t [[{{node x}}]]"
                },
                "traceback": [
                    {
                        "path": "src/tensorflow_tests_reduced/variable_scope_test.py",
                        "lineno": 180,
                        "message": ""
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 968,
                        "message": "in run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1191,
                        "message": "in _run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1371,
                        "message": "in _do_run"
                    },
                    {
                        "path": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py",
                        "lineno": 1397,
                        "message": "InvalidArgumentError"
                    }
                ],
                "longrepr": "self = <tensorflow.python.client.session.Session object at 0x7fc470383430>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7fc46fab8790>\nargs = ({}, [], [<tensorflow.python.client._pywrap_tf_session.TF_Operation object at 0x7fc46cb15670>], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'x\\' defined at (most recent call last):\\n    File \"src/tensorflow_test.p...ce=\\'DEFAULT\\'; dtype in [DT_UINT32]\\n  device=\\'DEFAULT\\'; dtype in [DT_INT64]\\n  device=\\'CPU\\'\\n\\n\\t [[{{node x}}]]'\nm = <re.Match object; span=(754, 760), match='[[]], '>\n\n    def _do_call(self, fn, *args):\n      try:\n>       return fn(*args)\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1378: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfeed_dict = {}, fetch_list = []\ntarget_list = [<tensorflow.python.client._pywrap_tf_session.TF_Operation object at 0x7fc46cb15670>]\noptions = None, run_metadata = None\n\n    def _run_fn(feed_dict, fetch_list, target_list, options, run_metadata):\n      # Ensure any changes to the graph are reflected in the runtime.\n>     self._extend_graph()\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1360: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7fc470383430>\n\n    def _extend_graph(self):\n      with self._graph._session_run_lock():  # pylint: disable=protected-access\n>       tf_session.ExtendSession(self._session)\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Cannot assign a device for operation x: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Identity: CPU TPU TPU_SYSTEM \nE       Assign: CPU \nE       VariableV2: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         x (VariableV2) /device:TPU:0\nE         x/Assign (Assign) /device:TPU:0\nE         x/read (Identity) /device:TPU:0\nE       \nE       Op: VariableV2\nE       Node attrs: _xla_inferred_shapes=[[]], dtype=DT_FLOAT, container=\"\", shape=[], shared_name=\"\"\nE       Registered kernels:\nE         device='DEFAULT'; dtype in [DT_BOOL]\nE         device='DEFAULT'; dtype in [DT_COMPLEX128]\nE         device='DEFAULT'; dtype in [DT_COMPLEX64]\nE         device='DEFAULT'; dtype in [DT_DOUBLE]\nE         device='DEFAULT'; dtype in [DT_FLOAT]\nE         device='DEFAULT'; dtype in [DT_HALF]\nE         device='DEFAULT'; dtype in [DT_UINT32]\nE         device='DEFAULT'; dtype in [DT_INT64]\nE         device='CPU'\nE       \nE       \t [[{{node x}}]]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1401: InvalidArgumentError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <src.tensorflow_tests_reduced.variable_scope_test.VariablesToConstantsTest testMethod=testConvertSingleVariable>\n\n    def testConvertSingleVariable(self):\n        \"\"\"Tests that a single variable is properly converted to a constant.\"\"\"\n    \n        with ops.Graph().as_default():\n            timer = tensorflow_op_timer()\n            with timer:\n                with variable_scope.variable_scope(\"\", use_resource=False):\n                    _ = variable_scope.get_variable(\"x\", initializer=1.0)\n                timer.gen.send(None)\n            with session_lib.Session() as sess:\n>               sess.run(variables.global_variables_initializer())\n\nsrc/tensorflow_tests_reduced/variable_scope_test.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:968: in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1191: in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1371: in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <tensorflow.python.client.session.Session object at 0x7fc470383430>\nfn = <function BaseSession._do_run.<locals>._run_fn at 0x7fc46fab8790>\nargs = ({}, [], [<tensorflow.python.client._pywrap_tf_session.TF_Operation object at 0x7fc46cb15670>], None, None)\nmessage = 'Graph execution error:\\n\\nDetected at node \\'x\\' defined at (most recent call last):\\n    File \"src/tensorflow_test.p...ce=\\'DEFAULT\\'; dtype in [DT_UINT32]\\n  device=\\'DEFAULT\\'; dtype in [DT_INT64]\\n  device=\\'CPU\\'\\n\\n\\t [[{{node x}}]]'\nm = <re.Match object; span=(754, 760), match='[[]], '>\n\n    def _do_call(self, fn, *args):\n      try:\n        return fn(*args)\n      except errors.OpError as e:\n        message = compat.as_text(e.message)\n        m = BaseSession._NODEDEF_NAME_RE.search(message)\n        node_def = None\n        op = None\n        if m is not None:\n          node_name = m.group(3)\n          try:\n            op = self._graph.get_operation_by_name(node_name)\n            node_def = op.node_def\n          except KeyError:\n            pass\n        message = error_interpolation.interpolate(message, self._graph)\n        if 'only supports NHWC tensor format' in message:\n          message += ('\\nA possible workaround: Try disabling Grappler optimizer'\n                      '\\nby modifying the config for creating the session eg.'\n                      '\\nsession_config.graph_options.rewrite_options.'\n                      'disable_meta_optimizer = True')\n>       raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\nE       tensorflow.python.framework.errors_impl.InvalidArgumentError: Graph execution error:\nE       \nE       Detected at node 'x' defined at (most recent call last):\nE           File \"src/tensorflow_test.py\", line 96, in <module>\nE             retcode = pytest.main([sys.argv[1], \"-s\"])\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\nE             ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\nE             return wrap_session(config, _main)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\nE             session.exitstatus = doit(config, session) or 0\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\nE             config.hook.pytest_runtestloop(session=session)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\nE             item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\nE             runtestprotocol(item, nextitem=nextitem)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\nE             reports.append(call_and_report(item, \"call\", log))\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\nE             call = call_runtest_hook(item, when, **kwds)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\nE             return CallInfo.from_call(\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\nE             result: Optional[TResult] = func()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\nE             lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\nE             return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\nE             return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\nE             res = hook_impl.function(*args)\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\nE             item.runtest()\nE           File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\nE             self._testcase(result=self)  # type: ignore[arg-type]\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\nE             return self.run(*args, **kwds)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\nE             self._callTestMethod(testMethod)\nE           File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\nE             method()\nE           File \"/home/frasermince/portability/src/tensorflow_tests_reduced/variable_scope_test.py\", line 177, in testConvertSingleVariable\nE             _ = variable_scope.get_variable(\"x\", initializer=1.0)\nE       Node: 'x'\nE       Cannot assign a device for operation x: Could not satisfy explicit device specification '/device:TPU:0' because no supported kernel for TPU devices is available.\nE       Colocation Debug Info:\nE       Colocation group had the following types and supported devices: \nE       Root Member(assigned_device_name_index_=-1 requested_device_name_='/device:TPU:0' assigned_device_name_='' resource_device_name_='/device:TPU:0' supported_device_types_=[CPU] possible_devices_=[]\nE       Identity: CPU TPU TPU_SYSTEM \nE       Assign: CPU \nE       VariableV2: CPU TPU TPU_SYSTEM \nE       \nE       Colocation members, user-requested devices, and framework assigned devices, if any:\nE         x (VariableV2) /device:TPU:0\nE         x/Assign (Assign) /device:TPU:0\nE         x/read (Identity) /device:TPU:0\nE       \nE       Op: VariableV2\nE       Node attrs: _xla_inferred_shapes=[[]], dtype=DT_FLOAT, container=\"\", shape=[], shared_name=\"\"\nE       Registered kernels:\nE         device='DEFAULT'; dtype in [DT_BOOL]\nE         device='DEFAULT'; dtype in [DT_COMPLEX128]\nE         device='DEFAULT'; dtype in [DT_COMPLEX64]\nE         device='DEFAULT'; dtype in [DT_DOUBLE]\nE         device='DEFAULT'; dtype in [DT_FLOAT]\nE         device='DEFAULT'; dtype in [DT_HALF]\nE         device='DEFAULT'; dtype in [DT_UINT32]\nE         device='DEFAULT'; dtype in [DT_INT64]\nE         device='CPU'\nE       \nE       \t [[{{node x}}]]\n\n/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py:1397: InvalidArgumentError"
            },
            "teardown": {
                "duration": 0.0002771580000171525,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/variable_scope_test.py::VariablesToConstantsTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000532813999825521,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.00043739600005210377,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.0002704099999846221,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_non_singular",
            "lineno": 87,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005834400001276663,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006641152999918631,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00019768400011344056,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_positive_definite",
            "lineno": 82,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004559279998375132,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.004966638000041712,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00021246200003588456,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_assert_self_adjoint",
            "lineno": 92,
            "outcome": "passed",
            "setup": {
                "duration": 0.00046751799982303055,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008971198999915941,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002051950000350189,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_is_x_flags",
            "lineno": 175,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004670439998335496,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0060076199999912205,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020208299997648282,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_dynamic",
            "lineno": 151,
            "outcome": "passed",
            "setup": {
                "duration": 0.000497057000075074,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3322951939999257,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_73]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative_2/assert_less_equal/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 156, in test_negative_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 425, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579256.6573036,
                        "msecs": 657.3035717010498,
                        "relativeCreated": 949155.3633213043,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00029942100013613526,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_batch_shape_raises_static",
            "lineno": 123,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006155129999569908,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.009763817000020936,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.000233071000138807,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_dynamic",
            "lineno": 135,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005629099998714082,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.22865341399983663,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_63]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be non-negative..  ] [Condition x >= 0 did not hold element-wise:] [x (PlaceholderWithDefault:0) = ] [-2]\n\t [[{{node LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_non_negative/assert_less_equal/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 140, in test_negative_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 370, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_non_negative(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 622, in assert_non_negative\n    return assert_less_equal(zero, x, data=data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1010, in assert_less_equal\n    return _binary_assert('<=', 'assert_less_equal', math_ops.less_equal,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579256.9618852,
                        "msecs": 961.8852138519287,
                        "relativeCreated": 949459.9449634552,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002883470001506794,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_negative_num_rows_raises_static",
            "lineno": 109,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006016659999659169,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008248804000004384,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00023063300000103482,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_dynamic",
            "lineno": 143,
            "outcome": "passed",
            "setup": {
                "duration": 0.000531425000190211,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.23941102099979616,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank_2/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank_2/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/add/_73]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument batch_shape must be a 1-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [1] [Received shape: ] []\n\t [[{{node LinearOperatorZeros/assert_rank_2/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank_2/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 148, in test_non_1d_batch_shape_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 243, in __init__\n    self._check_batch_shape_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 421, in _check_batch_shape_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579257.2274988,
                        "msecs": 227.49876976013184,
                        "relativeCreated": 949725.5585193634,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0003052110000680841,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_1d_batch_shape_raises_static",
            "lineno": 115,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006236740000531427,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.006509156999982224,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00020790199982911872,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_batch_shape_raises_static",
            "lineno": 119,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005031659998167015,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.008500456000092527,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.00022779099981562467,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_integer_num_rows_raises_static",
            "lineno": 103,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005205090001254575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007655395000028875,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002243469998575165,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_dynamic",
            "lineno": 127,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005326769999101089,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.2045537719998265,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/assert_rank/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank/Assert/Assert'\nDetected at node 'LinearOperatorZeros/assert_rank/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n      operator = linalg_lib.LinearOperatorZeros(\nNode: 'LinearOperatorZeros/assert_rank/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank/Assert/Assert}}]]\n\t [[LinearOperatorZeros/to_dense/LinearOperatorZeros/matmul/zeros/_63]]\n  (1) INVALID_ARGUMENT: assertion failed: [Argument num_rows must be a 0-D Tensor..  ] [Tensor PlaceholderWithDefault:0 must have rank] [0] [Received shape: ] [1]\n\t [[{{node LinearOperatorZeros/assert_rank/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/assert_rank/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 132, in test_non_scalar_num_rows_raises_dynamic\n    operator = linalg_lib.LinearOperatorZeros(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 225, in __init__\n    self._check_domain_range_possibly_add_asserts()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 366, in _check_domain_range_possibly_add_asserts\n    check_ops.assert_rank(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1243, in assert_rank\n    assert_op = _assert_rank_condition(x, rank, static_condition,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 1156, in _assert_rank_condition\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579257.471998,
                        "msecs": 471.9979763031006,
                        "relativeCreated": 949970.0577259064,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.0002864599998702033,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_non_scalar_num_rows_raises_static",
            "lineno": 97,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005628559999877325,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.011245489999964775,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002081299999190378,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_ref_type_shape_args_raises",
            "lineno": 193,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004929110000375658,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026949302000048192,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002035369998338865,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.0005001319998427789,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0007017670000095677,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.00020094900014555606,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_dynamic",
            "lineno": 165,
            "outcome": "passed",
            "setup": {
                "duration": 0.0004404179999255575,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.3253985940000348,
                "outcome": "passed",
                "log": [
                    {
                        "name": "tensorflow",
                        "msg": "Graph execution error:\n\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\nDetected at node 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert' defined at (most recent call last):\n    File \"src/tensorflow_test.py\", line 96, in <module>\n      retcode = pytest.main([sys.argv[1], \"-s\"])\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n      ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n      return wrap_session(config, _main)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n      session.exitstatus = doit(config, session) or 0\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n      config.hook.pytest_runtestloop(session=session)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n      item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n      runtestprotocol(item, nextitem=nextitem)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n      reports.append(call_and_report(item, \"call\", log))\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n      call = call_runtest_hook(item, when, **kwds)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n      return CallInfo.from_call(\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n      result: Optional[TResult] = func()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n      lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n      return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n      return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n      res = hook_impl.function(*args)\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n      item.runtest()\n    File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n      self._testcase(result=self)  # type: ignore[arg-type]\n    File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n      return self.run(*args, **kwds)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n      self._callTestMethod(testMethod)\n    File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n      method()\n    File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n      self.evaluate(operator.matmul(x))\nNode: 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert'\n2 root error(s) found.\n  (0) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n\t [[LinearOperatorZeros/matmul/zeros/_57]]\n  (1) INVALID_ARGUMENT: assertion failed: [Dimensions are not compatible.  shape[-2] of argument to be the same as this operator] [Condition x == y did not hold element-wise:] [x (LinearOperatorZeros/matmul/strided_slice:0) = ] [3] [y (LinearOperatorZeros/matmul/LinearOperatorZeros/domain_dimension_tensor/strided_slice:0) = ] [2]\n\t [[{{node LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert}}]]\n0 successful operations.\n0 derived errors ignored.\n\nOriginal stack trace for 'LinearOperatorZeros/matmul/assert_equal_1/Assert/Assert':\n  File \"src/tensorflow_test.py\", line 96, in <module>\n    retcode = pytest.main([sys.argv[1], \"-s\"])\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/config/__init__.py\", line 167, in main\n    ret: Union[ExitCode, int] = config.hook.pytest_cmdline_main(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 317, in pytest_cmdline_main\n    return wrap_session(config, _main)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 270, in wrap_session\n    session.exitstatus = doit(config, session) or 0\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 324, in _main\n    config.hook.pytest_runtestloop(session=session)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/main.py\", line 349, in pytest_runtestloop\n    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 112, in pytest_runtest_protocol\n    runtestprotocol(item, nextitem=nextitem)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 131, in runtestprotocol\n    reports.append(call_and_report(item, \"call\", log))\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 220, in call_and_report\n    call = call_runtest_hook(item, when, **kwds)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 259, in call_runtest_hook\n    return CallInfo.from_call(\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 339, in from_call\n    result: Optional[TResult] = func()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_hooks.py\", line 265, in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_manager.py\", line 80, in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/pluggy/_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/runner.py\", line 167, in pytest_runtest_call\n    item.runtest()\n  File \"/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/unittest.py\", line 330, in runtest\n    self._testcase(result=self)  # type: ignore[arg-type]\n  File \"/usr/lib/python3.8/unittest/case.py\", line 736, in __call__\n    return self.run(*args, **kwds)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 676, in run\n    self._callTestMethod(testMethod)\n  File \"/usr/lib/python3.8/unittest/case.py\", line 633, in _callTestMethod\n    method()\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 1491, in decorated\n    f(self, *args, **kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/zeros_test.py\", line 174, in test_wrong_matrix_dimensions_raises_dynamic\n    self.evaluate(operator.matmul(x))\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator.py\", line 688, in matmul\n    return self._matmul(x, adjoint=adjoint, adjoint_arg=adjoint_arg)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_zeros.py\", line 310, in _matmul\n    aps = linear_operator_util.assert_compatible_matrix_dimensions(self, x)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/linalg/linear_operator_util.py\", line 234, in assert_compatible_matrix_dimensions\n    assert_same_dd = check_ops.assert_equal(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 726, in assert_equal\n    return _binary_assert('==', 'assert_equal', math_ops.equal, np.equal, x, y,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/check_ops.py\", line 427, in _binary_assert\n    return control_flow_ops.Assert(condition, data, summarize=summarize)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\", line 141, in error_handler\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/dispatch.py\", line 1176, in op_dispatch_handler\n    return dispatch_target(*args, **kwargs)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/tf_should_use.py\", line 243, in wrapped\n    return _add_should_use_warning(fn(*args, **kwargs),\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/control_flow_ops.py\", line 169, in Assert\n    return gen_logging_ops._assert(condition, data, summarize, name=\"Assert\")\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/ops/gen_logging_ops.py\", line 61, in _assert\n    _, _, _op, _outputs = _op_def_library._apply_op_helper(\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/op_def_library.py\", line 795, in _apply_op_helper\n    op = g._create_op_internal(op_type_name, inputs, dtypes=None,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/ops.py\", line 3798, in _create_op_internal\n    ret = Operation(\n",
                        "args": null,
                        "levelname": "ERROR",
                        "levelno": 40,
                        "pathname": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
                        "filename": "test_util.py",
                        "module": "test_util",
                        "exc_info": null,
                        "exc_text": null,
                        "stack_info": null,
                        "lineno": 2060,
                        "funcName": "run",
                        "created": 1683579257.7918491,
                        "msecs": 791.8491363525391,
                        "relativeCreated": 950289.9088859558,
                        "thread": 140493607750720,
                        "threadName": "MainThread",
                        "processName": "MainProcess",
                        "process": 11364
                    }
                ]
            },
            "teardown": {
                "duration": 0.00034562200016807765,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_wrong_matrix_dimensions_raises_static",
            "lineno": 159,
            "outcome": "passed",
            "setup": {
                "duration": 0.0006174830000418297,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.026667772999871886,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0002392779999809136,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosTest::test_zeros_matmul",
            "lineno": 182,
            "outcome": "passed",
            "setup": {
                "duration": 0.0005558769998970092,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.007932226000093578,
                "outcome": "passed"
            },
            "teardown": {
                "duration": 0.0007214190000013332,
                "outcome": "passed"
            }
        },
        {
            "nodeid": "src/tensorflow_tests_reduced/zeros_test.py::LinearOperatorZerosNotSquareTest::test_session",
            "lineno": 2753,
            "outcome": "skipped",
            "setup": {
                "duration": 0.000652343999945515,
                "outcome": "passed"
            },
            "call": {
                "duration": 0.0004553119999854971,
                "outcome": "skipped",
                "longrepr": "('/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py', 2754, 'Skipped: Not a test.')"
            },
            "teardown": {
                "duration": 0.07435075400007918,
                "outcome": "passed"
            }
        }
    ],
    "warnings": [
        {
            "message": "the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses",
            "category": "DeprecationWarning",
            "when": "collect",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/autograph/core/converter_testing.py",
            "lineno": 18
        },
        {
            "message": "torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py",
            "lineno": 181
        },
        {
            "message": "invalid value encountered in subtract",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2992
        },
        {
            "message": "torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/torch/distributed/distributed_c10d.py",
            "lineno": 181
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Casting complex values to real discards the imaginary part",
            "category": "ComplexWarning",
            "when": "runtest",
            "filename": "/home/frasermince/portability/src/tensorflow_tests_reduced/cast_test.py",
            "lineno": 51
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 3585
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The algorithm does not converge.  Roundoff error is detected\n  in the extrapolation table.  It is assumed that the requested tolerance\n  cannot be achieved, and that the returned result (if full_output = 1) is \n  the best which can be obtained.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The integral is probably divergent, or slowly convergent.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "The maximum number of subdivisions (50) has been achieved.\n  If increasing the limit yields no improvement it is advised to analyze \n  the integrand in order to determine the difficulties.  If the position of a \n  local difficulty can be determined (singularity, discontinuity) one will \n  probably gain from splitting up the interval and calling the integrator \n  on the subranges.  Perhaps a special-purpose integrator should be used.",
            "category": "IntegrationWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py",
            "lineno": 2041
        },
        {
            "message": "invalid value encountered in reduce",
            "category": "RuntimeWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/numpy/core/fromnumeric.py",
            "lineno": 86
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.",
            "category": "VisibleDeprecationWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py",
            "lineno": 2949
        },
        {
            "message": "Exception in thread Thread-1\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1378, in _do_call\n    return fn(*args)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1361, in _run_fn\n    return self._call_tf_sessionrun(options, feed_dict, fetch_list,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1454, in _call_tf_sessionrun\n    return tf_session.TF_SessionRun_wrapper(self._session, options, feed_dict,\ntensorflow.python.framework.errors_impl.CancelledError: Run call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 3486, in assertRaisesWithPredicateMatch\n    yield\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 968, in run\n    result = self._run(None, fetches, feed_dict, options_ptr,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1191, in _run\n    results = self._do_run(handle, final_targets, final_fetches,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1371, in _do_run\n    return self._do_call(_run_fn, feeds, fetches, targets, options,\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/client/session.py\", line 1397, in _do_call\n    raise type(e)(node_def, op, message)  # pylint: disable=no-value-for-parameter\ntensorflow.python.framework.errors_impl.CancelledError: Graph execution error:\n\nRun call was cancelled\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/lib/python3.8/threading.py\", line 932, in _bootstrap_inner\n    self.run()\n  File \"/usr/lib/python3.8/threading.py\", line 870, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/home/frasermince/portability/src/tensorflow_tests_reduced/run_test.py\", line 1394, in update_thread\n    sess.run(c)\n  File \"/usr/lib/python3.8/contextlib.py\", line 131, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python3.8/dist-packages/tensorflow/python/framework/test_util.py\", line 3490, in assertRaisesWithPredicateMatch\n    raise AssertionError(\"Exception of type %s: %s\" %\nAssertionError: Exception of type <class 'tensorflow.python.framework.errors_impl.CancelledError'>: Graph execution error:\n\nRun call was cancelled\n",
            "category": "PytestUnhandledThreadExceptionWarning",
            "when": "runtest",
            "filename": "/home/cowfrica/.local/lib/python3.8/site-packages/_pytest/threadexception.py",
            "lineno": 73
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        },
        {
            "message": "To make it possible to preserve tf.data options across serialization boundaries, their implementation has moved to be part of the TensorFlow graph. As a consequence, the options value is in general no longer known at graph construction time. Invoking this method in graph mode retains the legacy behavior of the original implementation, but note that the returned value might not reflect the actual value of the options.",
            "category": "UserWarning",
            "when": "runtest",
            "filename": "/usr/local/lib/python3.8/dist-packages/tensorflow/python/data/ops/dataset_ops.py",
            "lineno": 461
        }
    ]
}